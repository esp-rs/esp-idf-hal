(function() {
    var implementors = Object.fromEntries([["embassy_sync",[["impl&lt;M: <a class=\"trait\" href=\"embassy_sync/blocking_mutex/raw/trait.RawMutex.html\" title=\"trait embassy_sync::blocking_mutex::raw::RawMutex\">RawMutex</a>, const N: usize&gt; <a class=\"trait\" href=\"embedded_io/trait.ErrorType.html\" title=\"trait embedded_io::ErrorType\">ErrorType</a> for &amp;<a class=\"struct\" href=\"embassy_sync/pipe/struct.Pipe.html\" title=\"struct embassy_sync::pipe::Pipe\">Pipe</a>&lt;M, N&gt;"],["impl&lt;M: <a class=\"trait\" href=\"embassy_sync/blocking_mutex/raw/trait.RawMutex.html\" title=\"trait embassy_sync::blocking_mutex::raw::RawMutex\">RawMutex</a>, const N: usize&gt; <a class=\"trait\" href=\"embedded_io/trait.ErrorType.html\" title=\"trait embedded_io::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"embassy_sync/pipe/struct.Pipe.html\" title=\"struct embassy_sync::pipe::Pipe\">Pipe</a>&lt;M, N&gt;"],["impl&lt;M: <a class=\"trait\" href=\"embassy_sync/blocking_mutex/raw/trait.RawMutex.html\" title=\"trait embassy_sync::blocking_mutex::raw::RawMutex\">RawMutex</a>, const N: usize&gt; <a class=\"trait\" href=\"embedded_io/trait.ErrorType.html\" title=\"trait embedded_io::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"embassy_sync/pipe/struct.Reader.html\" title=\"struct embassy_sync::pipe::Reader\">Reader</a>&lt;'_, M, N&gt;"],["impl&lt;M: <a class=\"trait\" href=\"embassy_sync/blocking_mutex/raw/trait.RawMutex.html\" title=\"trait embassy_sync::blocking_mutex::raw::RawMutex\">RawMutex</a>, const N: usize&gt; <a class=\"trait\" href=\"embedded_io/trait.ErrorType.html\" title=\"trait embedded_io::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"embassy_sync/pipe/struct.Writer.html\" title=\"struct embassy_sync::pipe::Writer\">Writer</a>&lt;'_, M, N&gt;"]]],["embedded_io",[]],["embedded_io_async",[]],["esp_idf_hal",[["impl <a class=\"trait\" href=\"esp_idf_hal/io/trait.ErrorType.html\" title=\"trait esp_idf_hal::io::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"esp_idf_hal/adc/continuous/struct.AdcDriver.html\" title=\"struct esp_idf_hal::adc::continuous::AdcDriver\">AdcDriver</a>&lt;'_&gt;"],["impl <a class=\"trait\" href=\"esp_idf_hal/io/trait.ErrorType.html\" title=\"trait esp_idf_hal::io::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"esp_idf_hal/uart/struct.UartDriver.html\" title=\"struct esp_idf_hal::uart::UartDriver\">UartDriver</a>&lt;'_&gt;"],["impl <a class=\"trait\" href=\"esp_idf_hal/io/trait.ErrorType.html\" title=\"trait esp_idf_hal::io::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"esp_idf_hal/uart/struct.UartRxDriver.html\" title=\"struct esp_idf_hal::uart::UartRxDriver\">UartRxDriver</a>&lt;'_&gt;"],["impl <a class=\"trait\" href=\"esp_idf_hal/io/trait.ErrorType.html\" title=\"trait esp_idf_hal::io::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"esp_idf_hal/uart/struct.UartTxDriver.html\" title=\"struct esp_idf_hal::uart::UartTxDriver\">UartTxDriver</a>&lt;'_&gt;"],["impl <a class=\"trait\" href=\"esp_idf_hal/io/trait.ErrorType.html\" title=\"trait esp_idf_hal::io::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"esp_idf_hal/usb_serial/struct.UsbSerialDriver.html\" title=\"struct esp_idf_hal::usb_serial::UsbSerialDriver\">UsbSerialDriver</a>&lt;'_&gt;"],["impl&lt;'d, T&gt; <a class=\"trait\" href=\"esp_idf_hal/io/trait.ErrorType.html\" title=\"trait esp_idf_hal::io::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"esp_idf_hal/uart/struct.AsyncUartDriver.html\" title=\"struct esp_idf_hal::uart::AsyncUartDriver\">AsyncUartDriver</a>&lt;'d, T&gt;<div class=\"where\">where\n    T: BorrowMut&lt;<a class=\"struct\" href=\"esp_idf_hal/uart/struct.UartDriver.html\" title=\"struct esp_idf_hal::uart::UartDriver\">UartDriver</a>&lt;'d&gt;&gt;,</div>"],["impl&lt;'d, T&gt; <a class=\"trait\" href=\"esp_idf_hal/io/trait.ErrorType.html\" title=\"trait esp_idf_hal::io::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"esp_idf_hal/uart/struct.AsyncUartRxDriver.html\" title=\"struct esp_idf_hal::uart::AsyncUartRxDriver\">AsyncUartRxDriver</a>&lt;'d, T&gt;<div class=\"where\">where\n    T: BorrowMut&lt;<a class=\"struct\" href=\"esp_idf_hal/uart/struct.UartRxDriver.html\" title=\"struct esp_idf_hal::uart::UartRxDriver\">UartRxDriver</a>&lt;'d&gt;&gt;,</div>"],["impl&lt;'d, T&gt; <a class=\"trait\" href=\"esp_idf_hal/io/trait.ErrorType.html\" title=\"trait esp_idf_hal::io::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"esp_idf_hal/uart/struct.AsyncUartTxDriver.html\" title=\"struct esp_idf_hal::uart::AsyncUartTxDriver\">AsyncUartTxDriver</a>&lt;'d, T&gt;<div class=\"where\">where\n    T: BorrowMut&lt;<a class=\"struct\" href=\"esp_idf_hal/uart/struct.UartTxDriver.html\" title=\"struct esp_idf_hal::uart::UartTxDriver\">UartTxDriver</a>&lt;'d&gt;&gt;,</div>"],["impl&lt;Dir&gt; <a class=\"trait\" href=\"esp_idf_hal/io/trait.ErrorType.html\" title=\"trait esp_idf_hal::io::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"esp_idf_hal/i2s/struct.I2sDriver.html\" title=\"struct esp_idf_hal::i2s::I2sDriver\">I2sDriver</a>&lt;'_, Dir&gt;"]]]]);
    if (window.register_implementors) {
        window.register_implementors(implementors);
    } else {
        window.pending_implementors = implementors;
    }
})()
//{"start":57,"fragment_lengths":[1775,19,25,3275]}