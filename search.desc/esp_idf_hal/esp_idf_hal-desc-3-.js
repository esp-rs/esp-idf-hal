searchState.loadedDescShard("esp_idf_hal", 3, "Erase given number of sectors from the SD/MMC card\nDecoded values of Extended Card Specific Data\nErase complete SD/MMC card\nGet status of SD/MMC card\nSD/MMC Host description\nEnable SDIO interrupt in the SDMMC host\nGet the data of CIS region of an SDIO card.\nParse and print the CIS information of an SDIO card.\nRead blocks of data from an SDIO card using IO_RW_EXTENDED …\nRead one byte from an SDIO card using IO_RW_DIRECT (CMD52)\nRead multiple bytes from an SDIO card using IO_RW_EXTENDED …\nBlock until an SDIO interrupt is received\nWrite blocks of data to an SDIO card using IO_RW_EXTENDED …\nWrite one byte to an SDIO card using IO_RW_DIRECT (CMD52)\nWrite multiple bytes to an SDIO card using IO_RW_EXTENDED …\nCheck if SD/MMC card supports sanitize\nSanitize the data that was unmapped by a Discard command\nRead given number of sectors from the SD/MMC card\nSD/MMC command response buffer\nDecoded values from SD Configuration Register Note: When …\nDecoded values from SD Status Register Note: When new …\nSD SWITCH_FUNC response buffer\nWrite given number of sectors to SD/MMC card\nHandle representing an SD SPI device\nExtra configuration for SD SPI device.\n@brief Release resources allocated using sdspi_host_init\n@brief Send command to the card and get response\n@brief Get the DMA memory information for the host driver\n@brief Calculate working frequency for specific device\n@brief Initialize SD SPI driver\n@brief Attach and initialize an SD SPI device on the …\n@brief Enable SDIO interrupt.\n@brief Wait for SDIO interrupt until timeout.\n@brief Remove an SD SPI device\n@brief Set card clock frequency\n&lt; Time.\n&lt; secure data management features supported by the card\n&lt; Secondary channel of AP\n&lt; sector size in bytes\n&lt; Secure version\nHandler function for authenticating connection request and …\nHandler function for authenticating connection request and …\n&lt; seekdir without context pointer\n&lt; seekdir with context pointer\n&lt; Count of memory segments\n&lt; RSSI threshold for parent selection. It should be a …\n&lt; the capacity of myself, total child numbers plus 1, all …\n&lt; layer\n&lt; semaphore instance\n&lt; Depth of internal transfer ringbuffer, increase this …\n&lt; Timeout for send function (in seconds)\n&lt; Timeout for send function (in seconds)\n&lt; product serial number\nThe serial number of the revoked certificate.\n&lt; Unique id for certificate issued by a specific CA.\n&lt; set to true to request NTP server config from DHCP\n&lt; set to true to request NTP server config from DHCP\nTCP Port number for receiving and transmitting HTTP traffic\nTCP Port number for receiving and transmitting HTTP traffic\n&lt; Server certificate in a buffer This buffer should be …\n&lt; Size of server certificate pointed to by …\n&lt; Server certificate legacy name\n&lt; Size of server certificate legacy name\n&lt; Server key in a buffer This buffer should be NULL …\n&lt; Size of server key pointed to by serverkey_pem_buf\n&lt; Server key decryption password string\n&lt; Server key decryption password string\n&lt; String length of the password pointed to by …\n&lt; String length of the password pointed to by …\n&lt; Server key legacy name\n&lt; Size of server key legacy name\n&lt; list of servers\n&lt; list of servers\n&lt; Service name identifier\n&lt; Service name identifier\n128 bit UUID of the provisioning service\n128 bit UUID of the provisioning service\nSession Context Pointer\nSession Context Pointer\n&lt; <em>MQTT</em> session configuration.\n&lt; <em>MQTT</em> session_present flag for connection event\n@brief Set MAC address\n@brief Set PHY chip address\n@brief Set MAC address\n@brief Set PHY chip address\n&lt; host function to set DDR mode\n&lt; host function to set bus width\n&lt; host function to set card clock frequency\n&lt; host function to set whether the clock is always enabled\nFunction which is to be called by the manager to set a …\nFunction which is to be called by the manager to set a …\nHandler function called when WiFi connection configuration …\nHandler function called when WiFi connection configuration …\nFunction which is to be called by the manager to set the …\nFunction which is to be called by the manager to set the …\n@brief Set duplex mode of MAC\n@brief Sets PHY duplex mode\n@brief Set duplex mode of MAC\n@brief Sets PHY duplex mode\nCall to set flash operation status\n@brief Set extra gap in x and y axis\n&lt; set input delay phase\n@brief Set link status of MAC\n@brief Set Ethernet PHY link status\n@brief Set link status of MAC\n@brief Set Ethernet PHY link status\n@brief Set mediator for Ethernet MAC\n@brief Set mediator for PHY\n@brief Set mediator for Ethernet MAC\n@brief Set mediator for PHY\n&lt; Selects a NULL client id\n@brief Set the PAUSE ability of peer node\n@brief Set the PAUSE ability of peer node\n@brief Set promiscuous of MAC\n@brief Set promiscuous of MAC\n@brief Set speed of MAC\n@brief Sets PHY speed mode\n@brief Set speed of MAC\n@brief Sets PHY speed mode\nDisable write protection.\nDisable write protection.\n&lt; I2C start and stop condition setup period\n&lt; SHA1-based Pseudo-Random Function (PRF) (IEEE 802.11i, …\n&lt; SHA-1 hash callback function for data vector\n&lt; The SHA256 PRF callback function used by esp_wifi\n&lt; SHA256 hash callback function for data vector\n&lt;Waterproof. Shield channel drive capability configuration.\n&lt;Waterproof. Shield channel drive capability configuration.\n&lt; manually left shift bits of the scale of the CSI data. …\n&lt; Enable it to scan AP whose SSID is hidden\nShutdown handler type\n&lt; Event signal, in same task, different Event with …\n&lt; Event signal, in same task, different Event with …\n&lt; CRL signature type identifier\n&lt; Signature algorithm, e.g. sha1RSA\n@brief Sigma-delta channel list\n&lt; Sigma-delta channel 0\n&lt; Sigma-delta channel 1\n&lt; Sigma-delta channel 2\n&lt; Sigma-delta channel 3\n&lt; Sigma-delta channel max\n@brief Configure Sigma-delta channel\n@brief Sigma-delta configure struct\n&lt; Sigma-delta duty, duty ranges from -128 to 127.\n&lt; Sigma-delta output io number, refer to gpio.h for more …\n@brief SIGMADELTA port number, the max port number is …\n&lt; SIGMADELTA port 0\n&lt; SIGMADELTA port max\n&lt; Sigma-delta prescale, prescale ranges from 0 to 255.\n@brief Set Sigma-delta channel duty.\n@brief Set Sigma-delta signal output pin\n@brief Set Sigma-delta channel’s clock pre-scale value. …\n&lt; RMT will stop receiving if one symbol level has kept …\n&lt; A pulse whose width is smaller than this threshold will …\n&lt; Sinc filter scaling value\n&lt; Use Single Filter Mode (see documentation)\n&lt; The size of the block\n&lt; The size of the block\n&lt; Size of the region\n&lt; Size of SPI flash in bytes. If 0, size will be detected …\n&lt; The crypto callback function structure size\n&lt; data size\n&lt; size of the partition, in bytes\nElement size\n&lt; size of <em>MQTT</em> send/receive buffer\n&lt; Conversion frame size\n&lt; The buffer size of DMA buffer when success to send or …\n&lt; I2S data size for I2S_DATA event\n&lt; UART data size for UART_DATA event\n&lt; Synchronization Jump Width (Max time quanta jump for …\n&lt; Skip any validation of server certificate CN field\n&lt; Skip any validation of server certificate CN field, this …\n&lt; Skip any validation of server certificate CN field\n&lt; Skip any validation of server certificate CN field\n&lt; Set true to enable skip mask. If it is enabled, only the …\n&lt; Set to enable skip mask. If it is enabled, only the data …\n&lt; Set to enable skip mask. If it is enabled, only the data …\n!&lt; Setting to skip unhandled events in light sleep for …\n&lt; I2C slave config\n&lt; I2C slave address\n&lt; I2C address for slave mode\n@endcond\n&lt; slot number, to be passed to host functions\n&lt; I2S slot bit width (total bits per slot), only support …\n&lt; I2S slot bit width (total bits per slot)\n&lt; I2S slot bit width (total bits per slot)\n&lt; PDM TX slot configurations, can be generated by macro …\n&lt; Standard mode slot configuration, can be generated by …\n&lt; TDM mode slot configuration, can be generated by macros …\n&lt; Select the left, right or both slot\n&lt; Slot mask. Activating slots by setting 1 to …\n&lt; Set mono or stereo mode with I2S_SLOT_MODE_MONO or …\n&lt; Set mono or stereo mode with I2S_SLOT_MODE_MONO or …\n&lt; Set mono or stereo mode with I2S_SLOT_MODE_MONO or …\nArgument structure for SC_EVENT_GOT_SSID_PSWD event\nSmartconfig event declarations\n&lt; Station smartconfig has found the channel of the target …\n&lt; Station smartconfig got the SSID and password\n&lt; Station smartconfig has finished to scan for APs\n&lt; Station smartconfig has sent ACK to cellphone\nConfigure structure for esp_smartconfig_start\n&lt; protocol: AirKiss\n&lt; protocol: ESPTouch\n&lt; protocol: ESPTouch and AirKiss\n&lt; protocol: ESPTouch v2\n&lt;Level of filter applied on the original data against …\n&lt;Level of filter applied on the original data against …\n&lt; set to true if smooth sync required\n&lt; set to true if smooth sync required\n@brief Get the sync interval of SNTP operation\n@brief Get set sync mode\n@brief Get status of time sync\n@brief system time getter used in the sntp module @note …\n@brief Restart SNTP\n@brief Set the sync interval of SNTP operation\n@brief Set the sync mode\n@brief Set status of time sync\n@brief system time setter used in the sntp module @note …\n@brief Set a callback function for time synchronization …\nSNTP time update mode\n&lt; Update system time immediately when receiving a response …\n&lt; Smooth time updating. Time error is gradually reduced …\nSNTP sync status\n@brief This function updates the system time.\n@brief SNTP callback function for notifying about time …\nCLOCK …\n&lt; PLL_CLK is the output of crystal oscillator frequency …\n&lt; From PLL, usually be 80MHz\n&lt; RC fast clock, about 17.5MHz\n&lt; RC slow clock, depends on the RTC_CLK_SRC configuration\n&lt; Main crystal oscillator clock\n@brief CPU_CLK mux inputs, which are the supported clock …\n&lt; Invalid CPU_CLK source\n&lt; Select PLL_CLK as CPU_CLK source (PLL_CLK is the output …\n&lt; Select RC_FAST_CLK as CPU_CLK source\n&lt; Select XTAL_CLK as CPU_CLK source\n@brief Supported clock sources for modules (CPU, …\n&lt; APB_CLK is highly dependent on the CPU_CLK source\n&lt; CPU_CLK can be sourced from XTAL, PLL, or RC_FAST by …\n&lt; Indication of the end of the available module clock …\n&lt; PLL_F160M_CLK is derived from PLL, and has a fixed …\n&lt; PLL_F80M_CLK is derived from PLL, and has a fixed …\n&lt; RC_FAST_CLK comes from the internal 20MHz rc oscillator, …\n&lt; RC_FAST_D256_CLK comes from the internal 20MHz rc …\n&lt; RTC_FAST_CLK can be sourced from XTAL_D2 or RC_FAST by …\n&lt; RTC_SLOW_CLK can be sourced from RC_SLOW, XTAL32K, or …\n&lt; XTAL_CLK comes from the external 40MHz crystal\n&lt; XTAL32K_CLK comes from the external 32kHz crystal, …\n@brief ADC digital controller clock source\n&lt; Select APB as the source clock\n&lt; Select APB as the default clock choice\n@brief Glitch filter clock source\n&lt; Select APB clock as the source clock\n&lt; Select APB clock as the default clock choice\n@brief Type of GPTimer clock source\n&lt; Select APB as the source clock\n&lt; Select APB as the default choice\n&lt; Select XTAL as the source clock\n@brief Type of I2C clock source.\n@brief I2S clock source enum\n&lt; Select PLL_F160M as the default source clock\n&lt; Select external clock as source clock\n&lt; Select PLL_F160M as the source clock\n&lt; Select XTAL as the source clock\n@brief Type of LEDC clock source, reserved for the legacy …\n&lt; LEDC source clock will be automatically selected based …\n&lt; Select APB as the source clock\n&lt; Select RC_FAST as the source clock\n&lt; Alias of ‘LEDC_USE_RC_FAST_CLK’\n&lt; Select XTAL as the source clock\n@brief MWDT clock source\n&lt; Select APB as the source clock\n&lt; Select APB as the default clock choice\n&lt; Select XTAL as the source clock\n@brief Type of RMT clock source, reserved for the legacy …\n&lt; RMT source clock is APB\n&lt; RMT source clock default choice is APB\n&lt; RMT source clock is XTAL\n@brief Type of RMT clock source\n&lt; Select APB as the source clock\n&lt; Select APB as the default choice\n&lt; Select RC_FAST as the source clock\n&lt; Select XTAL as the source clock\n@brief Sigma Delta Modulator clock source\n&lt; Select APB as the source clock\n&lt; Select APB as the default clock choice\n@brief Type of SPI clock source.\n&lt; Select APB as SPI source clock\n&lt; Select APB as SPI source clock\n&lt; Select XTAL as SPI source clock\n@brief Type of SYSTIMER clock source\n&lt; SYSTIMER source clock default choice is XTAL\n&lt; SYSTIMER source clock is XTAL\n@brief Type of Temp Sensor clock source\n&lt; Select XTAL as the default choice\n&lt; Select RC_FAST as the source clock\n&lt; Select XTAL as the source clock\n@brief Type of Timer Group clock source, reserved for the …\n&lt; Timer group clock source is APB\n&lt; Timer group clock source default choice is APB\n&lt; Timer group clock source is XTAL\n@brief TWAI clock source\n&lt; Select APB as the source clock\n&lt; Select APB as the default clock choice\n@brief Type of UART clock source, reserved for the legacy …\n&lt; UART source clock is APB CLK\n&lt; UART source clock default choice is APB\n&lt; UART source clock is RC_FAST\n&lt; UART source clock is XTAL\n@brief Naming conventions: RESET_REASON_{reset level}_…\n@brief Root clock\n&lt; External 40MHz crystal\n&lt; External 32kHz crystal/clock signal\n&lt; Internal 17.5MHz RC oscillator\n&lt; Internal 136kHz RC oscillator\n@brief RTC_FAST_CLK mux inputs, which are the supported …\n&lt; Invalid RTC_FAST_CLK source\n&lt; Select RC_FAST_CLK as RTC_FAST_CLK source\n&lt; Select XTAL_D2_CLK (may referred as XTAL_CLK_DIV_2) as …\n&lt; Alias name for <code>SOC_RTC_FAST_CLK_SRC_XTAL_D2</code>\n@brief RTC_SLOW_CLK mux inputs, which are the supported …\n&lt; Invalid RTC_SLOW_CLK source\n&lt; Select RC_FAST_D256_CLK (referred as FOSC_DIV or …\n&lt; Select RC_SLOW_CLK as RTC_SLOW_CLK source\n&lt; Select XTAL32K_CLK as RTC_SLOW_CLK source\n@brief Possible main XTAL frequency options on the target …\n&lt; 32MHz XTAL\n&lt; 40MHz XTAL\nsocket select function for socket FDs with the …\n&lt; Sort the connect AP in the list by rssi or security mode\n&lt; UART source clock selection\n&lt; Extra configuration for specific color conversion\n&lt; LEDC speed speed_mode, high-speed mode (only exists on …\n&lt; LEDC speed speed_mode, high-speed mode (only exists on …\n&lt; Speed mode of the LEDC channel group\n@brief Allocate a device on a SPI bus\n@brief This is a configuration structure for a SPI bus.\n@brief Free a SPI bus\n@brief Get max length (in bytes) of one transaction\n@brief Initialize a SPI bus\n@brief Remove a device from the SPI bus\n@brief Type of SPI clock source.\n@brief SPI command.\n@brief SPI DMA channels\n&lt; Enable DMA, channel is automatically selected by driver\n&lt; Do not enable DMA for SPI\n@brief Occupy the SPI bus for a device to do continuous …\n@brief Calculate working frequency for specific device\n@brief Get the result of a SPI transaction queued earlier …\n@brief This is a configuration for a SPI slave device that …\n@brief Poll until the polling transaction ends.\n@brief Immediately start a polling transaction.\n@brief Send a polling transaction, wait for it to …\n@brief Queue a SPI transaction for interrupt transaction …\n@brief Release the SPI bus occupied by the device. All …\n@brief Send a SPI transaction, wait for it to complete, …\n@brief SPI DMA channels\nSPI Events\n&lt; The buffer has received data from master.\n&lt; The buffer has sent data to master.\n&lt; Received CMD9 from master.\n&lt; Received CMDA from master.\n&lt; Slave has received certain number of data from master, …\n&lt; Slave has loaded its RX data buffer to the hardware …\n&lt; Master has received certain number of the data, the …\n&lt; Slave has loaded its TX data buffer to the hardware …\n&lt; A transaction has done\n@brief Given a memory address where flash is mapped, …\nStructure for flash encryption operations.\nHost driver configuration and context structure.\nHost driver configuration and context structure.\nSPI Flash Host driver instance\n@brief Map region of flash memory into data or instruction …\n@brief Display information about mapped regions\n@brief get free pages number which can be mmap\n@brief Opaque handle for memory region obtained from …\n@brief Enumeration which specifies memory space requested …\n&lt; map to data memory, allows byte-aligned access\n&lt; map to instruction memory, allows only 4-byte-aligned …\n@brief Map sequences of pages of flash memory into data or …\n@brief Release region previously obtained using …\n@brief Given a physical offset in flash, return the …\nConfiguration structure for the flash chip suspend feature.\nDefinition of a common transaction. Also holds the return …\n@brief Calculate the working frequency that is most close …\n@brief Get the frequency limit of current configurations. …\n@brief Calculate the timing settings of specified …\n@brief Enum with the three SPI peripherals that are …\n&lt; SPI1\n&lt; SPI2\n&lt; invalid host value\n@brief Line mode of SPI transaction phases: CMD, ADDR, …\n&lt; flash read mode (esp_image_spi_mode_t as uint8_t)\n&lt; Traditional SPI mode (0~3)\n&lt; Drive settings for the SPI flash pins (read by ROM …\n@brief Free a SPI bus claimed as a SPI slave interface\n@brief Get the result of a SPI transaction queued earlier\n@brief Initialize a SPI bus as a slave interface\n@brief This is a configuration for a SPI host acting as a …\n@brief Queue a SPI transaction for execution\nThis structure describes one SPI transaction\n@brief Do a SPI transaction\nThis struct is for SPI transactions which may change their …\nThis structure describes one SPI transaction. The …\n&lt; CS GPIO pin for this device, or -1 if not used\n&lt; CS GPIO pin for this device\n&lt; Source address of ESPNOW packet\n&lt; Source address of ESPNOW packet\n&lt; Source clock frequency, unit: Hz\n&lt; SSID of disconnected AP\n&lt; SSID of connected AP\n&lt; SSID of AP\n&lt; SSID of AP\n&lt; SSID of soft-AP. If ssid_len field is 0, this must be a …\n&lt; SSID of target AP.\n&lt; SSID of connected AP\n&lt; SSID of disconnected AP\n&lt; SSID of AP\n&lt; SSID of the AP. Null terminated string.\n&lt; SSID\n&lt; SSID of the to which connection was estalished\n&lt; SSID of the AP to which the slave is to be connected\n&lt; Broadcast SSID or not, default 0, broadcast the SSID\n&lt; SSID length of disconnected AP\n&lt; SSID length of connected AP\n&lt; Optional length of SSID field.\n&lt; SSID length of connected AP\n&lt; SSID length of disconnected AP\n&lt; length of SSID\n&lt; decoded SSR (SD Status Register) value\n&lt; Configuration of STA\n&lt; station list\n&lt; WiFi Power Management for station at disconnected status\n&lt; stack config\n&lt; stack config\n&lt; A bit mask of memory capabilities (MALLOC_CAPS*) to use …\n@brief Deliver packet to upper stack\n@brief Deliver packet to upper stack\n@brief Input frame buffer to user’s stack\n&lt; The maximum stack size allowed for the server task\n&lt; The maximum stack size allowed for the server task\n&lt; <em>MQTT</em> task stack size\nStack size of server task, adjusted depending upon stack …\n&lt; The stack size of the pthread\n&lt; Start address of the heap in which the block is located\n@brief Start Ethernet MAC\n&lt; set to true to automatically start the SNTP service\n&lt; Start address of the heap in which the block is located\nCalled before commencing any flash operation. Does not …\n@brief Start Ethernet MAC\n&lt; set to true to automatically start the SNTP service\nstart_select is called for setting up synchronous I/O …\n&lt; stat without context pointer\n&lt; stat with context pointer\nThis field can be set by the device driver and could point …\n1: up; 0: down\n1: up; 0: down\n&lt; intermediate digest state\n&lt; intermediate digest state\n&lt; Current state of TWAI controller …\n&lt; WiFi static RX buffer number\n&lt; WiFi static TX buffer number\n&lt; Status of scanning APs: 0 — success, 1 - failure\n&lt; Status of the FTM operation\n&lt; Status of the operation\n&lt; NDP status code\n&lt; disk status check function\n&lt; Store the current status of each channel\n&lt; Status Code\n&lt; Status Code\n&lt; enable to receive space time block code HT long training …\n@brief Stop Ethernet MAC\n@brief Stop Ethernet MAC\n&lt; UART stop bits\ncalled by VFS to interrupt the socket_select call when …\nstop_socket_select which can be called from ISR; set only …\n&lt; storage for FreeRTOS queue\n&lt; Stretch cause can be got in callback\n&lt; NAN Interface MAC of the Subscriber\n&lt; WS subprotocol\n&lt; The parsed subject data (named information object).\n&lt; Optional list of raw entries of Subject Alternative …\n&lt; Optional X.509 v2/v3 subject unique identifier.\n&lt; Optional X.509 v3 extension subject key identifier.\n&lt; The raw subject data (DER). Used for quick comparison.\n&lt; Subscribe Service Identifier\n&lt; Subscribe Service Identifier\n&lt; partition subtype\n@brief Check whether the SPI host supports direct read\n@brief Check whether the SPI host supports direct read\n@brief Check whether the SPI host supports direct write\n@brief Check whether the SPI host supports direct write\n&lt; SUS/SUS1/SUS2 bit in flash register.\nSuspend feature setup for setting cmd and status register …\nSuspend feature setup for setting cmd and status register …\nSet flash in suspend status manually\nSet flash in suspend status manually\n&lt; Service info shared in Publish frame\n&lt; Service info shared in Subscribe frame\n&lt; Service info(or message) to be shared\n&lt; Service Specific Info\n&lt; Service Specific Info\n&lt; Software reset timeout value (Unit: ms)\n@brief Swap/Exchange x and y axis\n&lt; root switch request\n&lt; Disassociate with current parent and switch to a new …\n&lt; Which sync as the trigger\n&lt; optionally sets callback function on time sync event\n&lt; optionally sets callback function on time sync event\n&lt; The sync event source. Set to NULL will disable the …\n&lt; The sync event source\n&lt; Time of departure of FTM frame from FTM Responder in pSec\n&lt; Time of arrival of FTM frame at FTM Initiator in pSec\n&lt; Time of departure of ACK from FTM Initiator in pSec\n&lt; Time of arrival of ACK at FTM Responder in pSec\n&lt; ASN1 type, e.g. MBEDTLS_ASN1_UTF8_STRING.\n&lt; ASN1 type, e.g. MBEDTLS_ASN1_UTF8_STRING.\n&lt; Target IP address, either IPv4 or IPv6\n&lt; FreeRTOS task configuration.\n&lt; The memory capabilities to use when allocating the HTTP …\n&lt; The memory capabilities to use when allocating the HTTP …\n!&lt; repl task affinity, i.e. which core the task is pinned …\n&lt; core to which the event loop task is pinned to, ignored …\n&lt; name of the event loop task; if NULL, a dedicated task …\n&lt; Priority of internal ping task\n&lt; Priority of FreeRTOS task which runs the server\n!&lt; repl task priority\n&lt; priority of the event loop task, ignored if task name is …\n&lt; Priority of FreeRTOS task which runs the server\n&lt; Priority of server task\n!&lt; repl task stack size\n&lt; stack size of the event loop task, ignored if task name …\n&lt; Stack size of internal ping task\n&lt; GPTimer ETM task type\n&lt; The raw certificate body (DER). The part that is To Be …\n&lt; The raw certificate body (DER). The part that is To Be …\n@brief Wait for transmission of output\n&lt; tcdrain without context pointer\n&lt; tcdrain with context pointer\n@brief Suspend or restart the transmission or reception of …\n&lt; tcflow without context pointer\n&lt; tcflow with context pointer\n@brief Flush non-transmitted output data and non-read …\n&lt; tcflush without context pointer\n&lt; tcflush with context pointer\n@brief Gets the parameters of the terminal\n&lt; tcgetattr without context pointer\n&lt; tcgetattr with context pointer\n@brief Get process group ID for session leader for …\n&lt; tcgetsid without context pointer\n&lt; tcgetsid with context pointer\n@brief Send a break for a specific duration\n&lt; tcsendbreak without context pointer\n&lt; tcsendbreak with context pointer\n@brief Sets the parameters of the terminal\n&lt; tcsetattr without context pointer\n&lt; tcsetattr with context pointer\n&lt; telldir without context pointer\n&lt; telldir with context pointer\n@brief Type of Temp Sensor clock source\n@brief Configuration of measurement range for the …\n@brief Disable temperature sensor\n@brief Enable the temperature sensor\n@brief temperature sensor event types enum\n&lt; Maximum number of temperature sensor events\n&lt; Temperature sensor over limit event\n@brief temperature sensor task types enum\n&lt; Maximum number of temperature sensor tasks\n&lt; Temperature sensor start task\n&lt; Temperature sensor stop task\n@brief Read temperature sensor data that is converted to …\n@brief Type of temperature sensor driver handle\n@brief Install temperature sensor driver\n@brief Uninstall the temperature sensor driver\n&lt; The thread name.\n&lt; When scan_threshold is set, only APs which have an auth …\n&lt; Compile time\n&lt; UART data read timeout flag for UART_DATA event (no new …\n&lt; Network timeout in milliseconds. Note: If this value is …\n&lt; TWDT timeout duration in milliseconds\n&lt; response timeout, in milliseconds\n&lt; Timeout value (in milliseconds) of each ping procedure\n&lt; Network timeout in milliseconds. Note: If this value is …\n&lt; Network timeout in milliseconds\n&lt; Abort network operation if it is not completed after …\n@brief Timer alarm command\n&lt; Disable timer alarm\n&lt; Enable timer alarm\n&lt; timer handler argument\n&lt; timer handler argument\n@brief Timer autoreload command\n&lt; Disable auto-reload: hardware will not load counter …\n&lt; Enable auto-reload: hardware will load counter value …\n@brief Timer configurations\n@brief Timer count direction\n&lt; Descending Count from cnt.high|cnt.low\n&lt; Maximum number of timer count directions\n&lt; Ascending Count from Zero\n@brief Deinitializes the timer.\n@brief Disable timer interrupt\n@brief Enable timer interrupt\n&lt; Timer event, upon which MCPWM timer will generate the …\n&lt; abstruct time when timer expire\n&lt; abstruct time when timer expire\n&lt; timer handler\n&lt; timer handler\n@brief Get timer alarm value.\n@brief Get timer configure value.\n@brief Read the counter value of hardware timer, in unit …\n@brief Read the counter value of hardware timer.\n@brief Clear timer interrupt status, just used in ISR\n@brief Enable alarm interrupt, just used in ISR\n@brief Get auto reload enable status, just used in ISR\n@brief Get the current counter value, just used in ISR\n@brief Get interrupt status, just used in ISR\n@brief Disable timer group interrupt, by disable mask\n@brief Enable timer group interrupt, by enable mask\n@brief Set the alarm threshold for the timer, just used in …\n@brief Enable/disable a counter, just used in ISR\n@brief Timer-Group ID\n&lt; Hw timer group 0\n&lt; Hw timer group 1\n&lt; Maximum number of Hw timer groups\n@brief Timer ID\n&lt; Select timer0 of GROUPx\n@brief Initializes and configure the timer.\n@brief Timer interrupt type\n&lt; Interrupt mode: level mode\n@brief Interrupt types of the timer.\n&lt; interrupt of timer 0\n&lt; interrupt of watchdog\n@brief Add ISR handle callback for the corresponding timer.\n@brief Remove ISR handle callback for the corresponding …\n@brief Interrupt handle, used in order to free the isr …\n@brief Register Timer interrupt handler, the handler is an …\n@brief Interrupt handler callback function\n&lt; timer linker\n&lt; timer linker\n&lt; The timer source of channel (0 - LEDC_TIMER_MAX-1)\n@brief Pause the counter of hardware timer.\n&lt; timer period, 0 means timer is not periodic repeated\n&lt; timer period, 0 means timer is not periodic repeated\n&lt; Select the timer source of channel (0 - LEDC_TIMER_MAX-1)\n@brief Enable or disable generation of timer alarm events.\n@brief Set timer alarm value.\n@brief Enable or disable counter reload function when …\n@brief Set counting mode for hardware timer.\n@brief Set counter value to hardware timer.\n@brief Set hardware divider of the source clock to the …\n@brief Type of Timer Group clock source, reserved for the …\n@brief Start the counter of hardware timer.\n@brief Timer start/stop command\n&lt; Pause timer counter\n&lt; Start timer counter\n&lt;  XTS tweak key\n&lt; The TLS NamedCurve identifier.\n@brief Keep alive parameters structure\n@brief Keep alive parameters structure\n&lt; TLS protocol version of the connection, e.g., TLS 1.2, …\n&lt; TLS protocol version of the connection, e.g., TLS 1.2, …\n&lt; TLS protocol version of the connection, e.g., TLS 1.2, …\nType by which software timers are referenced.  For …\n&lt; state represents whether the root is able to access …\n&lt; to external DS\n&lt; toDS state, devices shall check this state firstly …\n&lt; to self\n&lt; to child queue\n&lt; to child (P2P) queue\n&lt; to parent queue\n&lt; to parent (P2P) queue\n&lt; Token from cellphone which is used to send ACK to …\n&lt; Topic associated with this event\n&lt; LWT (Last Will and Testament) message topic\n&lt; Length of the topic for this event associated with this …\nTopic definition struct\n&lt; data type of service\n&lt; Type of Service, a field specified in the IP header\ntotal length of this buffer and all next buffers in chain …\n&lt; number of bytes processed\n&lt; number of bytes processed\n&lt;  Total bytes allocated to data in the heap.\n&lt;  Total number of (variable size) blocks in the heap.\n&lt; I2S Total number of channels. If it is smaller than the …\n&lt; I2S Total number of channels. If it is smaller than the …\n&lt; Total length of the data (longer data are supplied with …\n&lt; Total size of all the allocated DMA buffers\n&lt; Number of all entries.\n&lt;  Total free bytes in the heap. Equivalent to …\n&lt; Total number of ESPNOW peers, maximum value is …\n&lt; Total number of ESPNOW peers, maximum value is …\n&lt; I2S total number of slots. If it is smaller than the …\nTouch sensor charge/discharge speed\n&lt;Touch sensor charge / discharge speed, always zero\n&lt;Touch sensor charge / discharge speed, slowest\n&lt;Touch sensor charge / discharge speed\n&lt;Touch sensor charge / discharge speed\n&lt;Touch sensor charge / discharge speed\n&lt;Touch sensor charge / discharge speed\n&lt;Touch sensor charge / discharge speed\n&lt;Touch sensor charge / discharge speed, fast\nTouch sensor filter configuration\nTouch sensor filter configuration\n@brief Touch channel IIR filter coefficient configuration. …\n&lt;The filter mode is first-order IIR filter. The …\n&lt;The filter mode is first-order IIR filter. The …\n&lt;The filter mode is first-order IIR filter. The …\n&lt;The filter mode is first-order IIR filter. The …\n&lt;The filter mode is first-order IIR filter. The …\n&lt;The filter mode is first-order IIR filter. The …\n&lt;The filter mode is first-order IIR filter. The …\n&lt;The filter mode is jitter filter\nTouch sensor FSM mode\n&lt;To start touch FSM by software trigger\n&lt;To start touch FSM by timer\nTouch sensor high reference voltage\n&lt;Touch sensor high reference voltage, 2.4V\n&lt;Touch sensor high reference voltage, 2.5V\n&lt;Touch sensor high reference voltage, 2.6V\n&lt;Touch sensor high reference voltage, 2.7V\n&lt;Touch sensor high reference voltage, no change\nTouch sensor low reference voltage\n&lt;Touch sensor low reference voltage, 0.5V\n&lt;Touch sensor low reference voltage, 0.6V\n&lt;Touch sensor low reference voltage, 0.7V\n&lt;Touch sensor low reference voltage, 0.8V\n&lt;Touch sensor low reference voltage, no change\n&lt;Set touch channel number for sleep pad. Only one touch …\nTouch channel idle state configuration\n&lt;Idle status of touch channel is ground connection\n&lt;Idle status of touch channel is high resistance state\nTouch sensor denoise configuration\n&lt;Denoise channel internal reference capacitance is 5pf\n&lt;Denoise channel internal reference capacitance is 6.4pf\n&lt;Denoise channel internal reference capacitance is 7.8pf\n&lt;Denoise channel internal reference capacitance is 9.2pf\n&lt;Denoise channel internal reference capacitance is 10.6pf\n&lt;Denoise channel internal reference capacitance is 12.0pf\n&lt;Denoise channel internal reference capacitance is 13.4pf\n&lt;Denoise channel internal reference capacitance is 14.8pf\n&lt;Denoise range is 10bit\n&lt;Denoise range is 12bit\n&lt;Denoise range is 4bit\n&lt;Denoise range is 8bit\nTouch sensor denoise configuration\n&lt;Active for one of the enabled channels.\n&lt;Measurement done for one of the enabled channels.\n&lt;Inactive for one of the enabled channels.\n&lt;Measurement done for all the enabled channels.\n&lt;Timeout for one of the enabled channels.\nTouch sensor shield channel drive capability level\n&lt;The max equivalent capacitance in shield channel is 40pf\n&lt;The max equivalent capacitance in shield channel is 80pf\n&lt;The max equivalent capacitance in shield channel is 120pf\n&lt;The max equivalent capacitance in shield channel is 160pf\n&lt;The max equivalent capacitance in shield channel is 200pf\n&lt;The max equivalent capacitance in shield channel is 240pf\n&lt;The max equivalent capacitance in shield channel is 280pf\n&lt;The max equivalent capacitance in shield channel is 320pf\nTouch sensor channel sleep configuration\nTouch pad channel\n&lt; Touch pad channel 0 is GPIO4(ESP32)\n&lt; Touch pad channel 1 is GPIO0(ESP32) / GPIO1(ESP32-S2)\n&lt; Touch pad channel 2 is GPIO2(ESP32) / GPIO2(ESP32-S2)\n&lt; Touch pad channel 3 is GPIO15(ESP32) / GPIO3(ESP32-S2)\n&lt; Touch pad channel 4 is GPIO13(ESP32) / GPIO4(ESP32-S2)\n&lt; Touch pad channel 5 is GPIO12(ESP32) / GPIO5(ESP32-S2)\n&lt; Touch pad channel 6 is GPIO14(ESP32) / GPIO6(ESP32-S2)\n&lt; Touch pad channel 7 is GPIO27(ESP32) / GPIO7(ESP32-S2)\n&lt; Touch pad channel 8 is GPIO33(ESP32) / GPIO8(ESP32-S2)\n&lt; Touch pad channel 9 is GPIO32(ESP32) / GPIO9(ESP32-S2)\nTouch sensor waterproof configuration\nTouch sensor waterproof configuration\n@brief Level of filter applied on the original data …\n&lt;Filter the raw data. The coefficient is 2 (Typical value).\n&lt;Filter the raw data. The coefficient is 4.\n&lt;Filter the raw data. The coefficient is 8.\n&lt;No filtering of raw data.\nTouch sensor initial charge level\n&lt;Initial level of charging voltage, high level\n&lt;Initial level of charging voltage, low level\nESP32 Only\n&lt;Touch interrupt will happen if counter value is larger …\n&lt;Touch interrupt will happen if counter value is less than …\n&lt; wakeup interrupt is generated if both SET1 and SET2 are …\n&lt; wakeup interrupt is generated if SET1 is “touched”\nTouch sensor high reference voltage attenuation\n&lt;Touch sensor high reference voltage attenuation,   0V …\n&lt;Touch sensor high reference voltage attenuation, 0.5V …\n&lt;Touch sensor high reference voltage attenuation, 1.0V …\n&lt;Touch sensor high reference voltage attenuation, 1.5V …\n&lt;Touch sensor high reference voltage attenuation, no change\n&lt; I2C bus timeout period\n&lt; Max transfer speed\n&lt; Transaction data length, in bits\n&lt; Depth of internal transfer queue, increase this value …\n&lt; Depth of internal transfer queue, increase this value …\n&lt; Size of internal transaction queue\n@endcond\n&lt; transmit function pointer\n@brief Transmit packet from Ethernet MAC\n&lt; transmit function pointer\n@brief Transmit packet from Ethernet MAC\n@brief Transmit packet from Ethernet MAC constructed with …\n@brief Transmit packet from Ethernet MAC constructed with …\n&lt; transmit wrap function pointer\n&lt; transmit wrap function pointer\n&lt; Selects transport\n&lt; Custom transport handle to use. Warning: The transport …\n&lt; HTTP transport type, see <code>esp_http_client_transport_t</code>\n&lt; tree top, mesh_assoc IE\n&lt; Trigger panic when timeout occurs\n&lt; Enables triple sampling when the TWAI controller samples …\n&lt; truncate without context pointer\n&lt; truncate with context pointer\n&lt; Timing segment 1 (Number of time quanta, between 1 to 16)\n&lt; Timing segment 2 (Number of time quanta, 1 to 8)\nType by which tasks are referenced.  For example, a call …\n&lt; Time to Live,a field specified in the IP header\n@brief   Clear the receive queue\n@brief   Clear the receive queue of a given TWAI driver …\n@brief   Clear the transmit queue\n@brief Clear the transmit queue of a given TWAI driver …\n@brief TWAI clock source\n@brief   Install TWAI driver\n@brief Install TWAI driver and return a handle\n@brief   Uninstall the TWAI driver\n@brief Uninstall the TWAI driver with a given handle\n@brief   Structure for acceptance filter configuration of …\n@brief   Structure for general configuration of the TWAI …\n@brief   Get current status information of the TWAI driver\n@brief Get current status information of a given TWAI …\n@brief TWAI controller handle\n@brief   Start the bus recovery process\n@brief Start the bus recovery process with a given handle\n@brief   Structure to store a TWAI message\n@brief   TWAI Controller operating modes\n&lt; The TWAI controller will not influence the bus (No …\n&lt; Normal operating mode where TWAI controller can …\n&lt; Transmission does not require acknowledgment. Use this …\n@brief   Read TWAI driver alerts\n@brief Read TWAI driver alerts with a given handle\n@brief   Receive a TWAI message\n@brief Receive a TWAI message via a given handle\n@brief   Reconfigure which alerts are enabled\n@brief Reconfigure which alerts are enabled, with a given …\n@brief   Start the TWAI driver\n@brief Start the TWAI driver with a given handle\n@brief   TWAI driver states\n&lt; Bus-off state. The TWAI controller cannot participate in …\n&lt; Recovering state. The TWAI controller is undergoing bus …\n&lt; Running state. The TWAI controller can transmit and …\n&lt; Stopped state. The TWAI controller will not participate …\n@brief   Structure to store status information of TWAI …\n@brief   Stop the TWAI driver\n@brief Stop the TWAI driver with a given handle\n@brief   Structure for bit timing configuration of the …\n@brief   Transmit a TWAI message\n@brief Transmit a TWAI message via a given handle\n&lt; The AES context used for tweak computation.\n&lt; The AES context used for tweak computation.\n&lt; Wi-Fi antenna mode for transmission, it can be set to …\n&lt; WiFi TX buffer type\n&lt; Pointer to transmit buffer, or NULL for no MOSI phase\n&lt; Pointer to transmit buffer, or NULL for no MOSI phase\n&lt; Array of TX channels that are about to be managed by a …\n@brief Transmit LCD RGB data\n&lt; RMT TX parameter\n&lt; If SPI_TRANS_USE_TXDATA is set, data set here is sent …\n&lt; I2S auto clear tx descriptor if there is underflow …\n&lt; I2S auto clear tx descriptor if there is underflow …\n&lt; Current value of Transmit Error Counter\n&lt; Number of messages that failed transmissions\n!&lt; GPIO number for TX path, -1 means using default one\n&lt; WiFi TX HE TB QUEUE number for STA HE TB PPDU …\n&lt; Transmit GPIO number\n@brief Transmit LCD command and corresponding parameters\n&lt; Number of messages TX queue can hold (set to 0 to …\n&lt; UART TX empty interrupt threshold.\n&lt;When the configured output format is 12bit.\n&lt; ipaddress type\n@ref lwip_ip_addr_type\n&lt; Whether the interrupt is an edge or level type …\n&lt; ipaddress type\n&lt; Service type\n&lt; Service type\n&lt; Type of smartconfig(ESPTouch or AirKiss).\n&lt; ESP defined IE type, include Assoc IE, SSID IE, Ext …\n@ref lwip_ip_addr_type\n&lt; option type\n&lt; partition type (app/data)\n&lt; The SAN type, value of MBEDTLS_X509_SAN_XXX.\n&lt; Type of stored key-value pair\n&lt; I2S event type\n&lt; UART event type\n&lt; The type id.\na bit field indicating pbuf type and allocation sources …\n&lt; IP address union\n&lt; IP address union\n@brief UART AT cmd char configuration parameters Note that …\n@brief Clear UART interrupt status\n@brief UART configuration parameters for uart_param_config …\n@brief Clear UART interrupt enable bits\n@brief   UART disable pattern detect function. Designed …\n@brief Disable UART RX interrupt (RX_FULL &amp; RX_TIMEOUT …\n@brief Disable UART TX interrupt (TX_FULL &amp; TX_TIMEOUT …\n@brief Uninstall UART driver.\n@brief Install UART driver and set the UART to the default …\n@brief Set UART interrupt enable\n@brief UART enable pattern detect function. Designed for …\n@brief Enable UART RX interrupt (RX_FULL &amp; RX_TIMEOUT …\n@brief Enable UART TX interrupt (TX_FULL &amp; TX_TIMEOUT …\n@brief Event structure used in UART event queue\n@brief UART event types used in the ring buffer\n&lt; UART break event\n&lt; UART RX buffer full event\n&lt; UART data event\n&lt; UART TX data and break event\n&lt; UART event max index\n&lt; UART FIFO overflow event\n&lt; UART RX frame error event\n&lt; UART RX parity event\n&lt; UART pattern detected\n&lt; UART wakeup event\n@brief Alias of uart_flush_input. UART ring buffer flush. …\n@brief Clear input buffer, discard all the data is in the …\n@brief Get the UART baud rate configuration.\n@brief   UART get RX ring buffer cached data length\n@brief Returns collision detection flag for RS485 mode …\n@brief Get the UART hardware flow control configuration.\n@brief Get the UART parity mode configuration.\n@brief Get the frequency of a clock source for the HP UART …\n@brief Get mutex guarding select() notifications\n@brief Get the UART stop bit configuration.\n@brief   UART get TX ring buffer free space size\n@brief Get the number of RX pin signal edges for light …\n@brief Get the UART data bit configuration.\n@brief UART hardware flow control modes\n&lt; enable TX hardware flow control (cts)\n&lt; enable hardware flow control\n&lt; disable hardware flow control\n&lt; enable RX hardware flow control (rts)\n@brief Configure UART interrupts.\n@brief UART interrupt configuration parameters for …\n@brief Checks whether the driver is installed or not\n@brief UART mode selection\n&lt; mode: IRDA  UART mode\n&lt; mode: application control RS485 UART mode (used for test …\n&lt; mode: RS485 collision detection UART mode (used for test …\n&lt; mode: half duplex RS485 UART mode control by RTS pin\n&lt; mode: regular UART mode\n@brief Set UART configuration parameters.\n@brief UART parity constants\n&lt; Disable UART parity\n&lt; Enable UART even parity\n&lt; Enable UART odd parity\n@brief Return the nearest detected pattern position in …\n@brief Return the nearest detected pattern position in …\n@brief Allocate a new memory with the given length to save …\n@brief UART port number, can be UART_NUM_0 ~ (UART_NUM_MAX …\n&lt; UART port 0\n&lt; UART port 1\n&lt; UART port max\n@brief UART read bytes from UART buffer\n@brief Type of UART clock source, reserved for the legacy …\n@brief Configure behavior of UART RX timeout interrupt.\n@brief Set UART baud rate.\n@brief Manually set the UART DTR pin level.\n@brief Set hardware flow control.\n@brief Set UART line inverse mode\n@brief Configure TX signal loop back to RX module, just …\n@brief UART set communication mode\n@brief Set UART parity mode.\n@brief Assign signals of a UART peripheral to GPIO pins\n@brief Manually set the UART RTS pin level. @note  UART …\n@brief Set uart threshold value for RX fifo full @note If …\n@brief UART set threshold timeout for TOUT feature\n@brief Set notification callback function for select() …\n@brief Set UART stop bits.\n@brief Set software flow control.\n@brief Set uart threshold values for TX fifo empty\n@brief Set UART idle interval after tx FIFO is empty\n@brief Set the number of RX pin signal edges for light …\n@brief Set UART data bits.\n@brief UART signal bit map\n&lt; inverse the UART cts signal\n&lt; inverse the UART dsr signal\n&lt; inverse the UART dtr signal\n&lt; Disable UART signal inverse\n&lt; inverse the UART irda_rx signal\n&lt; inverse the UART irda_tx signal\n&lt; inverse the UART rts signal\n&lt; inverse the UART rxd signal\n&lt; inverse the UART txd signal\n@brief UART stop bits number\n&lt; stop bit: 1bit\n&lt; stop bit: 1.5bits\n&lt; stop bit: 2bits\n@brief UART software flow control configuration parameters\n@brief Send data to the UART port from a given buffer and …\n@brief Wait until UART TX FIFO is empty.\n@brief Wait until UART tx memory empty and the last char …\n@brief UART word length constants\n&lt; word length: 5bits\n&lt; word length: 6bits\n&lt; word length: 7bits\n&lt; word length: 8bits\n@brief Send data to the UART port from a given buffer and …\n@brief Send data to the UART port from a given buffer and …\n&lt; The total run time allocated to the task so far, as …\n&lt; The total run time allocated to the task so far, as …\nWaits for a direct to task notification on a particular …\nSee https://www.FreeRTOS.org/RTOS-task-notifications.html …\nconfigGENERATE_RUN_TIME_STATS, …\n&lt; ADC controlled by ULP, see <code>adc_ulp_mode_t</code>\n&lt; ADC unit\n&lt; ADC unit\n&lt; ADC unit\n&lt; unlink without context pointer\n&lt; unlink with context pointer\n&lt; The buffer for the unstructured types. rfc822Name, …\n&lt; Number of unused bits at the end of the string\n&lt; Number of unused bits at the end of the string\n&lt; Up-sampling param fp\n&lt; Up-sampling param fs, not allowed to be greater than 480\n&lt; Indicates whether publisher’s service ID needs to be …\n&lt; The URI of this request (1 byte extra for null …\n&lt; The URI to handle\n&lt; The URI of this request (1 byte extra for null …\n&lt; The URI to handle\n&lt; Complete <em>MQTT</em> broker URI\nURI matcher function.\nURI matcher function.\n&lt; HTTP URL, the information on the URL is most important, …\n&lt; The minimum amount of stack space that has remained for …\n&lt; The minimum amount of stack space that has remained for …\n@brief Configuration structure for the …\n@brief Install USB-SERIAL-JTAG driver and set the …\n@brief Uninstall USB-SERIAL-JTAG driver.\n@brief Check if the USB Serial/JTAG port is connected to …\n@brief USB_SERIAL_JTAG read bytes from USB_SERIAL_JTAG …\n@brief Send data to the USB-UART port from a given buffer …\n&lt; I2S using APLL as main I2S clock, enable it to get …\n&lt; I2S using APLL as main I2S clock, enable it to get …\n&lt; Use the ECDSA peripheral for the private key operations\n&lt; Use ECDSA peripheral to use private key\n&lt; Use the ECDSA peripheral for the private key operations\n&lt; Use ECDSA peripheral to use private key\n&lt; True - Using esp_wifi_ftm_get_report to get FTM report, …\n&lt; Use a global ca_store for all the connections in which …\n&lt; Use a global ca_store for all the connections in which …\n&lt; Use a global ca_store for all the connections in which …\n&lt; Use a global ca_store, look esp-tls documentation for …\nUse 1 FAT (File Allocation Tables) instead of 2. This …\nUse 1 FAT (File Allocation Tables) instead of 2. This …\n&lt; Enable this option to use secure element or atecc608a …\n&lt; Enable this option to use secure element or atecc608a …\n&lt; Enable this option to use secure element or atecc608a …\n&lt; Enable this option to use secure element or atecc608a …\n&lt; Enable secure element, available in ESP32-ROOM-32SE, for …\n&lt; Block status. True: used, False: free\n&lt; Block status. True: used, False: free\n&lt; whether the child is joined\n&lt; Number of used entries.\n&lt; User-defined variable. Can be used to store eg …\n&lt; User-defined variable. Can be used to store eg …\n&lt; The User Agent string to send with HTTP requests\n&lt; WS user agent\nUser context pointer passed during URI registration.\nPointer to user context data which will be available to …\nUser context pointer passed during URI registration.\nPointer to user context data which will be available to …\n&lt; User private data, passed directly to on_color_trans_done…\n&lt; User private data, passed directly to on_color_trans_done…\n&lt; user_data context, from esp_http_client_config_t …\n&lt; user_data context, from esp_http_client_config_t …\n&lt; HTTP user_data context\nUser context data to pass as parameter to callback function\n&lt; User data, used to store externally customized data\n&lt; User data to be added to the ssl context. Can be …\n&lt; User data to be added to the ssl context. Can be …\n&lt; Using for Http authentication\n&lt; <em>MQTT</em> username\n&lt; utime without context pointer\n&lt; utime with context pointer\nUUID to be assigned to the BLE characteristic which is …\nUUID to be assigned to the BLE characteristic which is …\n&lt; The priority to which the task will return if the task’…\n&lt; The priority to which the task will return if the task’…\n&lt; Current task list index being traversed.\n&lt; Current task list index being traversed.\n&lt; The priority at which the task was running (may be …\n&lt; The priority at which the task was running (may be …\nReturn the number of messages stored in a queue.\nA version of uxQueueMessagesWaiting() that can be called …\nReturn the number of free spaces available in a queue.  …\n@return The number of tasks that the real time kernel is …\n@brief Fill an array of TaskSnapshot_t structures for …\nINCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in …\nINCLUDE_uxTaskGetStackHighWaterMark2 must be set to 1 in …\nconfigUSE_TRACE_FACILITY must be defined as 1 in …\nINCLUDE_uxTaskPriorityGet must be defined as 1 for this …\nA version of uxTaskPriorityGet() that can be used from an …\nQueries a timer to determine if it is an auto-reload …\n&lt; Optional X.509 v3 extensions.\nThis function is used to provide a statically allocated …\nThis function is used to provide a statically allocated …\n@brief Hook function called on entry to tickless idle\nThe application stack overflow hook is called when a stack …\nDelete an event group that was previously created by a …\n@brief Deletes an event group previously created using …\n@cond !DOC_EXCLUDE_HEADER_SECTION\n@brief Assert if in ISR context\n@brief Clear current interrupt mask and set given mask\n@brief Re-enable interrupts in a nested manner (meant to …\n@brief Enter a critical section\n@brief Exit a critical section\n@brief Set interrupt mask and return current interrupt …\n@brief Set a watchpoint to watch the last 32 bytes of the …\n@brief TCB cleanup hook\n@brief Perform a context switch from a task\n@brief Perform a context switch from an ISR\n@brief Yields the other core\nDelete a queue - freeing all the memory allocated for …\n@brief Deletes a queue previously created using …\n@cond !DOC_EXCLUDE_HEADER_SECTION\n@brief   Delete a ring buffer\n@brief Deletes a ring buffer previously created using …\n@brief   Get information about ring buffer status\n@brief   Return a previously-retrieved item to the ring …\n@brief   Return a previously-retrieved item to the ring …\n@brief Deletes a semaphore previously created using one of …\nDeletes a stream buffer that was previously created using …\nMemory regions are assigned to a restricted task when the …\nDelay a task for a given number of ticks.  The actual time …\nINCLUDE_vTaskDelete must be defined as 1 for this function …\n@brief Deletes a task previously created using …\nNOTE:  At the time of writing only the x86 real mode port, …\nA version of xTaskNotifyGiveIndexed() that can be called …\nconfigUSE_TRACE_FACILITY must be defined as 1 for this …\nconfigGENERATE_RUN_TIME_STATS and …\n@brief Fill a TaskSnapshot_t structure for specified task.\nconfigUSE_TRACE_FACILITY and …\nINCLUDE_vTaskPrioritySet must be defined as 1 for this …\nINCLUDE_vTaskSuspend must be defined as 1 for this …\nEach task contains an array of pointers that is …\nSet local storage pointer and deletion callback.\nCapture the current time for future use with …\nStarts the real time kernel tick processing.  After …\nINCLUDE_vTaskSuspend must be defined as 1 for this …\nSuspends the scheduler without disabling interrupts.  …\nUpdates a timer to be either an auto-reload timer, in …\nSets the ID assigned to the timer.\n&lt; Vertical resolution, i.e. the number of lines in the …\n&lt; The named value.\n&lt;Raw data value\n&lt; option value\n&lt; The named value.\n&lt; The named value.\n&lt; Equivalent unsigned value for the RMT item\n&lt; Equivalent unsigned value for the RMT symbol\n&lt; 32-bit ARGB8888 value\n&lt; 16-bit RGB565 value\n&lt; Start time of certificate validity.\n&lt; End time of certificate validity.\n&lt; vendor specific configuration, optional, left as NULL if …\n@brief Vendor Information Element header\n&lt; Vendor identifier (OUI).\n&lt; Vendor-specific OUI type.\nUnique version number of security implementation\nUnique version number of security implementation\n&lt; Security verification of the broker\nPointer to the buffer containing the verifier\nPointer to the buffer containing the verifier\nPointer to the buffer containing the verifier\nLength (in bytes) of the verifier\nLength (in bytes) of the verifier\nLength (in bytes) of the verifier\n&lt; ADC Calibration\n&lt; The crypto callback function structure version\n&lt; CRL version (1=v1, 2=v2)\n&lt; The X.509 version. (1=v1, 2=v2, 3=v3)\n&lt; Application version\n&lt; Bootloader version\n&lt; This fields are used only AP bandwidth is 80 and 160 …\n&lt; This fields are used only AP bandwidth is 80 + 80 MHz, …\n&lt; max vote times in self-healing, default:1000\n&lt; the voted address after connection\n&lt; the router RSSI of the voted address\n&lt; vote started\n&lt; vote ttl, indicate the voting is from myself or from …\n&lt; the number of all voting nodes\n&lt; Vref used by lookup table\n&lt; Vertical back porch, number of invalid lines between …\n&lt; Vertical front porch, number of invalid lines between …\n&lt; Vertical sync width, in number of lines\n&lt; if true, we create a semaphore to signal time sync event\n&lt; if true, we create a semaphore to signal time sync event\n@brief Structure used to store block related data passed to\n@brief Structure used to store block related data passed to\n@brief Structure used to store heap related data passed to …\n@brief Structure used to store heap related data passed to …\n&lt; Warm up time before assuming NAN Anchor Master role\n@brief     The Rx callback function of Action Tx operations\n@brief Action Frame Tx Request\n@brief Range of active scan times per channel\n@brief Wi-Fi antenna configuration\n@brief Wi-Fi GPIOs configuration for antenna selection\n@brief Wi-Fi GPIO configuration for antenna selection\n@brief Wi-Fi antenna mode\n&lt; Enable Wi-Fi antenna 0 only\n&lt; Enable Wi-Fi antenna 1 only\n&lt; Enable Wi-Fi antenna 0 and 1, automatically select an …\n&lt; Invalid Wi-Fi enabled antenna\n@brief Wi-Fi antenna\n&lt; Wi-Fi antenna 0\n&lt; Wi-Fi antenna 1\n&lt; Invalid Wi-Fi antenna\n@brief Soft-AP configuration settings for the device\n@brief Description of a Wi-Fi AP\n@brief Wi-Fi authmode type Strength of authmodes Personal …\n&lt; Authenticate mode : DPP\n&lt; Authenticate mode : Wi-Fi EAP security\n&lt; Authenticate mode : open\n&lt; Authenticate mode : OWE\n&lt; Authenticate mode : WAPI_PSK\n&lt; Authenticate mode : WEP\n&lt; Authenticate mode : Wi-Fi EAP security\n&lt; Authenticate mode : WPA2_PSK\n&lt; Authenticate mode : WPA2_WPA3_PSK\n&lt; Authenticate mode : WPA3_ENT_SUITE_B_192_BIT\n&lt; This authentication mode will yield same result as …\n&lt; This authentication mode will yield same result as …\n&lt; Authenticate mode : WPA3_PSK\n&lt; Authenticate mode : WPA_PSK\n&lt; Authenticate mode : WPA_WPA2_PSK\nArgument structure for wifi band\n@brief Wi-Fi bandwidth type\n&lt; Bandwidth is 160 MHz\n&lt; Bandwidth is 20 MHz\n&lt; Bandwidth is 40 MHz\n&lt; Bandwidth is 80 MHz\n&lt; Bandwidth is 80 + 80 MHz\n&lt; Bandwidth is HT20\n&lt; Bandwidth is HT40\n@brief WiFi beacon monitor parameter configuration\n@brief Disable Wi-Fi and BT common module\n@brief Enable Wi-Fi and BT common module\n@brief     Callocate memory for WiFi driver\n@brief Wi-Fi cipher type\n&lt; The cipher type is AES-CMAC-128\n&lt; The cipher type is AES-GMAC-128\n&lt; The cipher type is AES-GMAC-256\n&lt; The cipher type is CCMP\n&lt; The cipher type is GCMP\n&lt; The cipher type is GCMP-256\n&lt; The cipher type is none\n&lt; The cipher type is SMS4\n&lt; The cipher type is TKIP\n&lt; The cipher type is TKIP and CCMP\n&lt; The cipher type is unknown\n&lt; The cipher type is WEP104\n&lt; The cipher type is WEP40\n@brief Configuration data for device’s AP or STA or NAN.\n@brief Wi-Fi country policy\n&lt; Country policy is auto, use the country info of AP to …\n&lt; Country policy is manual, always use the configured …\n@brief Structure describing Wi-Fi country-based regional …\n@brief The RX callback function of Channel State …\n@brief CSI data type\n@brief Wi-Fi disconnection reason codes\n&lt; 4-way handshake timeout\n&lt; 802.1X authentication failed\n&lt; Invalid AKMP\n&lt; Alternative channel occupied\n&lt; AP initiated disassociation\n&lt; AP TSF reset\n&lt; Association comeback time too long\n&lt; Association expired\n&lt; Association failed\n&lt; Deassociated due to leaving\n&lt; Association but not authenticated\n&lt; Too many associated stations\n&lt; Authentication expired\n&lt; Authentication failed\n&lt; Deauthentication due to leaving\n&lt; Bad cipher or AKM\n&lt; Beacon timeout\n&lt; Disassociated due to BSS transition\n&lt; Cipher suite rejected\n&lt; Connection failed\n&lt; Disassociated due to poor power capability\n&lt; Disassociated due to unsupported channel\n&lt; End of Block Ack (BA)\n&lt; Exceeded TXOP\n&lt; Invalid group cipher\n&lt; Group key update timeout\n&lt; Handshake timeout\n&lt; Invalid Information Element (IE)\n&lt; IE differs in 4-way handshake\n&lt; Invalid FTE\n&lt; Invalid FT action frame count\n&lt; Invalid MDE\n&lt; Invalid PMKID\n&lt; Invalid RSN IE capabilities\n&lt; MIC failure\n&lt; Missing ACKs\n&lt; Not associated\n&lt; Not authenticated\n&lt; Not authorized in this location\n&lt; Not enough bandwidth\n&lt; No AP found\n&lt; No AP found in auth mode threshold\n&lt; No AP found in RSSI threshold\n&lt; No AP found with compatible security\n&lt; No SSP roaming agreement\n&lt; Invalid pairwise cipher\n&lt; Peer initiated disassociation\n&lt; Roaming\n&lt; SA query timeout\n&lt; Service change precludes TS\n&lt; SSP requested disassociation\n&lt; Station leaving\n&lt; TDLS peer unreachable\n&lt; TDLS unspecified\n&lt; Timeout\n&lt; Transmission link establishment failed\n&lt; Unknown Block Ack (BA)\n&lt; Unspecified reason\n&lt; Unspecified QoS reason\n&lt; Unsupported RSN IE version\n@brief Argument structure for WIFI_EVENT_ACTION_TX_STATUS …\n@brief Argument structure for WIFI_EVENT_AP_PROBEREQRECVED …\n@brief Argument structure for WIFI_EVENT_AP_STACONNECTED …\n@brief Argument structure for …\n@brief Argument structure for WIFI_EVENT_AP_WPS_RG_FAILED …\n@brief Argument structure for WIFI_EVENT_AP_WPS_RG_PIN …\n@brief Argument structure for WIFI_EVENT_AP_WPS_RG_SUCCESS …\n@brief Argument structure for WIFI_EVENT_STA_BSS_RSSI_LOW …\n@brief Argument structure for WIFI_EVENT_FTM_REPORT event\n@brief Argument structure for …\n@brief Argument structure for WIFI_EVENT_NAN_RECEIVE event\n@brief Argument structure for WIFI_EVENT_NAN_REPLIED event\n@brief Argument structure for WIFI_EVENT_NAN_SVC_MATCH …\n@brief Argument structure for WIFI_EVENT_NDP_CONFIRM event\n@brief Argument structure for WIFI_EVENT_NDP_INDICATION …\n@brief Argument structure for WIFI_EVENT_NDP_TERMINATED …\n@brief Argument structure for WIFI_EVENT_STA_NEIGHBOR_REP …\n@brief Argument structure for WIFI_EVENT_ROC_DONE event\n@brief Argument structure for …\n@brief Argument structure for WIFI_EVENT_STA_CONNECTED …\n@brief Argument structure for WIFI_EVENT_STA_DISCONNECTED …\n@brief Argument structure for WIFI_EVENT_SCAN_DONE event\n@brief Argument structure for WIFI_EVENT_STA_WPS_ER_PIN …\n@brief Argument structure for …\n@brief Argument structure for WIFI_EVENT_STA_WPS_ER_FAILED …\n&lt; Max WPS fail reason\n&lt; WPS normal fail reason\n&lt; Recv deauth from AP while wps handshake\n&lt; WPS receive M2D frame\n@brief Wi-Fi event declarations\n&lt; Status indication of Action Tx operation\n&lt; Receive probe request packet in soft-AP interface\n&lt; A station connected to Soft-AP\n&lt; A station disconnected from Soft-AP\n&lt; Soft-AP start\n&lt; Soft-AP stop\n&lt; Soft-AP wps fails in registrar mode\n&lt; Soft-AP wps overlap in registrar mode\n&lt; Soft-AP wps pin code in registrar mode\n&lt; Soft-AP wps succeeds in registrar mode\n&lt; Soft-AP wps timeout in registrar mode\n&lt; bTWT setup\n&lt; bTWT teardown\n&lt; Connectionless module wake interval start\n&lt; Receive report of FTM procedure\n&lt; Wi-Fi home channel change，doesn’t occur when scanning\n&lt; iTWT probe\n&lt; iTWT setup\n&lt; iTWT suspend\n&lt; iTWT teardown\n&lt; Invalid Wi-Fi event ID\n&lt; Received a Follow-up message\n&lt; Replied to a NAN peer with Service Discovery match\n&lt; NAN Discovery has started\n&lt; NAN Discovery has stopped\n&lt; NAN Service Discovery match found\n&lt; NDP Confirm Indication\n&lt; Received NDP Request from a NAN Peer\n&lt; NAN Datapath terminated indication\n&lt; Remain-on-Channel operation complete\n&lt; Finished scanning AP\n&lt; The auth mode of AP connected by device’s station …\n&lt; Station beacon timeout\n&lt; AP’s RSSI crossed configured threshold\n&lt; Station connected to AP\n&lt; Station disconnected from AP\n&lt; Received Neighbor Report response\n&lt; Station start\n&lt; Station stop\n&lt; Station WPS fails in enrollee mode\n&lt; Station WPS overlap in enrollee mode\n&lt; Station WPS pin code in enrollee mode\n&lt; Station WPS succeeds in enrollee mode\n&lt; Station WPS timeout in enrollee mode\n&lt; TWT wakeup\n&lt; Wi-Fi ready\n@brief FTM Initiator configuration\n@brief Structure representing a report entry for Fine …\n@brief FTM operation status types\n&lt; Peer rejected FTM configuration in FTM Request\n&lt; Unknown error during FTM exchange\n&lt; Peer did not respond to FTM Requests\n&lt; FTM session did not result in any valid measurements\n&lt; FTM exchange is successful\n&lt; Peer does not support FTM\n&lt; User triggered termination\n@brief Description of a Wi-Fi AP HE Info\n@brief Configuration for STA’s HT2040 coexist management\n@brief WiFi stack configuration parameters passed to …\n@brief Wi-Fi interface type\n&lt; Soft-AP interface\n&lt; Maximum number of interfaces\n&lt; NAN interface\n&lt; Station interface\n@brief WiFi ioctl command type\n&lt; Get the configuration of STA’s HT2040 coexist …\n&lt; Set the configuration of STA’s HT2040 coexist …\n@brief Configuration for WiFi ioctl\n@brief WiFi log level\n@brief WiFi log module definition\n@brief     Update WiFi MAC time\n@brief     Allocate a chunk of memory for WiFi driver\nSets mode of operation of Wi-Fi during provisioning This …\nSets mode of operation of Wi-Fi during provisioning This …\n@brief Wi-Fi mode type\n&lt; Wi-Fi soft-AP mode\n&lt; Wi-Fi station + soft-AP mode\n&lt; Wi-Fi NAN mode\n&lt; Null mode\n&lt; Wi-Fi station mode\n@brief Disable Wi-Fi module\n@brief Enable Wi-Fi module\n@brief NAN Discovery start configuration\n@brief NAN Datapath End parameters\n@brief NAN Datapath Request parameters\n@brief NAN Datapath Response parameters\n@brief NAN Follow-up parameters\n@brief NAN Publish service configuration parameters\n@brief NAN Services types\n&lt; Send unicast Publish frame to Subscribers that match the …\n&lt; Send broadcast Publish frames in every Discovery …\n&lt; Send broadcast Subscribe frames in every DW\n&lt; Passively listens to Publish frames\n@brief NAN Subscribe service configuration parameters\n@brief Forward declaration of WiFi interface handle\n@brief     The net stack buffer free callback function\n@brief     The net stack buffer reference counter callback …\n@brief     Operation PHY mode\n&lt; PHY mode for 11a\n&lt; PHY mode for 11b\n&lt; PHY mode for 11g\n&lt; PHY mode for Bandwidth HE20\n&lt; PHY mode for Bandwidth HT20\n&lt; PHY mode for Bandwidth HT40\n&lt; PHY mode for Low Rate\n&lt; PHY mode for Bandwidth VHT20\n@brief Wi-Fi PHY rate encodings\n&lt; 11 Mbps with long preamble\n&lt; 11 Mbps with short preamble\n&lt; 12 Mbps\n&lt; 18 Mbps\n&lt; 1 Mbps with long preamble\n&lt; 24 Mbps\n&lt; 2 Mbps with long preamble\n&lt; 2 Mbps with short preamble\n&lt; 36 Mbps\n&lt; 48 Mbps\n&lt; 54 Mbps\n&lt; 5.5 Mbps with long preamble\n&lt; 5.5 Mbps with short preamble\n&lt; 6 Mbps\n&lt; 9 Mbps\n&lt; Espressif-specific Long Range mode rate, 250 Kbps\n&lt; Espressif-specific Long Range mode rate, 500 Kbps\n&lt; MCS0 with long GI\n&lt; MCS0 with short GI\n&lt; MCS1 with long GI\n&lt; MCS1 with short GI\n&lt; MCS2 with long GI\n&lt; MCS2 with short GI\n&lt; MCS3 with long GI\n&lt; MCS3 with short GI\n&lt; MCS4 with long GI\n&lt; MCS4 with short GI\n&lt; MCS5 with long GI\n&lt; MCS5 with short GI\n&lt; MCS6 with long GI\n&lt; MCS6 with short GI\n&lt; MCS7 with long GI\n&lt; MCS7 with short GI\n@brief Received packet radio metadata header, this is the …\n@brief Configuration structure for Protected Management …\n@brief The RX callback function in the promiscuous mode. …\n@brief Mask for filtering different packet types in …\n@brief Payload passed to ‘buf’ parameter of …\n@brief Promiscuous frame type\n&lt; Control frame, indicates ‘buf’ argument is …\n&lt; Data frame, indicates ‘buf’ argument is …\n&lt; Management frame, indicates ‘buf’ argument is …\n&lt; Other type, such as MIMO etc. ‘buf’ argument is …\n@brief   Events generated by manager\nEmitted when device fails to connect to the AP of which the\nEmitted when Wi-Fi AP credentials are received via …\nEmitted when device successfully connects to the AP of …\nSignals that manager has been de-initialized\nSignals that provisioning service has stopped\nEmitted when the manager is initialized\nIndicates that provisioning has started\n@brief   Handler for receiving and responding to requests …\n@brief   WiFi status data to be sent in response to …\n@brief   Internal handlers for receiving and responding to …\n@brief   Internal handlers for receiving and responding to …\n@brief   WiFi config data received by slave during …\n@brief   Type of context data passed to each get/set/apply …\n@brief   Event handler that is used by the manager while …\n@brief   Structure for specifying the manager configuration\n@brief   Runs Wi-Fi as Station with the supplied …\n@brief   Stop provisioning (if running) and release …\n@brief   Disable auto stopping of provisioning service …\n@brief   Create an additional endpoint and allocate …\n@brief   Register a handler for the previously created …\n@brief   Unregister the handler for an endpoint\n@brief   Get reason code in case of Wi-Fi station …\n@brief   Get state of Wi-Fi Station during provisioning\n@brief   Initialize provisioning manager instance\n@brief   Checks if device is provisioned\n@brief   Checks whether the provisioning state machine is …\n@brief   Reset Wi-Fi provisioning config\n@brief   Reset internal state machine and clear …\n@brief   Reset internal state machine and clear …\n@brief   Set application version and capabilities in the …\n@brief   Start provisioning service\n@brief   Stop provisioning service\n@brief   Wait for provisioning service to finish\n@brief   Structure for specifying the provisioning scheme …\n@brief   Scheme that can be used by manager for …\n@brief   Set manufacturer specific data in scan response\n@brief   Set Bluetooth Random address\n@brief   Set the 128 bit GATT service UUID used for …\n@brief   Scheme that can be used by manager for …\n@brief Provide HTTPD Server handle externally.\n@brief   Structure for specifying the provisioning scheme …\n@brief   Security modes supported by the Provisioning …\n@brief  Security 1 params structure This needs to be …\n@brief  Security 2 params structure This needs to be …\nNo security (plain-text communication)\nThis secure communication mode consists of X25519 key …\nThis secure communication mode consists of SRP6a based …\n@brief   Security modes supported by the Provisioning …\n@brief   WiFi STA connected status information\n@brief   WiFi STA connection fail reason\n@brief   WiFi STA status for conveying back to the …\n@brief Wi-Fi power save type\n&lt; Maximum modem power saving. In this mode, interval to …\n&lt; Minimum modem power saving. In this mode, station wakes …\n&lt; No power save\n@brief     Reallocate a chunk of memory for WiFi driver\n@brief     The WiFi RX callback function\n@brief Configuration for SAE-PK\n@brief Configuration for SAE PWE derivation\n@brief Channel bitmap for setting specific channels to be …\n@brief Parameters for an SSID scan\n@brief Parameters default scan configurations\n@brief Wi-Fi scan method\n&lt; All channel scan, scan will end after scan all the …\n&lt; Do fast scan, scan will end after find SSID match AP\n@brief Structure describing parameters for a Wi-Fi fast …\n@brief Aggregate of active &amp; passive scan time per channel\n@brief Wi-Fi scan type\n&lt; Active scan\n&lt; Passive scan\n@brief Wi-Fi second channel type\n&lt; The channel width is HT40 and the secondary channel is …\n&lt; The channel width is HT40 and the secondary channel is …\n&lt; The channel width is HT20\n@brief Wi-Fi sort AP method\n&lt; Sort match AP in scan list by security mode\n&lt; Sort match AP in scan list by RSSI\n@brief STA configuration settings for the device\n@brief Description of STA associated with AP\n@brief List of stations associated with the Soft-AP\n&lt; WiFi state of the station\n@brief Wi-Fi storage type\n&lt; All configuration will store in both memory and flash\n&lt; All configuration will only store in the memory\n&lt; WiFi Task Core ID\n@brief    TxDone callback function type. Should be …\n@brief     Vendor Information Element index\n&lt; Vendor ID element 0\n&lt; Vendor ID element 1\n@brief     Vendor Information Element type\n&lt; Association request frame\n&lt; Association response frame\n&lt; Beacon frame\n&lt; Probe request frame\n&lt; Probe response frame\n@brief Erase part of the WL storage\n@brief wear levelling handle\n@brief Mount WL for defined partition\n@brief Read data from the WL storage\n@brief Get sector size of the WL instance\n@brief Get the actual flash size in use for the WL storage …\n@brief Unmount WL for defined partition\n@brief Write data to the WL storage\n@brief   LWIP’s network stack init function for WiFi (AP)\n@brief   LWIP’s network stack init function for WiFi …\n@brief   LWIP’s network stack init function for WiFi …\n@brief   LWIP’s network stack input packet function for …\n&lt; WP pin when SPI pins set via efuse (read by ROM …\n&lt; WiFi station crypto functions when connect\n@brief The crypto callback function structure used by …\n@brief Structure representing WPS factory information for …\n@brief WPS fail reason\n&lt; WPS failed during auth\n&lt; WPS failed due to incorrect config\n&lt; Max WPS fail reason\n&lt; WPS normal fail reason\n@brief Enumeration of WPS (Wi-Fi Protected Setup) types.\n&lt; The type of WPS to be used (PBC or PIN).\n&lt; WPS is disabled\n&lt; Maximum value for WPS type enumeration\n&lt; WPS Push Button Configuration method\n&lt; WPS PIN (Personal Identification Number) method\n@brief Enumeration of WPS (Wi-Fi Protected Setup) types.\n@brief Custom driver SPI write\n&lt; Write without context pointer\n&lt; sector write function\nSlicer for write data. The <code>program_page</code> should be called …\nSlicer for write data. The <code>program_page</code> should be called …\n&lt; Write with context pointer\n@brief Write PHY register\n@brief Write PHY register\n@brief Write PHY register\n&lt; WS pin, input in slave role, output in master role\n&lt; WS pin, input in slave role, output in master role\n&lt; WS pin, input in slave role, output in master role\n&lt; HTTP path to update protocol to websocket\n&lt; WS signal polarity, set true to enable high lever first\n&lt; WS signal polarity, set true to enable high lever first\n&lt; not a valid opcode to indicate no message previously …\n&lt; WS signal width (i.e. the number of BCLK ticks that WS …\n&lt; WS signal width (i.e. the number of BCLK ticks that WS …\n@cond\n@cond\nClear bits within an event group.  This function cannot be …\n@brief Creates an event group with specific memory …\nA version of xEventGroupGetBits() that can be called from …\nSet bits within an event group. This function cannot be …\nAtomically set bits within an event group, then wait for a …\n[Potentially] block to wait for one or more bits to be set …\n&lt; The handle of the task to which the rest of the …\n&lt; The handle of the task to which the rest of the …\n@brief Checks if a given piece of memory can be used to …\n@brief Checks if a given piece of memory can be used to …\n@brief Get the tick rate per second\n@brief Checks if the current core is in an ISR context\n@brief Check if in ISR context from High priority ISRs\n@brief Disable interrupts in a nested manner (meant to be …\n@brief Checks if a given piece of memory can be used to …\nAdds a queue or semaphore to a queue set that was …\n@cond !DOC_EXCLUDE_HEADER_SECTION\nQueue sets provide a mechanism to allow a task to block …\n@brief Creates a queue with specific memory capabilities\nIt is preferred that the macros xQueueSend(), …\nIt is preferred that the macros xQueueSendFromISR(), …\nQueries a queue to determine if the queue is empty. This …\nQueries a queue to determine if the queue is full. This …\nReceive an item from a queue without removing the item …\nA version of xQueuePeek() that can be called from an …\nReceive an item from a queue.  The item is received by …\nReceive an item from a queue.  It is safe to use this …\nRemoves a queue or semaphore from a queue set.  A queue or …\nxQueueSelectFromSet() selects from the members of a queue …\nA version of xQueueSelectFromSet() that can be used from …\n@brief   Add the ring buffer to a queue set. Notified when …\n@brief       Create a ring buffer\n@brief Create a ring buffer of type RINGBUF_TYPE_NOSPLIT …\n@brief       Create a ring buffer but manually provide the …\n@brief Creates a ring buffer with specific memory …\n@brief   Get current free size available for an item/data …\n@brief   Get maximum size of an item that can be placed in …\n@brief Retrieve the pointers to a statically created ring …\n@brief   Debugging function to print the internal pointers …\n@brief   Retrieve an item from the ring buffer\n@brief   Retrieve an item from the ring buffer in an ISR\n@brief   Retrieve a split item from an allow-split ring …\n@brief   Retrieve a split item from an allow-split ring …\n@brief   Retrieve bytes from a byte buffer, specifying the …\n@brief   Retrieve bytes from a byte buffer, specifying the …\n@brief   Remove the ring buffer from a queue set\n@brief       Insert an item into the ring buffer\n@brief Acquire memory from the ring buffer to be written …\n@brief       Actually send an item into the ring buffer …\n@brief       Insert an item into the ring buffer in an ISR\n@brief Struct that is equivalent in size to the ring buffer…\n@cond\nQueries a stream buffer to see how much data it contains, …\n@cond !DOC_EXCLUDE_HEADER_SECTION\n@cond\nQueries a stream buffer to see if it is empty.  A stream …\nQueries a stream buffer to see if it is full.  A stream …\nReceives bytes from a stream buffer.\nFor advanced users only.\nAn interrupt safe version of the API function that …\nResets a stream buffer to its initial, empty, state.  Any …\nSends bytes to a stream buffer.  The bytes are copied into …\nFor advanced users only.\nInterrupt safe version of the API function that sends a …\nA stream buffer’s trigger level is the number of bytes …\nQueries a stream buffer to see how much free space it …\n@brief Task Snapshot structure\nUsed with the uxTaskGetSystemState() function to return …\n@cond !DOC_EXCLUDE_HEADER_SECTION\nINCLUDE_xTaskAbortDelay must be defined as 1 in …\nCalls the hook function associated with xTask.  Passing …\nThis function corrects the tick count value after the …\nDetermines if pxTicksToWait ticks has passed since a time …\n@brief Create a new task that is pinned to a particular …\n@brief Creates a pinned task where its stack has specific …\n@brief Create a new static task that is pinned to a …\nINCLUDE_xTaskDelayUntil must be defined as 1 for this …\nSee https://www.FreeRTOS.org/RTOS-task-notifications.html …\nSee https://www.FreeRTOS.org/RTOS-task-notifications.html …\nSee https://www.FreeRTOS.org/RTOS-task-notifications.html …\nWaits for a direct to task notification to be pending at a …\n@brief Get the current core ID of a particular task\n@brief Get the handle of the task currently running on a …\nNOTE:  This function takes a relatively long time to …\nxTaskGetIdleTaskHandle() is only available if …\n@brief Get the handle of idle task for the given core.\n@brief Get the next task using the task iterator.\n@return The count of ticks since vTaskStartScheduler was …\n@return The count of ticks since vTaskStartScheduler was …\n@cond !DOC_EXCLUDE_HEADER_SECTION\n&lt; A number unique to the task.\n&lt; A number unique to the task.\nResumes scheduler activity after it was suspended by a …\nINCLUDE_xTaskResumeFromISR must be defined as 1 for this …\n@cond !DOC_EXCLUDE_HEADER_SECTION\nReturns the time in ticks at which the timer will expire.  …\nReturns the period of a timer.\nQueries a timer to determine if it is an auto-reload …\nSimply returns the handle of the timer service/daemon …\nQueries a timer to see if it is active or dormant.\nUsed to defer the execution of a function to the RTOS …\nUsed from application interrupt service routines to defer …\n&lt; Xoff flow control char\n&lt; If the software flow control is enabled and the data …\n&lt; Xon flow control char\n&lt; If the software flow control is enabled and the data …\n&lt; Date.\nYield to other tasks. Called during erase operations.\n&lt; YUV specific\n&lt; YUV422 specific\n&lt; zone ID\n&lt; zone ID\nBuild time in the local timescale.\nBuild time in UTC.\nCamel case, eg: <code>fooBarBaz</code>. The first character is always …\nThe casing style of a string.\nKebab case, eg: <code>foo-bar-baz</code>. Also turns the string …\nLowercase\nWrapper for many std types, which implements the …\nPascal case, eg: <code>FooBarBaz</code>. The first character is always …\nSnake case, eg: <code>foo_bar_baz</code>. Also turns the string …\nThe return value of <code>str_splice</code>\nUppercase\nKebab case, eg: <code>FOO-BAR-BAZ</code>. Also turns the string …\nSnake case, eg: <code>FOO_BAR_BAZ</code>. Also turns the string …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how much space is necessary to write the wrapped …\nComputes how much space is necessary to write …\nConcatenates constants of primitive types into a …\nFormats constants of primitive types into a <code>&amp;&#39;static str</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the casing style of a <code>&amp;&#39;static str</code> constant, …\nA string that had <code>removed</code> replaced with some other string.\nThe part of the string that was removed.\nFor constructing from a reference to an array.\nIndexes a <code>&amp;&#39;static str</code> constant, returning <code>None</code> when the …\nIndexes a <code>&amp;&#39;static str</code> constant.\nCreates a <code>&amp;&#39;static str</code> by repeating a <code>&amp;&#39;static str</code> …\nReplaces all the instances of <code>$pattern</code> in <code>$input</code> (a …\nReplaces a substring in a <code>&amp;&#39;static str</code> constant. Returns …\nAlternative version of <code>str_splice</code> which only returns the …\nReturns the absolute value of this integer, as the …\nReturns the absolute value of this integer, as the …\nReturns the absolute value of this integer, as the …\nReturns the absolute value of this integer, as the …\nReturns the absolute value of this integer, as the …\nReturns the absolute value of this integer, as the …\nReturns the absolute value of this integer, as the …\nReturns the absolute value of this integer.\nReturns the absolute value of this integer, as the …\nReturns the absolute value of this integer, as the …\nReturns the absolute value of this integer, as the …\nReturns the absolute value of this integer, as the …\nExecutes the supplied future on the current thread, thus …\nCreates a FreeRTOS task.\nDeletes a FreeRTOS task.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>CriticalSection</code> instance\nSafety\nSafety\nExample\nYield from the current task once, allowing other tasks to …\nSingle-slot lock-free signaling primitive supporting …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Notification</code>.\nMarks the supplied bits in this <code>Notification</code> as notified. …\nMarks the least significant bit (bit 0) in this …\nA utility to help in implementing a custom <code>wait</code> logic: …\nNon-blocking method to check whether this notification has …\nClears the state of this notification by removing any …\nFuture that completes when this <code>Notification</code> has been …\nA mutex that allows borrowing data across executors but …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>EspRawMutex</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nSafety\nThin wrapper on top of the FreeRTOS queue.\nRetrieves the underlying FreeRTOS handle.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAllocate a new queue on the heap.\nCreate a new queue which is not deleted on <code>Drop</code>, but owned …\nCopy the first message from the queue without removing it.\nReceive a message from the queue and remove it.\nCopy item to back of queue, blocking for <code>timeout</code> ticks if …\nCopy item to front of queue, blocking for <code>timeout</code> ticks if …\nFlags to indicate the capabilities of the various memo\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRust translation of <code>temperature_sensor_clk_src_t</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nRust wrapper for <code>temperature_sensor_config_t</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the configured alarm value\nEnable or disable counter reload function when alarm event …\nTimer configuration\nReturns the current counter value of the timer\nDelays for <code>counter</code> ticks\nEnable or disable the timer.\nEnable or disable the alarm.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nSafety\nResets the internal wait notification\nSet the alarm value of the timer.\nManually set the current counter value of the timer.\nSubscribes the provided callback for ISR notifications. As …\nSubscribes the provided callback for ISR notifications. As …\nReturns the tick rate of the timer.\nWait for an alarm interrupt to occur\nEnable or disable counter reload function when alarm event …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents DATA event with timeout_flag set\nUART data was received and/or a timeout was triggered\nSerial abstraction\nSerial receiver\nSerial transmitter\nReturns the current baudrate\nReturns the current baudrate\nReturns the current baudrate\nChange the baudrate.\nChange the baudrate.\nChange the baudrate.\nChange the number of data bits\nChange the number of data bits\nChange the number of data bits\nChange the type of parity checking\nChange the type of parity checking\nChange the type of parity checking\nChange the number of stop bits\nChange the number of stop bits\nChange the number of stop bits\nClears the receive buffer.\nUART configuration\nGet count of remaining bytes in the receive ring buffer\nGet count of remaining capacity in the transmit ring buffer\nReturn the current number of data bits\nReturn the current number of data bits\nReturn the current number of data bits\nConfigures the interrupts the driver should enable.\nRetrieves the event queue for this UART. Returns <code>None</code> if …\nRetrieves the event queue for this UART. Returns <code>None</code> if …\nRetrieves the event queue for this UART. Returns <code>None</code> if …\nClears the receive buffer.\nWaits until the transmission is complete.\nClears the receive buffer.\nWaits for the transmission to complete.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSplit the serial driver in separate TX and RX drivers.\nConfigures the flags to use for interrupt allocation, e.g. …\nCreate a new serial driver\nCreate a new serial receiver\nCreate a new serial transmitter\nSafety\nSafety\nReturns the current type of parity checking\nReturns the current type of parity checking\nReturns the current type of parity checking\nNumber of events that should fit into the event queue. …\nRead multiple bytes into a slice\nRead multiple bytes into a slice; block until specified …\nGet count of remaining bytes in the receive ring buffer\nGet count of remaining capacity in the transmit ring buffer\nThe size of the software rx buffer. Must be bigger than …\nSplit the serial driver in separate TX and RX drivers\nSplit the serial driver in separate TX and RX drivers\nReturns the current number of stop bits\nReturns the current number of stop bits\nReturns the current number of stop bits\nThe size of the software tx buffer. Must be bigger than …\nWaits until the transmission is complete or until the …\nWaits until the transmission is complete or until the …\nWrite multiple bytes from a slice\nWrite multiple bytes from a slice\nWrite multiple bytes from a slice directly to the TX FIFO …\nWrite multiple bytes from a slice directly to the TX FIFO …\nThe number of bytes received\nWhether a timeout has occurred. It is possible that bytes …\nUART source clock from <code>APB</code>\nUART configuration\nUART source clock from <code>XTAL</code>\nNumber of data bits\nConfigures the interrupts the UART driver should enable in …\nFlow control\nMode\nParity check\nhalf duplex RS485 UART mode control by RTS pin\nUART source clock from <code>RTC</code>\n1 stop bit\n1.5 stop bits\n2 stop bits\nUART source clock\nNumber of stop bits\nregular UART mode\nConfigures the interrupts the driver should enable.\nOther interrupts to enable\nThis setting only has effect if flow control is enabled. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfigures the flags to use for interrupt allocation, e.g. …\nNumber of events that should fit into the event queue. …\nIf <code>Some(number_of_words)</code>, an interrupt will trigger after …\nSets the threshold at which an interrupt will be generated …\nThe size of the software rx buffer. Must be bigger than …\nSets the threshold <strong>below</strong> which an interrupt will be …\nThe size of the software tx buffer. Must be bigger than …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUSB D- GPIO pin\nUSB D+ GPIO pin\nA type alias for the USB Serial driver configuration\nUSB-SERIAL driver\nUSB Serial driver configuration\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the USB Serial is connected\nCreate a new USB Serial driver\nSafety\nRead bytes into a slice\nWrite bytes from a slice\nUSB Serial driver configuration\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new configuration with default values\nSet the receive buffer size\nSet the transmit buffer size")