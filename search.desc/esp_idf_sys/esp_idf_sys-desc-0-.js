searchState.loadedDescShard("esp_idf_sys", 0, "Raw Rust bindings for the ESP-IDF SDK.\n&lt; For Short Weierstrass: \\p A in the equation. Note that …\n&lt; For Short Weierstrass: \\p B in the equation. For …\n@brief Opaque directory structure\n&lt; Chip did not respond to the command, or timed out.\n&lt; The chip doesn’t have enough space for the current …\n@addtogroup ets_timer_apis @{\n@addtogroup ets_apis @{\n&lt; return failed in ets\n&lt; return successful in ets\nA wrapped <code>esp_err_t</code> to check if an error occurred.\nType by which event groups are referenced.  For example, a …\n&lt; The generator of the subgroup used.\n&lt; Initial hash value\n&lt; Initial hash value\n&lt; Precalculated HTable high.\n&lt; Precalculated HTable high.\n&lt; Precalculated HTable low.\n&lt; Precalculated HTable low.\nEnum for the HTTP status codes.\nKey length, in bits (including parity), for DES keys. …\nKey length in bits, including parity, for DES in two-key …\nKey length in bits, including parity, for DES in three-key …\nUndefined key length.\n@brief Type defined for MD5 context\nType by which message buffers are referenced.  For …\n&lt; The order of \\p G.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\n&lt; The prime modulus of the base field.\nDefines the prototype to which functions used with the …\nType by which queues are referenced.  For example, a call …\nType by which queue sets are referenced.  For example, a …\nQueue sets can contain both queues and semaphores, so the …\nType by which ring buffers are referenced. For example, a …\nAllow-split buffers will split an item into two parts if …\nByte buffers store data as a sequence of bytes and do not …\nByte buffers store data as a sequence of bytes and do not …\nNo-split buffers will only store an item in contiguous …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\n@brief Struct that is equivalent in size to the ring buffer…\nType used as a stream buffer’s optional callback.\nType by which stream buffers are referenced.  For example, …\nDefines the prototype to which the application task hook …\n@brief Task Snapshot iterator\n@brief Task Snapshot iterator\n@brief Task Snapshot structure\nUsed with the uxTaskGetSystemState() function to return …\n@cond !DOC_EXCLUDE_HEADER_SECTION\nDefines the prototype to which timer callback functions …\nPrototype of local storage pointer deletion callback.\n@cond\n@brief IP address\n&lt; The additional data.\n&lt; The additional data.\n&lt; The total length of the additional data.\n&lt; The total length of the additional data.\n&lt; True - Accept incoming NDP, False - Reject it\n&lt; 32-bit acceptance code\n&lt; 32-bit acceptance mask\n&lt; access without context pointer\n&lt; access with context pointer\n&lt; Action to take by the ETM task module\n&lt; Generator action should perform\n&lt; Generator action should perform\n&lt; Generator action should perform\n&lt; Generator action should perform\n&lt; Generator action should perform\n&lt; Array of actions to take by the ETM task module on the …\n&lt; Active scan time per channel, units: millisecond.\n&lt; Channel list of ADC1 to be initialized.\n&lt; Channel list of ADC1 to be initialized.\n&lt; ADC1 channel 0 is GPIO0\n&lt; ADC1 channel 1 is GPIO1\n&lt; ADC1 channel 2 is GPIO2\n&lt; ADC1 channel 3 is GPIO3\n&lt; ADC1 channel 4 is GPIO4\n@brief Set the attenuation of a particular channel on …\n@brief Configure ADC1 capture width, meanwhile enable …\n@brief Take an ADC1 reading from a single channel. @note …\n@brief Get the GPIO number of a specific ADC1 channel.\n&lt; Channel list of ADC2 to be initialized.\n&lt; Channel list of ADC2 to be initialized.\n&lt; ADC2 channel 0 is GPIO5\n@brief Configure the ADC2 channel, including setting …\n@brief Take an ADC2 reading on a single channel\n@brief Get the GPIO number of a specific ADC2 channel.\n@brief ADC attenuation parameter. Different parameters …\n&lt;No input attenuation, ADC can measure up to approx.\n&lt;This is deprecated, it behaves the same as <code>ADC_ATTEN_DB_12</code>\n&lt;The input voltage of ADC will be attenuated extending the …\n&lt;The input voltage of ADC will be attenuated extending the …\n&lt;The input voltage of ADC will be attenuated extending the …\n@brief ADC resolution setting option. @note  Only used in …\n&lt; ADC capture width is 12Bit.\n&lt; ADC output width is 10Bit\n&lt; ADC output width is 11Bit\n&lt; ADC output width is 12Bit\n&lt; ADC output width is 13Bit\n&lt; ADC output width is 9Bit\n&lt; Default ADC output bits, max supported width will be …\n@brief Check the supported ADC calibration scheme\n@brief Create a Curve Fitting calibration scheme\n@brief Delete the Curve Fitting calibration scheme handle\n@brief ADC calibration handle\n@brief Convert ADC raw data to calibrated voltage\n@brief ADC calibration scheme\n&lt; Curve fitting scheme\n&lt; Line fitting scheme\n@brief ADC channels\n&lt; ADC channel\n&lt; ADC channel\n&lt; ADC channel\n&lt; ADC channel\n&lt; ADC channel\n&lt; ADC channel\n&lt; ADC channel\n&lt; ADC channel\n&lt; ADC channel\n&lt; ADC channel\n@brief Prototype of ADC continuous mode event callback\n@brief Get GPIO number from the given ADC channel\n@brief ADC digital controller clock source @brief ADC …\n@brief Set ADC continuous mode required configurations\n@brief ADC continuous mode driver configurations\n@brief Deinitialize the ADC continuous driver.\n@brief Group of ADC continuous mode callbacks\n@brief Event data structure @note The <code>conv_frame_buffer</code> is …\n@brief Flush the driver internal pool\n@brief ADC continuous mode driver initial configurations\n@brief Type of adc continuous mode driver handle\n@brief Get ADC channel from the given GPIO number\n@brief Initialize ADC continuous driver and get a handle …\n@brief Read bytes from ADC under continuous mode.\n@brief Register callbacks\n@brief Start the ADC under continuous mode. After this, …\n@brief Stop the ADC. After this, the hardware stops …\n@brief ADC digital controller settings\n@brief Setting the digital controller.\n@brief ADC digital controller (DMA mode) work mode.\n&lt; Use both ADC1 and ADC2 for conversion by turn. e.g. ADC1 …\n&lt; Use Both ADC1 and ADC2 for conversion simultaneously\n&lt; Only use ADC1 for conversion\n&lt; Only use ADC2 for conversion\n@brief Deinitialize the Digital ADC.\n@brief IIR Filter Coefficient\n&lt; The filter coefficient is 16\n&lt; The filter coefficient is 2\n&lt; The filter coefficient is 4\n&lt; The filter coefficient is 64\n&lt; The filter coefficient is 8\n@brief ADC IIR Filter ID\n&lt; Filter 0\n&lt; Filter 1\n@brief ADC DMA driver configuration\n@brief ADC DMA driver configuration\n@brief Initialize the Digital ADC.\n@brief ADC digital controller (DMA mode) output data …\n@brief ADC digital controller (DMA mode) output data …\n&lt; See <code>adc_digi_output_data_t.type1</code>\n&lt; See <code>adc_digi_output_data_t.type2</code>\n@brief ADC digital controller pattern configuration\n@brief Read bytes from Digital ADC through DMA.\n@brief Start the Digital ADC and DMA peripherals. After …\n@brief Stop the Digital ADC and DMA peripherals. After …\n@brief ADC monitor (continuous mode) ID\n&lt; The monitor index 0.\n&lt; The monitor index 1.\n@brief Monitor config/event mode type\n&lt; ADC raw_result &gt; threshold value, monitor interrupt will …\n&lt; ADC raw_result &lt; threshold value, monitor interrupt will …\n&lt; ADC unit\n@brief ADC channel configurations\n@brief Get GPIO number from the given ADC channel\n@brief ADC digital controller clock source @brief ADC …\n@brief Set ADC oneshot mode required configurations\n@brief Delete the ADC unit handle\n@brief Convenience function to get ADC calibrated result\n@brief Get ADC channel from the given GPIO number\n@brief Create a handle to a specific ADC unit\n@brief Get one ADC conversion raw result\n@brief Type of ADC unit handle for oneshot mode\n@brief ADC oneshot driver initial configurations\n&lt; List of configs for each ADC channel that will be used\n&lt; List of configs for each ADC channel that will be used\n&lt; ADC ULP mode is disabled\n&lt; ADC is controlled by ULP FSM\n&lt; ADC is controlled by ULP RISCV\n@brief ADC unit\n&lt; SAR ADC 1\n&lt; SAR ADC 2\n@brief Output ADC1 or ADC2’s reference voltage to …\n&lt; IPv4 address\n&lt; IPv6 address\n&lt; mac address\n&lt; IPv6 address\n&lt; IPv4 address\n&lt; The address to be added to the interface\n&lt; mac address\n&lt; other powerful root address\n&lt; Address data, of which the length is set in the …\n&lt; I2C 10bit address mode enable for slave mode\n&lt; I2C slave address in bit length\n&lt; The address family to use when connecting to a host.\n&lt; The address family to use when connecting to a host.\nIndex of changed IPv6 address\nIndex of affected IPv6 address\n&lt; The line width of address phase, e.g. 1-line-addr-phase.\n&lt; Address to perform operation on\n&lt; starting address of the partition in flash\nAffected IPv6 address\n&lt; Broker address configuration\n&lt; Length of address in bits, set to 0 if command does not …\n&lt; Default amount of bits in address phase (0-64), used …\n&lt; The address length in this transaction, in bits.\n@brief Advertise pause function supported by MAC layer\n@brief Advertise pause function supported by MAC layer\n&lt; The AES 128 decrypt callback function used by esp_wifi\n&lt; Callback function used in mesh vendor IE decryption\n&lt; The AES 128 encrypt callback function used by esp_wifi\n&lt; Callback function used in mesh vendor IE encryption\n&lt; Decrypt one AES block callback function\n&lt; Deinitialize AES decryption callback function\n&lt; Initialize AES callback function for decryption\n&lt; Encrypt one AES block callback function\n&lt; Deinitialize AES encryption callback function\n&lt; Initialize AES callback function for encryption\n&lt; One-Key GMAC hash callback function with AES for MIC …\n&lt; The AES unwrap callback function used by esp_wifi\n&lt; The AES wrap callback function used by esp_wifi\n&lt; AID assigned by the Soft-AP to the connected station\n&lt; AID that the Soft-AP assigned to the disconnected station\n&lt; Authentication id assigned by the connected AP\n&lt; Authentication id assigned by the connected AP\n&lt; AID assigned by the Soft-AP to the connected station\n&lt; AID that the Soft-AP assigned to the disconnected station\n&lt; Alarm target count value\n&lt; Timer alarm enable\n&lt; Current alarm value\n&lt; Bit field of alerts to enable (see documentation)\n&lt;  Number of (variable size) blocks allocated in the heap.\nIf format_if_mount_failed is set, and mount fails, format …\nIf format_if_mount_failed is set, and mount fails, format …\n&lt; if this value is set, when “fail” (mesh_attempts_t) …\n&lt; if the BSSID is specified and this value is also set, …\n&lt; Elliptic curves for ECDSA\n&lt; MDs for signatures\n&lt; PK algs for public keys; this applies to all certificates\n&lt; Application protocols required for HTTP2. If HTTP2/ALPN …\n&lt; Application protocols required for HTTP2. If HTTP2/ALPN …\n&lt; Application protocols required for HTTP2. If HTTP2/ALPN …\n&lt; Application protocols required for HTTP2. If HTTP2/ALPN …\n&lt; NULL-terminated list of supported application protocols …\n&lt; WiFi AMPDU RX feature enable flag\n&lt; WiFi AMPDU TX feature enable flag\n&lt; WiFi AMSDU TX feature enable flag\n&lt; Antenna used to receive beacon from AP\n&lt; Configuration of AP\n&lt; All AP credentials received from WPS handshake\n&lt; Number of AP credentials received\n&lt; sha256 of elf file\n@cond\nEvent handler that can be set for the purpose of …\nHandler function for applying the configuration that was …\nHandler function for applying the configuration that was …\n&lt; Number of instances arbitration was lost\n!&lt; Argument to pass to callback\n&lt; SD/MMC command argument\n&lt; Optional argument passed to function\n&lt; Opaque user-supplied argument for callback\ndeprecated functions, for back-compatibility only\nother functions\narg_xxx constructor functions\nArray or structure of pointers to arg_xxx structures, may …\n&lt; Size of the <code>tx_channel_array</code>\n&lt; current connections of this mesh AP\n&lt; the maximum connections of this mesh AP\n&lt; max vote attempts before stopped\n&lt; max vote attempts before a new root is elected …\n&lt; Attenuation of this ADC channel\n&lt; ADC attenuation\n&lt; ADC attenuation\n&lt; ADC attenuation\n&lt; HTTP authorization header\n&lt; Authorization mode of the AP\n&lt; Http authentication type, see <code>esp_http_client_auth_type_t</code>\n&lt; Client authentication\n&lt; Authentication mode used by AP\n&lt; Auth mode of AP\n&lt; The weakest auth mode to accept in the fast scan mode …\n&lt; Auth mode of soft-AP. Do not support AUTH_WEP, …\n&lt; Authentication mode used by AP\n&lt; Optional X.509 v3 extension authority key identifier.\n&lt; Alias of <code>auto_clear_after_cb</code>\n&lt; Set to auto clear DMA TX buffer after <code>on_sent</code> callback, …\n&lt; Set to auto clear DMA TX buffer before <code>on_sent</code> callback, …\n&lt; Timer auto-reload\n@brief Configure auto negotiation\n@brief Configure auto negotiation\n&lt; Auto-negotiation timeout value (Unit: ms)\n&lt; Internally used members\n&lt; Internally used members\n&lt; Number of entries available for data storage.\n&lt; B component [0, 255]\n&lt; Number of backlog connections\n&lt; Number of backlog connections\n&lt; RSSI threshold for connecting to the root\n&lt; For AP 20 MHz this value is set to 1. For AP 40 MHz this …\n&lt; base config\n&lt; base config\n&lt; Transaction data, so that pointer to spi_transaction_t …\n&lt; File path prefix associated with the filesystem.\n&lt; Path prefix where FATFS should be registered,\n!&lt; Comunication baud rate\n&lt; UART baud rate\n&lt; BCK pin, input in slave role, output in master role\n&lt; BCK pin, input in slave role, output in master role\n&lt; BCK pin, input in slave role, output in master role\n&lt; The division from MCLK to BCLK. The minimum value is …\n&lt; The division from MCLK to BCLK, only take effect for …\n&lt; Beacon interval which should be multiples of 100. Unit: …\n&lt; WiFi softAP maximum length of the beacon\n&lt; Set to enable big endian\n&lt; Set to enable big endian\n&lt; Set to enable big endian\n&lt; Set true to enable big endian\n&lt; How to represent BIT0 in RMT symbol\n&lt; How to represent BIT1 in RMT symbol\n&lt; Length of bit field [1..-]\n&lt; Set to enable lsb first\n&lt; Set true to enable lsb first\n&lt; Set to enable msb order\n&lt; Set to enable msb order\n&lt; Set to enable bit shift in Philips mode\n&lt; Set true to enable bit shift in Philips mode\n&lt; The curve size in bits.\n&lt; Start bit [0..255]\n&lt; ADC output bit width\n&lt; ADC bit width\n&lt; I2S total bits in one channel， only take effect when …\n&lt; I2S total bits in one channel， only take effect when …\n&lt; Color depth, in bpp\n&lt; I2S sample bits in one channel\n&lt; I2S sample bits in one channel\n&lt; ADC raw output bitwidth\n&lt; ADC conversion result bits\nBLE address\nBLE address\n&lt; block length\n@brief Check if the image (bootloader and application) has …\n@brief Check the eFuse block revision\n@brief Check if a GPIO input is held low for a long …\n@brief Check if a GPIO input is held low or high for a …\n@brief Erase the partition data that is specified in the …\n@brief Returns the number of active otadata.\n@brief Get chip package\n@brief Calculates a sha-256 for a given partition or …\n@brief Determines if the list contains the label\n@brief Calculate crc for the OTA data select.\n@brief Returns true if OTADATA is not marked as bootable …\n@brief Verifies the validity of the OTA data select\n@brief Read ota_info partition and fill array from two …\n@brief Returns the number of active otadata.\n@brief Configure VDDSDIO, call this API to rise VDDSDIO to …\n@brief Configure default SPI pin modes and drive strengths\n@brief Fill buffer with ‘length’ random bytes\n@brief Verify and load an app image (available only in …\n@brief Load an app image without verification (available …\n@brief Disable entropy source for RNG\n@brief Enable an entropy source for RNG if RF subsystem is …\n&lt; Brake mode\n&lt; Brake mode\n&lt; LwIP bridge configuration\n&lt; LwIP bridge configuration\nLwIP bridge configuration\nLwIP bridge configuration\n&lt; broadcast and multicast queue\n&lt; Broker address and security verification\n&lt; Baudrate prescale (i.e., clock divider). Any even number …\n&lt; BSSID of disconnected AP\n&lt; BSSID of connected AP\n&lt; MAC address of AP\n&lt; MAC address of AP\n&lt; MAC address of target AP\n&lt; BSSID of connected AP\n&lt; BSSID of disconnected AP\n&lt; MAC address of target AP.\n&lt; BSSID, if this value is specified, users should also …\n&lt; BSSID of the AP to which connection was estalished\n&lt; BSSID of the AP\n&lt; In a M-BSSID set, identifies the non-transmitted BSSID\n&lt; Whether set MAC address of target AP or not. Generally, …\n&lt; whether set MAC address of target AP or not.\nenum btm_query_reason: Reason code for sending btm query\n&lt; Buffer containing the given ASN.1 item.\n&lt; valid buffer of CSI data\n&lt; Buffer containing the given ASN.1 item.\n&lt; data block being processed\n&lt; data block being processed\n&lt; Buffer size configuration.\n&lt; Pointer for buffer received in callback.\n&lt; The memory capability to use when allocating the buffer …\n&lt; HTTP receive buffer size\n&lt; HTTP transmit buffer size\n&lt; length of the buffer\n&lt; Erase entire flash partition during initialization. By …\n&lt; Requested period between FTM bursts in 100’s of …\n&lt; Number of instances a bus error has occurred\n&lt; Bus off indicator GPIO number (optional, set to -1 if …\nLocal modes\nOutput modes\nControl characters\nControl modes\nInput modes\ninput baud rate\n&lt; Certificate Authority’s certificate in a buffer. …\n&lt; Client CA certificate in a buffer. This buffer should be …\n&lt; Size of Certificate Authority certificate pointed to by …\n&lt; Size of client CA certificate pointed to by …\n&lt; CA certificate buffer legacy name\n&lt; Client CA certificate legacy name\n&lt; Size of Certificate Authority certificate legacy name\n&lt; Size of client CA certificate legacy name\n&lt; WiFi TX cache buffer number\n!&lt; Callback function to execute when timer expires\n&lt; Callback to call for encoding data into RMT items\n&lt; Capture edge\n&lt;Select internal reference capacitance of denoise channel. …\n&lt;Select internal reference capacitance of denoise channel. …\n&lt; Captured value\n&lt; Deprecated variable. Device will always connect in PMF …\n&lt; the number of devices in current network\n&lt; total number of sectors\n&lt; Card Command Class for SD\n&lt; RMT carrier duty (%)\n&lt; RMT carrier duty (%)\n&lt; RMT carrier enable\n&lt; RMT carrier frequency\n&lt; RMT carrier frequency\n&lt; Level of the RMT output, when the carrier is applied\n&lt; The level to remove the carrier\n@brief arguments for callback functions\n&lt; Country code string\nRestart output.\n&lt; Decrypt data callback function using CCMP\n&lt; Encrypt data callback function using CCMP\n&lt; IP address of cellphone.\n&lt; Length of the buffer pointed to by cert_pem. May be 0 …\n&lt; SSL server certification, PEM format as string, if the …\n&lt; Certificate data, default is NULL. It’s not copied nor …\n&lt; Certificate for ssl mutual authentication, not required …\n&lt; Length of the buffer pointed to by certificate.\n&lt; Length of the buffer pointed to by certificate.\n&lt; Optional list of certificate policies (Only anyPolicy is …\n@brief Extracts the input baud rate from the input …\n@brief Extracts the output baud rate from the input …\n@brief Set input baud rate in the termios structure\n@brief Set output baud rate in the termios structure\n&lt; chain top, mesh_assoc IE\n&lt; ADC channel, for chips with …\n&lt; I2S active channel bit mask, set value in <code>i2s_channel_t</code> …\n&lt; I2S active channel bit mask, set value in <code>i2s_channel_t</code> …\n&lt; Wi-Fi channel that peer uses to send/receive ESPNOW …\n&lt; Channel of connected AP\n!&lt; UART channel number (count from zero)\n&lt; ADC channel\n&lt; Channel, scan the specific channel\n&lt; Channel of soft-AP\n&lt; Channel of target AP. Set to 1~13 to scan starting from …\n&lt; Primary channel of the FTM Responder\n&lt; Channel of connected AP\n&lt; Wi-Fi channel that peer uses to send/receive ESPNOW …\n&lt; new channel\n&lt; channel number of the new found network\n&lt; channel, the mesh network on\n&lt; Channel of the AP\n&lt; Channel of the AP\n&lt; LEDC channel (0 - LEDC_CHANNEL_MAX-1)\n&lt; LEDC channel (0 - LEDC_CHANNEL_MAX-1)\n&lt; RMT channel\n&lt; Sigma-delta channel number\n&lt; Channel bitmap for setting specific channels to be …\n&lt; enable to turn on channel filter to smooth adjacent …\n&lt; I2S channel format.\n&lt; I2S channel format.\n&lt; channel switch\n&lt; AT cmd char repeat number\nConvert <code>error</code> into a <code>Result</code> with <code>Ok(value)</code> if no error …\n@brief Period time of checking Ethernet link status\nSuspend check erase/program operation, reserved for …\nSuspend check erase/program operation, reserved for …\nYield to other tasks. Called during erase operations. …\n&lt; child address, not used currently\n&lt; child\n&lt; child info\n&lt; child connected\n&lt; child disconnected\n&lt; Pointer to chip-model-specific “adapter” structure. …\n&lt; Detected chip id.\n&lt; Chip identification number\n&lt; decoded CID (Card IDentification) register value\n&lt; Pointer to a zero-terminated array of IANA identifiers …\n&lt; Pointer to a zero-terminated array of IANA identifiers …\nFunction for deallocating security infrastructure\nFunction for deallocating security infrastructure\n&lt; esp_http_client_handle_t context\n&lt; Client handle\n&lt; Client handle\n&lt; esp_http_client_handle_t context\n&lt; Client handle\n&lt; Client handle\n&lt; <em>MQTT</em> client handle for this event\n&lt; Length of the buffer pointed to by client_cert_pem. May …\n&lt; SSL client certification, PEM format as string, if the …\n&lt; Set <em>MQTT</em> client identifier. Ignored if …\n&lt; Length of the buffer pointed to by client_key_pem. May …\n&lt; Client key decryption password string\n&lt; String length of the password pointed to by …\n&lt; SSL client key, PEM format as string, if the server …\n&lt; Client certificate in a buffer Format may be PEM or DER, …\n&lt; Size of client certificate pointed to by …\n&lt; Client certificate legacy name\n&lt; Size of client certificate legacy name\n&lt; Client key in a buffer Format may be PEM or DER, …\n&lt; Size of client key pointed to by clientkey_pem_buf …\n&lt; Client key decryption password string\n&lt; Client key decryption password string\n&lt; String length of the password pointed to by …\n&lt; String length of the password pointed to by …\n&lt; Client key legacy name\n&lt; Size of client key legacy name\n&lt; PDM clk pin, output\n&lt; Configure LEDC source clock from ledc_clk_cfg_t. Note …\n&lt; PDM TX clock configurations, can be generated by macro …\n&lt; Standard mode clock configuration, can be generated by …\n&lt; TDM mode clock configuration, can be generated by macro …\n&lt; RMT channel counter divider\n&lt; Bitwise of <code>I2C_SCLK_SRC_FLAG_**FOR_DFS**</code> for clk source …\n&lt; Clock source of I2C master bus\n&lt; Clock source of I2C bus.\n&lt; I2C clock frequency for master mode, (no higher than …\n&lt; Clock source\n&lt; Clock source, set to 0 or TWAI_CLK_SRC_DEFAULT if you …\n&lt; GPTimer clock source\n&lt; Choose clock source\n&lt; Choose clock source, see <code>soc_periph_i2s_clk_src_t</code> for …\n&lt; Choose clock source, see <code>soc_periph_i2s_clk_src_t</code> for …\n&lt; MCPWM timer clock source\n&lt; MCPWM carrier clock source\n&lt; MCPWM capture timer clock source\n&lt; Clock source of RMT TX channel, channels in the same …\n&lt; Clock source of RMT RX channel, channels in the same …\n&lt; Selects source clock.\n&lt; the clock source of the temperature sensor.\n&lt; I2C core clock divider\n&lt; CLKOUT divider. Can be 1 or any even number from 2 to 14 …\n&lt; CLKOUT GPIO number (optional, set to -1 if unused)\n&lt; Select SPI clock source, <code>SPI_CLK_SRC_DEFAULT</code> by default.\n&lt; SPI clock speed in Hz. Derived from <code>clock_source</code>.\n&lt; close without context pointer\nCustom session closing callback.\nCustom session closing callback.\n&lt; close with context pointer\nCloses a secure transport session with specified ID\nCloses a secure transport session with specified ID\n&lt; closedir without context pointer\n&lt; closedir with context pointer\n&lt; Command data, of which the length is set in the …\n&lt; UART AT cmd char\n&lt; The line width of command phase, e.g. 2-line-cmd-phase.\n&lt; RSSI threshold for keeping a good connection with parent.\nGet the wrapped <code>esp_err_t</code>.\n&lt; Gradient of ADC-Voltage curve\n&lt; Offset of ADC-Voltage curve\n@brief The standard used for conversion between RGB and YUV\n&lt; YUV&lt;-&gt;RGB conversion standard: BT.601\n&lt; YUV&lt;-&gt;RGB conversion standard: BT.709\n@brief Alpha(A) Format\n&lt; 4 bits, opacity only\n&lt; 8 bits, opacity only\n@brief Data structure for ARGB8888 pixel unit\n@brief ARGB Format\n&lt; 32 bits, 8 bits per A(alpha)/R/G/B value\n@brief CLUT(L) Format\n&lt; 4 bits, color look-up table\n&lt; 8 bits, color look-up table\n@brief Gray Format\n&lt; 4 bits, grayscale\n&lt; 8 bits, grayscale\n@brief Raw Format\n&lt; 10 bits per pixel\n&lt; 12 bits per pixel\n&lt; 8 bits per pixel\n@brief Data structure for RGB565 pixel unit\n@brief Data structure for RGB888 pixel unit\n@brief RGB Format\n&lt; 16 bits, 5 bits per R/B value, 6 bits for G value\n&lt; 18 bits, 6 bits per R/G/B value\n&lt; 24 bits, 8 bits per R/G/B value\n@brief YUV Format\n&lt; 12 bits, 8-bit Y per pixel, 8-bit U and V per four pixels\n&lt; 12 bits, 8-bit Y per pixel, 8-bit U and V per four pixels\n&lt; 16 bits, 8-bit Y per pixel, 8-bit U and V per two pixels\n&lt; 24 bits, 8 bits per Y/U/V value\n@brief Color range @note The difference between a full …\n&lt; Full color range, 0 is the darkest black and 255 is the …\n&lt; Limited color range, 16 is the darkest black and 235 is …\n@brief RGB element order\n&lt; RGB element order: BGR\n&lt; RGB element order: RGB\n&lt; @deprecated Set RGB color space, please use …\n@brief Color Space Info Structure\n@brief Color Space\n&lt; Color space alpha (A)\n&lt; Color space argb\n&lt; Color look-up table (L)\n&lt; Color space gray\n&lt; Color space raw\n&lt; Color space rgb\n&lt; Color space yuv\n&lt; Unique type of a certain color pixel format\n@brief The order of the components per pack in the YUV422 …\n&lt; UYVY\n&lt; VYUY\n&lt; YUYV\n&lt; YVYU\nCommand name. Must not be NULL, must not contain spaces. …\n&lt; Command to send\n&lt; Default amount of bits in command phase (0-16), used …\n&lt; The command length in this transaction, in bits.\n&lt; timeout, in milliseconds, of a single command. Set to 0 …\nSend an user-defined spi transaction to the device.\nSend an user-defined spi transaction to the device.\n&lt; If non-NULL, server certificate CN must match this name. …\n&lt; If non-NULL, server certificate CN must match this name. …\n&lt; Pointer to the string containing server certificate …\n&lt; Pointer to the string containing server certificate …\n&lt; I2S communication format\n&lt; I2S communication format\n&lt; Comparator handle\n&lt; Compare value\n&lt; vote address configuration\n@brief Custom driver specific configuration data used by …\nHTTP Server Configuration, if a server is not already …\nConfigure the host to work at different read mode. …\nConfigure the host to work at different read mode. …\n&lt; NDP Confirm frame required\nThe handle of the relevant connection.\nConnection information (valid only when <code>wifi_state</code> is …\nThe status of the connection attempt; o 0: the connection …\n&lt; connection refused error code reported from MQTT* broker …\n&lt; connection refused error code reported from MQTT* broker …\n&lt; parent information, same as Wi-Fi event …\n&lt; parent connected\n&lt; Length of the request body\n&lt; Length of the request body\nContext pointer to user-defined per-command context data. …\n&lt; Context to identify the request\n&lt; Context to identify the request\n&lt; I2C LCD panel will encode control information (e.g. D/C …\n&lt; TWAI controller ID, index from 0. If you want to install …\n&lt; Pointer to conversion result buffer for one conversion …\n&lt; Conversion frame size, in bytes. This should be in …\n&lt; Suggest leaving it empty, this parameter has been …\n&lt; suggest leaving it empty, this parameter has been …\n&lt; ADC DMA conversion mode, see <code>adc_digi_convert_mode_t</code>.\n&lt; ADC DMA conversion mode, see <code>adc_digi_convert_mode_t</code>.\n&lt; Bytes of data that can be converted in 1 interrupt. This …\n&lt; Bytes of data that can be converted in 1 interrupt. This …\n&lt; YUV conversion standard: BT601, BT709\nConvert <code>error</code> into a <code>Result</code> with <code>Ok(())</code> if not error …\n&lt; The core the HTTP server task will run on\n&lt; The core the HTTP server task will run on\n&lt; A “ping” session contains count procedures\n&lt; Count mode\n&lt; Current count value\n&lt; MCPWM timer count value\n&lt; The count value that should lock to upon sync event\n&lt; The count value that should lock to upon sync event\n&lt; Counter direction\n&lt; Counter enable\n&lt; Country information of AP\n&lt; Check sum crc32\n&lt; CRC32 value callback function in little endian\n&lt; User credentials for broker\n&lt; Function pointer to esp_crt_bundle_attach. Enables the …\n&lt; Pointer to ESP x509 Certificate Bundle attach function …\n&lt; The AES context to use for AES block encryption or …\n&lt; The AES context to use for AES block encryption or …\n&lt; crypto functions\n&lt; Amount of SPI bit-cycles the cs should stay active after …\n&lt; Amount of SPI bit-cycles the cs should be activated …\n&lt; GPIO used for CS line\n&lt; Channel Switch Announcement Count. Notify the station …\n&lt; decoded CSD (Card-Specific Data) register value\n&lt; CSD structure format\n&lt; WiFi channel state information enable flag\nUDP Port number for asynchronously exchanging control …\nUDP Port number for asynchronously exchanging control …\nContext pointer to be passed to above handler functions …\nContext pointer to be passed to above handler functions …\n&lt; Actual offset for the data associated with this event\nThe interface that received the packet for the current …\nHeader of the input packet currently being processed.\nHeader of the input IPv6 packet currently being processed.\nTotal header length of current_ip4/6_header (i.e. after …\nDestination IP address of current_header\nSource IP address of current_header\nThe interface that accepted the packet for the current …\nThis function is called when pbuf_free deallocates this …\n@brief Custom IO function of MAC driver. This function is …\n@brief Custom IO function of PHY driver. This function is …\n@brief Custom IO function of MAC driver. This function is …\n@brief Custom IO function of PHY driver. This function is …\n&lt; file number\n&lt; zero-terminated file name\n&lt; not defined in POSIX, but present in BSD and Linux\n&lt; Destination MAC address\n&lt; data of the event\nPointer to buffer containing the proof of possession data\nPointer to buffer containing the proof of possession data\n&lt; Appended Data payload\n&lt; Configuration of ioctl command\n&lt; data\n&lt; response data\n&lt; buffer to send or read into\n&lt; data of the event\nPUBLIC\n&lt; Data associated with this event\nPointer to buffer containing the proof of possession data\nProtocomm HTTPD Configuration Data\n&lt; Data bytes (not relevant in RTR frame)\n&lt; (Deprecated) The secondary pointer of DMA buffer that …\n&lt; GPIO pin for spi data0 signal in quad/octal mode, or -1 …\n&lt; GPIO pin for spi data1 signal in quad/octal mode, or -1 …\n&lt; GPIO pin for spi data2 signal in quad/octal mode, or -1 …\n&lt; GPIO pin for spi data3 signal in quad/octal mode, or -1 …\n&lt; GPIO pin for spi data4 signal in octal mode, or -1 if …\n&lt; GPIO pin for spi data5 signal in octal mode, or -1 if …\n&lt; GPIO pin for spi data6 signal in octal mode, or -1 if …\n&lt; GPIO pin for spi data7 signal in octal mode, or -1 if …\n&lt; I2S sample data bit width (valid data bits per sample), …\n&lt; I2S sample data bit width (valid data bits per sample)\n&lt; I2S sample data bit width (valid data bits per sample)\n&lt; UART byte size\n&lt; Set the data endian for color data larger than 1 byte\n&lt; DATA pin, input\n&lt; data length of data\n&lt; Length of the appended Data\n&lt; Length of data\n&lt; data length of data\n&lt; Data length\n&lt; Length of the data for this event\n&lt; Data length code\n&lt; The line width of data phase, e.g. 4-line-data-phase.\n&lt; DATA pin, output\n&lt; Total data processed\n&lt; Total data processed\n&lt; Size of the data next to ICMP packet header\n&lt; length of data in the buffer\n&lt; manufacturing date\n&lt; Compile date\n&lt; Compile date and time\n&lt; Date.\n&lt; Offset of the D/C selection bit in control phase\n&lt; GPIO used to select the D/C line, set this to -1 if the …\n&lt; ESPNOW using dcm rate to send frame\n&lt; ESPNOW using dcm rate to send frame\n&lt; field reserved for future extension\n&lt; VFS index, not to be used by applications\n&lt;Set debounce count, such as <code>n</code>. If the measured values …\n&lt;Set debounce count, such as <code>n</code>. If the measured values …\n&lt; Set this field to de-configure a LEDC timer which has …\nFunction which implements the decryption algorithm\nFunction which implements the decryption algorithm\n@brief Deinitialize Ethernet MAC\n@brief Deinitialize Ethernet PHY\n@brief Deinitialize Ethernet MAC\n@brief Custom driver De-initialization\n@brief Deinitialize Ethernet PHY\n&lt; host function to deinitialize the driver\n&lt; host function to deinitialize the driver, called with …\n@brief Delete console REPL environment @param[in] repl …\n@brief Free memory of Ethernet MAC\n@brief Free memory of Ethernet PHY instance\n@brief Delete console REPL environment @param[in] repl …\n@brief Free memory of Ethernet MAC\n@brief Free memory of Ethernet PHY instance\n@brief Delete encoder object\n@brief Destroy LCD panel\n@brief Destroy LCD panel IO handle (deinitialize all and …\nDelay for at least ‘us’ microseconds. Called in …\nFunction which is to be called by the manager to delete a …\nFunction which is to be called by the manager to delete a …\n&lt; Delta early time for RF PHY on\n&lt; Delta timeout time for RF PHY off\n&lt; Denominator part of division\n&lt; Destination address of ESPNOW packet\n&lt; Destination address of ESPNOW packet\n&lt; Destination MAC address\n&lt; I2C device address\n&lt; Select the address length of the slave device.\nConfigure the device-related register before transactions. …\nConfigure the device-related register before transactions. …\n&lt; device power save duty\n&lt; I2C device raw address. (The 7/10 bit address without …\nBLE device name being broadcast at the time of provisioning\n&lt; Device name. If empty, the default device name is used.\nBLE device name being broadcast at the time of provisioning\n&lt; DATA pin, input\n&lt; DATA pin, input\n&lt; I2S channel direction\n&lt; Count direction\n&lt; MCPWM timer count direction\n&lt; Count direction\n&lt; The count direction that should lock to upon sync event\n&lt; Timer direction\n&lt; Timer direction\n&lt; Timer direction\n&lt; Timer direction\n&lt; Timer direction\n&lt; The count direction that should lock to upon sync event\n@brief Directory entry structure\n&lt; Client will reconnect to server (when …\n&lt; Disable HTTP automatic redirects\n&lt; <em>MQTT</em> clean session, default clean_session is true\n&lt; Set <code>disable_keepalive=true</code> to turn off keep-alive …\nReturn code indicating the reason for the disconnect.\n&lt; parent disconnected\nEnables real ff_disk_status function implementation for SD …\nEnables real ff_disk_status function implementation for SD …\n@brief Turn on or off the display\n@brief Enter or exit sleep mode\n!&lt; Dispatch callback from task or ISR; if not specified, …\n&lt; Estimated one-way distance in Centi-Meters\n&lt; Counter clock divider\n&lt; Dialog Token of the FTM frame\n&lt; Leave it NULL. Reserved for cache aligned buffers for …\n&lt; DMA alignment\n@brief Needed info to get GDMA alignment\n&lt; The first level pointer of DMA buffer that just finished …\n&lt; This is an alias to ‘dma_desc_num’ for backward …\n&lt; This is an alias to ‘dma_frame_num’ for backward …\n&lt; The total number of descriptors used by I2S DMA to …\n&lt; I2S DMA buffer number, it is also the number of DMA …\n&lt; Frame number for one-time sampling. Frame here means the …\n&lt; I2S frame number in one DMA buffer. One frame means …\n&lt; destination MAC address of the CSI data\nCallback which is invoked when a hostname is found. A …\n&lt; host function to do a transaction\n&lt; DATA pin, output\n&lt; DATA pin, output\n&lt; DATA pin, output\n&lt; The second data pin for the DAC dual-line mode, only …\n@brief Draw bitmap on LCD panel\n&lt; driver config\n&lt; Pointer to the implementation function table\n&lt; driver config\n&lt; free rx buffer function pointer\n&lt; free rx buffer function pointer\n&lt; Pointer for digital signature peripheral context\n&lt; Pointer for digital signature peripheral context\n&lt; Pointer for digital signature peripheral context, see …\n&lt; Carrier of handle for digital signature parameters, …\n&lt; Dtim period of soft-AP. Default value: 2\n&lt; Basic dummy bits to use\n&lt; Amount of dummy bits to insert between address and data …\n&lt; The dummy length in this transaction, in bits.\n&lt; enable to dump 802.11 ACK frame, default disabled\n&lt; enable dump sigb field\n&lt; dup flag of the message associated with this event\n&lt; parent weak RSSI monitor duration, if the RSSI continues …\n&lt; power save duty of the child\n&lt; parent duty\n&lt; parent or child duty\n&lt; LEDC channel duty, the range of duty setting is [0, (2**…\n&lt; LEDC current duty of the channel, the range of duty is […\n&lt; Carrier duty cycle\n&lt; Carrier wave duty cycle (0~100%)\n&lt; Duty cycle of positive clock, in 1/256th increments (128 …\n&lt; LEDC channel duty resolution\n&lt; WiFi dynamic RX buffer number\n&lt; WiFi dynamic TX buffer number\n&lt; The state in which the task existed when the structure …\n&lt; The state in which the task existed when the structure …\nActions that can be performed when vTaskNotify() is called.\n&lt; Increment the task’s notification value.\n&lt; Notify the task without updating its notify value.\n&lt; Set bits in the task’s notification value.\n&lt; Set the task’s notification value to a specific value …\n&lt; Set the task’s notification value if the previous …\nPossible return values for eTaskConfirmSleepModeStatus().\n&lt; A task has been made ready or a context switch pended …\n&lt; No tasks are waiting for a timeout so it is safe to …\n&lt; Enter a sleep mode that will not last any longer than …\nINCLUDE_eTaskGetState must be defined as 1 for this …\nTask states returned by eTaskGetState.\n&lt; The task being queried is in the Blocked state.\n&lt; The task being queried has been deleted, but its TCB has …\n&lt; Used as an ‘invalid state’ value.\n&lt; The task being queried is in a ready or pending ready …\n&lt; A task is querying the state of itself, so must be …\n&lt; The task being queried is in the Suspended state, or is …\n&lt; The efuse block where the ECDSA key is stored\n&lt; The efuse block where ECDSA key is stored\n&lt; The efuse block where the ECDSA key is stored\n&lt; The efuse block where ECDSA key is stored\n&lt; Which kind of edge can trigger the ETM event module\n&lt; Array of kinds of edges to trigger the ETM event module …\n&lt; element ID, vendor specific, 221\n&lt;  XTS encryption and decryption key\n&lt; Should be set to WIFI_VENDOR_IE_ELEMENT_ID (0xDD)\n&lt;enable proximity function for sleep pad\n&lt; Indicate whether STA’s HT2040 coexist management is …\n&lt; Enable or disable beacon monitor\n@brief Enable flow control on MAC layer or not\n@brief Enable flow control on MAC layer or not\n&lt; Enable smartconfig logs.\n&lt; bool to enable/disable linger\n&lt; bool to enable/disable linger\n@brief Encode the user data into RMT symbols and write …\n&lt; ESPNOW data that this peer sends/receives is encrypted …\nFunction which implements the encryption algorithm\n&lt; ESPNOW data that this peer sends/receives is encrypted …\nFunction which implements the encryption algorithm\n&lt; Number of encrypted ESPNOW peers, maximum value is …\n&lt; Number of encrypted ESPNOW peers, maximum value is …\n&lt; flag is set to true if partition is encrypted\n&lt; End address of the heap in which the block is located\n&lt; End address of the heap in which the block is located\nCalled after completing any flash operation.\nget_socket_select_semaphore returns semaphore allocated in …\n&lt; The CRL entries containing the certificate revocation …\n&lt; Entry address\nDirect access to the list of CRL entry extensions (an …\nErase a specific block by its start address.\nErase a specific block by its start address.\nErase whole flash chip.\nErase whole flash chip.\n&lt; data state on card after erase whether 0 or 1 (card …\nErase a specific sector by its start address.\nErase a specific sector by its start address.\n&lt; size the erase operation should be aligned to\nDefinitions for error constants.\nConnection aborted.\nAlready connecting.\nIllegal argument.\nBuffer error.\nConnection closed.\nNot connected.\nLow-level netif error\nOperation in progress\nConn already established.\nOut of memory error.\nNo error, everything OK.\nConnection reset.\nRouting problem.\nTimeout.\nAddress in use.\nIllegal value.\nOperation would block.\n&lt; error returned from transfer\n&lt; esp-mqtt error handle including esp-tls errors as well …\n&lt; error type referring to the source of the error\n&lt; error type referring to the source of the error\n&lt; ESPNOW using ERSU to send frame, ERSU is a transmission …\n&lt; ESPNOW using ERSU to send frame, ERSU is a transmission …\nConvert an <code>esp_err_t</code> into a <code>Result&lt;(), EspError&gt;</code>.\nConvert an <code>esp_err_t</code> into a <code>Result&lt;(), EspError&gt;</code>.\n@brief Structure storing characteristics of an ADC\n@brief Characterize an ADC at a particular attenuation\n@brief Checks if ADC calibration values are burned into …\n@brief   Reads an ADC and converts the reading to a …\n@brief   Convert an ADC reading to voltage in mV\n@brief Type of calibration value used in characterization\n&lt; Characterization based on default reference voltage\n&lt; Characterization based on Two Point values stored in …\n&lt; Characterization based on Two Point values and fitting …\n&lt; Characterization based on reference voltage stored in …\n@brief The AES 128 decrypt callback function used by …\n@brief The AES 128 encrypt callback function used by …\n\\brief Lock access to AES hardware unit\n\\brief          AES context structure\n\\brief          AES-CBC buffer encryption/decryption …\n\\brief          AES-CFB128 buffer encryption/decryption.\n\\brief          AES-CFB8 buffer encryption/decryption.\n\\brief               AES-CTR buffer encryption/decryption\n\\brief          AES-ECB block encryption/decryption\n\\brief       This function performs an AES-OFB (Output …\nXTS-AES buffer encryption/decryption\nDeprecated, see esp_aes_internal_decrypt\n@brief Deinitialize AES decryption callback function\n@brief Initialize AES callback function for decryption\n@brief Decrypt one AES block callback function\nDeprecated, see esp_aes_internal_encrypt\n@brief Deinitialize AES encryption callback function\n@brief Initialize AES callback function for encryption\n@brief Encrypt one AES block callback function\n\\brief          Clear AES context\n\\brief           This function performs a GCM …\n\\brief           This function performs GCM encryption or …\n\\brief           This function finishes the GCM operation …\n\\brief           This function clears a GCM context\n\\brief           This function initializes the specified …\n\\brief           This function associates a GCM context …\n\\brief           This function starts a GCM encryption or …\n\\brief           This function feeds an input buffer into …\n\\brief           This function feeds an input buffer as …\n@brief One-Key GMAC hash callback function with AES for …\n\\brief          Initialize AES context\n\\brief Unlock access to AES hardware unit\n\\brief          AES set key schedule (encryption or …\n@brief The AES unwrap callback function used by esp_wifi.\n@brief The AES wrap callback function used by esp_wifi.\n\\brief The AES XTS context-type definition.\n\\brief          This function releases and clears the …\n\\brief          This function initializes the specified …\n\\brief          This function prepares an XTS context for …\n\\brief          This function prepares an XTS context for …\n@brief callback called when an allocation operation fails, …\n@brief Description about application.\n@brief   Return esp_app_desc structure. This structure …\n@brief   Fill the provided buffer with SHA256 of the ELF …\nGet the next frame on a stack for backtracing\nGet the first frame of the current stack’s backtrace\n@brief Print the backtrace of the current stack\n@brief Print the backtrace of all tasks\n@brief Print the backtrace from specified frame.\n@brief  Return base MAC address which is set using …\n@brief  Set base MAC address with the MAC address which is …\n@brief Bootloader description structure\n@brief   Return esp_bootloader_desc structure.\n@brief Decrypt data callback function using CCMP (Counter …\n@brief Encrypt data callback function using CCMP (Counter …\n@brief ESP chip ID\n&lt; chip ID: ESP32\n&lt; chip ID: ESP32-C2\n&lt; chip ID: ESP32-C3\n&lt; chip ID: ESP32-C6\n&lt; chip ID: ESP32-H2\n&lt; chip ID: ESP32-P4\n&lt; chip ID: ESP32-S2\n&lt; chip ID: ESP32-S3\n&lt; Invalid chip ID (we defined it to make sure the …\n@brief coex prefer value\n&lt; Do balance of WiFi and bluetooth\n&lt; Prefer to bluetooth, bluetooth will have more …\n&lt; Prefer value numbers\n&lt; Prefer to WiFi, WiFi will have more opportunity to use RF\n@deprecated Use esp_coex_status_bit_set() and …\n@brief Clear coex schm status @param type : WIFI/BLE/BT …\n@brief Set coex schm status @param type : WIFI/BLE/BT …\n@brief coex status type\n@brief Get software coexist version string\n&lt; The long hold GPIO\n&lt; If the GPIO input is not low\n&lt; The short hold GPIO\n@brief Console command main function @param argc number of …\n@brief Console command main function, with context @param …\n@brief Register console command @param cmd pointer to the …\n@brief Console command description\n@brief Parameters for console initialization\n@brief de-initialize console module @note  Call this once …\n@brief Parameters for console device: UART\n@brief Callback which provides command completion for …\n@brief Callback which provides command hints for linenoise …\n@brief initialize console module @param config console …\n@brief Establish a console REPL environment over UART …\n@brief Register a ‘help’ command\n@brief Parameters for console REPL (Read Eval Print Loop)\n@brief Console REPL base structure\n@brief Type defined for console REPL\n@brief Run command line @param cmdline command line …\n@brief Split command line into arguments in place @verbatim\n@brief Start REPL environment @param[in] repl REPL handle …\n@brief  Check integrity of coredump data in flash. This …\n@brief  Erases coredump data in flash. …\n@brief  Retrieves address and size of coredump data in …\n@brief  Initializes core dump module internal data.\n@brief  Print/store coredump data to the selected …\n@brief Clear a hardware breakpoint on the current CPU\n@brief Clear a hardware watchpoint on the current CPU\n@brief Atomic compare-and-set operation\n@brief Configure the CPU to disable access to invalid …\n@brief CPU cycle count type\n@brief CPU interrupt descriptor\n@brief Get a CPU interrupt’s descriptor\n@brief CPU interrupt handler type\n@brief CPU interrupt type\n@brief Reset a CPU core\n@brief Set and enable a hardware breakpoint on the current …\n@brief Set and enable a hardware watchpoint on the current …\n@brief Stall a CPU core\n@brief Resume a previously stalled CPU core\n@brief Wait for Interrupt\n@brief CPU watchpoint trigger type\n@brief CRC32 value callback function in little endian.\n@brief      Attach and enable use of a bundle for …\n@brief      Disable and dealloc the certification bundle\n@brief   Check if the given CA certificate chain is the …\n@brief      Set the default certificate bundle used for …\n@brief Enter deep-sleep mode\n@brief Unregister an deepsleep callback\n@brief Disable logging from the ROM code after deep sleep.\n@brief Enable wakeup using specific gpio pins\n@brief Register a callback to be called from the deep …\n@brief Enter deep sleep with the configured wakeup options\n@brief Enter deep-sleep mode\n@brief Enter deep sleep with the configured wakeup options\n@brief Function type for stub to run on wake from sleep.\n@brief The default esp-idf-provided esp_wake_deep_sleep() …\n@brief  Unregister an idle callback. If the idle callback …\n@brief  Unregister an idle callback from the idle hook of …\n@brief  Unregister a tick callback. If the tick callback …\n@brief  Unregister a tick callback from the tick hook of …\n@brief Derive local MAC address from universal MAC address.\n@brief DMA buffer location\n&lt; Auto detect buffer location, under this condition API …\n&lt; DMA buffer is in internal memory\n&lt; DMA buffer is in PSRAM\n@note This API will use MAX alignment requirement\n@brief Helper function for calloc a DMA capable memory …\n@brief Helper function for malloc a DMA capable memory …\n@note This API will use MAX alignment requirement\n@brief Helper function to check if a DMA buffer pointer …\n@note This API will use MAX alignment requirement\n@brief DMA Mem info\n@brief Clear the previously set Certificate Authority (CA) …\n@brief Clear the previously set client certificate and …\n@brief Clear the previously set identity for PEAP/TTLS …\n@brief Clear new password for MSCHAPv2 method.\n@brief Clear password for PEAP/TTLS method.\n@brief Clear username for PEAP/TTLS method.\n@brief Get EAP client certificates time check status.\n@brief Set CA certificate for EAP authentication.\n@brief Set client certificate and private key for EAP …\n@brief Set EAP client certificates time check (disable or …\n@brief Set the parameters for EAP-FAST Phase 1 …\n@brief Set identity for PEAP/TTLS authentication method.\n@brief Set a new password for MSCHAPv2 authentication …\n@brief Set the PAC (Protected Access Credential) file for …\n@brief Set password for PEAP/TTLS authentication method.\n@brief Enable or disable Suite-B 192-bit certification …\n@brief Set EAP-TTLS phase 2 method.\n@brief Set username for PEAP/TTLS authentication method.\n@brief Use the default certificate bundle for EAP …\n@brief Configuration settings for EAP-FAST (Extensible …\n@brief Enumeration of phase 2 authentication types for …\n&lt; CHAP (Challenge Handshake Authentication Protocol)\n&lt; EAP (Extensible Authentication Protocol)\n&lt; MS-CHAP (Microsoft Challenge Handshake Authentication …\n&lt; MS-CHAPv2 (Microsoft Challenge Handshake Authentication …\n&lt; PAP (Password Authentication Protocol)\n@brief Set the batch mode of writing fields.\n@brief Reset the batch mode of writing fields.\n@brief Writes all prepared data for the batch mode.\n@brief Checks that the given block is empty.\n@brief Type of eFuse blocks ESP32C3\n&lt; Number of eFuse BLOCK0. REPEAT_DATA\n&lt; Number of eFuse BLOCK1. MAC_SPI_8M_SYS\n&lt; Number of eFuse BLOCK10. SYS_DATA_PART2\n&lt; Number of eFuse BLOCK2. SYS_DATA_PART1\n&lt; Number of eFuse BLOCK3. USER_DATA\n&lt; Number of eFuse BLOCK4. KEY0\n&lt; Number of eFuse BLOCK5. KEY1\n&lt; Number of eFuse BLOCK6. KEY2\n&lt; Number of eFuse BLOCK7. KEY3\n&lt; Number of eFuse BLOCK8. KEY4\n&lt; Number of eFuse BLOCK9. KEY5\n&lt; Number of eFuse BLOCK4. KEY0\n&lt; Number of eFuse BLOCK5. KEY1\n&lt; Number of eFuse BLOCK6. KEY2\n&lt; Number of eFuse BLOCK7. KEY3\n&lt; Number of eFuse BLOCK8. KEY4\n&lt; Number of eFuse BLOCK9. KEY5\n&lt; Number of eFuse BLOCK2. SYS_DATA_PART1\n&lt; Number of eFuse BLOCK10. SYS_DATA_PART2\n&lt; Number of eFuse BLOCK3. USER_DATA\n@brief   Checks eFuse errors in BLOCK0.\n@brief Check secure_version from app and secure_version …\n@brief Type of coding scheme\n&lt; None\n&lt; Reed-Solomon coding\n@brief Return the number of unused efuse key blocks in the …\n@brief Type definition for an eFuse field\n@brief   Destroys the data in the given efuse block, if …\n@brief Disable ROM Download Mode via eFuse\n@brief Switch ROM Download Mode to Secure Download mode …\n@brief Find a key block with the particular purpose set.\n@brief Search for an unused key block and return the first …\n@brief   Return efuse coding scheme for blocks.\n@brief Returns the status of the Secure Boot public key …\n@brief   Returns the number of bits used by field.\n@brief Returns a pointer to a key block.\n@brief Returns a read protection for the key block.\n@brief Returns a write protection for the key block.\n@brief Returns the current purpose set for an efuse key …\n@brief Returns a write protection of the key purpose field …\n@brief   Returns chip package from efuse\n@brief Returns a pointer to a key purpose for an efuse key …\n@brief Returns a write protection of the Secure Boot …\n@brief Returns true if the key block is unused, false …\n@brief  Return base MAC address which was previously …\n@brief  Return base MAC address which is …\n@brief Type of key purpose\n&lt; HMAC Downstream mode\n&lt; Digital Signature peripheral key (uses HMAC Downstream …\n&lt; JTAG soft enable key (uses HMAC Downstream mode)\n&lt; HMAC Upstream mode\n&lt; MAX PURPOSE\n&lt; Reserved\n&lt; SECURE_BOOT_DIGEST0 (Secure Boot key digest)\n&lt; SECURE_BOOT_DIGEST1 (Secure Boot key digest)\n&lt; SECURE_BOOT_DIGEST2 (Secure Boot key digest)\n&lt; User purposes (software-only use)\n&lt; XTS_AES_128_KEY (flash/PSRAM encryption)\n@brief   Read key to efuse block starting at the offset …\n@brief Read a single bit eFuse field as a boolean value.\n@brief   Reads bits from EFUSE field and writes it into an …\n@brief   Reads bits from EFUSE field and returns number of …\n@brief   Returns value of efuse register.\n@brief Return secure_version from efuse field. @return …\n@brief Reset efuse write registers\n@brief Type definition for ROM log scheme\n&lt; Disable ROM logging permanently\n&lt; Always enable ROM logging\n&lt; ROM logging is enabled when specific GPIO level is high …\n&lt; ROM logging is enabled when specific GPIO level is low …\n@brief Sets the Secure Boot public key digest revocation …\n@brief Sets a read protection for the key block.\n@brief Sets a write protection for the key block.\n@brief Sets a key purpose for an efuse key block.\n@brief Sets a write protection of the key purpose field …\n@brief   Sets a read protection for the whole block.\n@brief Set boot ROM log scheme via eFuse\n@brief   Sets a write protection for the whole block.\n@brief Sets a write protection of the Secure Boot public …\n@brief Write efuse field by secure_version value.\n@brief   Write key to efuse block starting at the offset …\n@brief Write a single bit eFuse field to 1\n@brief   Writes array to EFUSE field.\n@brief   Writes a required count of bits as “1” to …\n@brief Program a block of key data to an efuse block\n@brief Program keys to unused efuse blocks\n@brief   Write value to efuse register.\n@brief Returns string for esp_err_t error codes\n@brief Returns string for esp_err_t and system error codes\n@brief     Set timeout of SmartConfig process.\n@brief Configuration of Ethernet driver\n@brief Decrease Ethernet driver reference\n@brief Delete netif glue of Ethernet driver\n@brief Install Ethernet driver\n@brief Uninstall Ethernet driver @note It’s not …\n@brief Get MAC instance memory address\n@brief Get PHY instance memory address\n@brief Handle of Ethernet driver\n@brief Increase Ethernet driver reference @note Ethernet …\n@brief Command list for ioctl API\n&lt; Get PHY Auto Negotiation\n&lt; Get Duplex mode\n&lt; Get MAC address\n&lt; Get PHY address\n&lt; Get Speed\n&lt; Read PHY register\n&lt; Set PHY Auto Negotiation\n&lt; Set Duplex mode\n&lt; Set flow control\n&lt; Set MAC address\n&lt; Set PHY address\n&lt; Set PHY loopback\n&lt; Set promiscuous mode\n&lt; Set Speed\n&lt; Write PHY register\n@brief Misc IO function of Ethernet driver\n@brief Ethernet MAC\n@brief Ethernet MAC\n@brief Ethernet mediator\n@brief Ethernet mediator\n@brief Handle of netif glue - an intermediate layer …\n@brief Create a netif glue for Ethernet driver @note netif …\n@brief Create a PHY instance of DP83848\n@brief Create a PHY instance of IP101\n@brief Create a PHY instance of KSZ80xx\n@brief Create a PHY instance of LAN87xx\n@brief Create a PHY instance of RTL8201\n@brief Data structure to Read/Write PHY register via ioctl …\n@brief Ethernet PHY\n@brief Ethernet PHY\n@brief Start Ethernet driver <strong>ONLY</strong> in standalone mode (i.e. …\n@brief Ethernet driver state\n&lt; Deinit done\n&lt; Duplex updated\n&lt; Link status changed\n&lt; Lowlevel init done\n&lt; Pause ability updated\n&lt; Speed updated\n@brief Stop Ethernet driver\n@brief General Transmit\n@brief Special Transmit with variable number of arguments\n@brief Update Ethernet data input path (i.e. specify where …\n@brief ETM channel configuration\n@brief Connect an ETM event to an ETM task via a …\n@brief Disable ETM channel\n@brief Enable ETM channel\n@brief ETM channel handle\n@brief Delete an ETM channel\n@brief Delete ETM event\n@brief Delete ETM task\n@brief Dump ETM channel usages to the given IO stream\n@brief ETM event handle\n@brief Allocate an ETM channel\n@brief ETM task handle\n@brief Dumps statistics of all event loops.\n@brief Register an instance of event handler to the …\n@brief Register an instance of event handler to a specific …\n@brief Unregister a handler from the system event loop.\n@brief Unregister a handler instance from a specific event …\n@brief Register an event handler to the system event loop …\n@brief Register an event handler to a specific loop …\n@brief Unregister a handler with the system event loop …\n@brief Unregister a handler from a specific event loop …\n@brief Special variant of esp_event_post for posting …\n@brief Special variant of esp_event_post_to for posting …\nConfiguration for creating event loops\n@brief Create a new event loop.\n@brief Create default event loop\n@brief Delete an existing event loop.\n@brief Delete the default event loop\n@brief Dispatch events posted to an event loop.\n@brief Posts an event to the system default event loop. …\n@brief Posts an event to the specified event loop. The …\n@brief Fill a buffer with random bytes from hardware RNG\nCheck if appropriate chip driver is set.\n@brief Pointer to the “default” SPI flash chip, ie the …\n@brief Erase flash chip contents\n@brief Erase a region of the flash chip\n@brief Read if the entire chip is write protected\n@brief Detect flash size based on flash ID.\n@brief Read the list of individually protectable regions …\n@brief Detect if a region of the SPI flash chip is …\n@brief Detect flash size based on flash ID.\n@brief Initialise SPI flash chip interface.\n@brief Mode used for reading from SPI flash\n&lt; Both address &amp; data transferred using dual I/O\n&lt; Data read using dual I/O\n&lt; Data read using single I/O, no limit on speed\n&lt; Only support on OPI flash, flash read and write under …\n&lt; Only support on OPI flash, flash read and write under …\n&lt; Both address &amp; data transferred using quad I/O\n&lt; Data read using quad I/O\n&lt; The fastest io mode supported by the host is …\n&lt; Data read using single I/O, some limits on speed\n@brief OS-level integration hooks for accessing flash …\n@brief Read data from the SPI flash chip\n@brief Read and decrypt data from the SPI flash chip using …\n@brief Read flash ID via the common “RDID” SPI flash …\n@brief Read flash unique ID via the common “RDUID” SPI …\n@brief Structure for describing a region of flash\n@brief Set write protection for the SPI flash chip\n@brief Update the protected status for a region of the SPI …\n@brief SPI flash clock speed values, always refer to them …\n&lt; The flash runs under 10MHz\n&lt; The flash runs under 120MHz, 120MHZ can only be used by …\n&lt; The flash runs under 20MHz\n&lt; The flash runs under 26MHz\n&lt; The flash runs under 40MHz\n&lt; The flash runs under 5MHz\n&lt; The flash runs under 80MHz\n&lt; The maximum frequency supported by the host is …\n@brief SPI flash clock speed values, always refer to them …\n@brief Structure to describe a SPI flash chip connected to …\n@brief Write data to the SPI flash chip\n@brief Encrypted and write data to the SPI flash chip …\n\\brief          The GCM context structure.\n@brief Get current wake from deep sleep stub @return …\n@brief  Get the size of available heap.\n@brief  Get the size of available internal heap.\nReturn full IDF version string, same as ‘git describe’ …\n@brief Get the minimum heap that has ever been available\n@brief HMAC-MD5 callback function over data buffer (RFC …\n@brief HMAC-MD5 callback function over data vector (RFC …\n@brief HMAC-SHA1 callback function over data buffer (RFC …\n@brief HMAC-SHA1 callback function over data vector (RFC …\n@brief The SHA256 callback function used by esp_wifi.\n@brief      On receiving HTTP Status code 401, this API …\n@brief HTTP Authentication type\n&lt; HTTP Basic authentication\n&lt; HTTP Digest authentication\n&lt; No authention\n@brief       Cancel an ongoing HTTP request. This API …\n@brief      This function must be the last function to …\n@brief      Close http connection, still kept all http …\n@brief HTTP configuration\n@brief      Delete http request header\n@brief      HTTP Client events data\n@brief   HTTP Client events id\n&lt; The connection has been disconnected\n&lt; This event occurs when there are any errors during …\n&lt; After sending all the headers to the server\n&lt; This header has been kept for backward compatibility and …\n&lt; Once the HTTP has been connected to the server, no data …\n&lt; Occurs when receiving data from the server, possibly …\n&lt; Occurs when finish a HTTP session\n&lt; Occurs when receiving each header sent from the server\n&lt; Intercepting HTTP redirects to handle them manually\n@brief      HTTP Client events data\n@brief      This function need to call after …\n@brief       Process all remaining response data This uses …\n@brief          Get Chunk-Length from client\n@brief      Get http response content length (from header …\n@brief      Get HTTP client session errno\n@brief      Get http request header. The value parameter …\n@brief      Get http request password. The address of …\n@brief      Get current post field information\n@brief      Get http response status code, the valid value …\n@brief      Get transport type\n@brief          Get URL from client\n@brief      Get http request user_data. The value stored …\n@brief      Get http request username. The address of …\n@brief      Start a HTTP session This function must be the …\n@brief      Check response data is chunked\n@brief      Checks if entire data in the response has been …\n@brief HTTP method\n&lt; HTTP COPY Method\n&lt; HTTP DELETE Method\n&lt; HTTP GET Method\n&lt; HTTP HEAD Method\n&lt; HTTP LOCK Method\n&lt; HTTP MKCOL Method\n&lt; HTTP MOVE Method\n&lt; HTTP NOTIFY Method\n&lt; HTTP OPTIONS Method\n&lt; HTTP PATCH Method\n&lt; HTTP POST Method\n&lt; HTTP PROPFIND Method\n&lt; HTTP PROPPATCH Method\n&lt; HTTP PUT Method\n&lt; HTTP SUBSCRIBE Method\n&lt; HTTP UNLOCK Method\n&lt; HTTP UNSUBSCRIBE Method\n@brief      Argument structure for HTTP_EVENT_ON_DATA event\n@brief      Argument structure for HTTP_EVENT_ON_DATA event\n@brief      This function will be open the connection, …\n@brief      Invoke this function after <code>esp_http_client_init</code>…\n@brief      Read data from http stream\n@brief      Helper API to read larger data chunks This is …\n@brief      Argument structure for HTTP_EVENT_REDIRECT …\n@brief      Argument structure for HTTP_EVENT_REDIRECT …\n@brief      Reset the redirection counter. This is useful …\n@brief      On receiving a custom authentication header, …\n@brief      Set http request auth_type.\n@brief      Set http request header, this function must be …\n@brief      Set http request method\n@brief      Set http request password. The value of …\n@brief      Set post data, this function must be called …\n@brief      Set redirection URL. When received the 30x …\n@brief      Set http request timeout\n@brief      Set URL for client, when performing this …\n@brief      Set http request user_data. The value passed …\n@brief      Set http request username. The value of …\n@brief      HTTP Client transport\n&lt; Transport over ssl\n&lt; Transport over tcp\n&lt; Unknown\n@brief     This function will write data to the HTTP …\nArgument structure for HTTP_SERVER_EVENT_ON_DATA and …\n@brief   HTTP Server events id\n&lt; The connection has been disconnected\n&lt; This event occurs when there are any errors during …\n&lt; After sending all the headers to the client\n&lt; Once the HTTP Server has been connected to the client, …\n&lt; Occurs when receiving data from the client\n&lt; Occurs when receiving each header sent from the client\n&lt; Occurs when an ESP HTTP server session is finished\n&lt; This event occurs when HTTP Server is started\n&lt; This event occurs when HTTP Server is stopped\n@brief    HTTPS OTA Firmware upgrade.\n@brief Clean-up HTTPS OTA Firmware upgrade and close HTTPS …\n@brief    Start HTTPS OTA Firmware upgrade\n@brief ESP HTTPS OTA configuration\n@brief   Events generated by OTA process\n&lt; OTA aborted\n&lt; Connected to server\n&lt; Callback to decrypt function\n&lt; OTA finished\n&lt; Read app description from image header\n&lt; OTA started\n&lt; Boot partition update after successful ota update\n&lt; Verify chip id of new image\n&lt; Flash write operation\n@brief    Clean-up HTTPS OTA Firmware upgrade and close …\n@brief  This function returns OTA image data read so far.\n@brief  This function returns OTA image total size.\n@brief   Reads app description from image header. The app …\n@brief  This function returns the HTTP status code of the …\n@brief   Checks if complete data was received or not\n@brief    Read image data from HTTP stream and write it to …\n@brief  Set custom MAC address of the interface. This …\n@brief Supported SPI flash sizes\n&lt; SPI flash size 128 MB\n&lt; SPI flash size 16 MB\n&lt; SPI flash size 1 MB\n&lt; SPI flash size 2 MB\n&lt; SPI flash size 32 MB\n&lt; SPI flash size 4 MB\n&lt; SPI flash size 64 MB\n&lt; SPI flash size 8 MB\n&lt; SPI flash size MAX\n@brief Get the flash size of the image\n@brief Get metadata of app\n@brief Main header of binary image\n@brief Header of binary image segment\n@brief SPI flash clock division factor.\n&lt; The SPI flash clock frequency equals to the clock source\n&lt; The SPI flash clock frequency is divided by 2 of the …\n&lt; The SPI flash clock frequency is divided by 3 of the …\n&lt; The SPI flash clock frequency is divided by 4 of the …\n@brief SPI flash mode, used in esp_image_header_t\n&lt; SPI mode DIO\n&lt; SPI mode DOUT\n&lt; SPI mode FAST_READ\n&lt; SPI mode QIO\n&lt; SPI mode QOUT\n&lt; SPI mode SLOW_READ\n@brief Verify an app image.\n@brief Verify the bootloader image.\n@brief Verify the bootloader image.\n@brief Enable the interrupt watchdog on the current CPU.\n@brief Initialize the non-CPU-specific parts of interrupt …\n&lt; Ethernet interface\n&lt; Soft-AP interface\n&lt; NAN interface\n&lt; Station interface\n\\brief           Internal AES block decryption function …\n\\brief           Internal AES block encryption function …\n@brief Allocate an interrupt with the given parameters.\n@brief Allocate an interrupt with the given parameters.\n@brief Interrupt CPU core affinity\n&lt; Install the peripheral interrupt to CPU core 0\n&lt; Install the peripheral interrupt to CPU core 1\n&lt; Install the peripheral interrupt to ANY CPU core, …\n@brief Disable the interrupt associated with the handle\n@brief disable the interrupt source based on its number …\n@brief Dump the status of allocated interrupts @param …\n@brief Enable the interrupt associated with the handle\n@brief enable the interrupt source based on its number …\n@brief Disable and free an interrupt.\n@brief Get CPU number an interrupt is tied to\n@brief Get the allocated interrupt for a certain handle\n@brief Mark an interrupt as a shared interrupt\n@brief Disable interrupts that aren’t specifically …\n@brief Re-enable interrupts disabled by …\n@brief Check if the given pointer is in the safe ISR area. …\n@brief Reserve an interrupt to be used outside of this …\n@brief Set the “in IRAM” status of the handler.\n@brief IPv4 address\n@brief IPv4 address\n@brief Ascii internet address interpretation routine The …\n@brief Converts numeric IP address into decimal dotted …\n@brief IPv6 address\n@brief IPv6 address\n@brief IP address\n@brief Configuration of LCD color conversion\n@brief RGB element order @brief RGB element order\n@brief Create LCD panel IO handle, for I2C interface in …\n@brief Create LCD panel IO handle, for I2C interface in …\n@brief Create LCD panel IO handle, for SPI interface\n@brief Create LCD panel for model NT35510\n@brief Create LCD panel for model SSD1306\n@brief Create LCD panel for model ST7789\n@brief Deinitialize the LCD panel\n@brief Configuration structure for panel device\n@brief Turn off the display\n@brief Turn on or off the display\n@brief Enter or exit sleep mode\n@brief Draw bitmap on LCD panel\n@brief Initialize LCD panel\n@brief Invert the color (bit-wise invert the color data …\n@brief Type of LCD panel IO callbacks\n@brief Declare the prototype of the function that will be …\n@brief Destroy LCD panel IO handle (deinitialize panel and …\n@brief Type of LCD panel IO event data\n@brief Panel IO configuration structure, for I2C interface\n@brief Register LCD panel IO callbacks\n@brief Transmit LCD command and receive corresponding …\n@brief Panel IO configuration structure, for SPI interface\n@brief LCD panel IO interface\n@brief Transmit LCD RGB data\n@brief Transmit LCD command and corresponding parameters\n@brief Mirror the LCD panel on specific axis\n@brief Reset LCD panel\n@brief Set extra gap in x and y axis\n@brief SSD1306 configuration structure\n@brief Swap/Exchange x and y axis\n@brief LCD panel interface\n@brief Timing parameters for the video data transmission\n@brief Enter light sleep with the configured wakeup options\n@brief Line ending settings\n!&lt; CR\n!&lt; CR + LF\n!&lt; LF\n@brief Default log level\n@brief Function which returns timestamp to be used in log …\n@brief Get log level for a given tag, can be used to avoid …\n@brief Set log level for given tag\n@brief Log level\n&lt; Extra information which is not necessary for normal use …\n&lt; Critical errors, software module can not recover on its …\n&lt; Information messages which describe normal flow of events\n&lt; No log output\n&lt; Bigger chunks of debugging information, or frequent …\n&lt; Error conditions from which recovery measures have been …\n@brief Set function used to output log entries\n@brief Function which returns system timestamp to be used …\n@brief Function which returns timestamp to be used in log …\n@brief Write message into the log\n@brief  Return the size of the MAC type in bytes.\n&lt; Base MAC for that used for other MAC types (6 bytes)\n&lt; MAC for Bluetooth (6 bytes)\n&lt; MAC_CUSTOM eFuse which was can be burned by customer (6 …\n&lt; if CONFIG_SOC_IEEE802154_SUPPORTED=y, MAC_EXT eFuse …\n&lt; MAC_FACTORY eFuse which was burned by Espressif in …\n&lt; MAC for Ethernet (6 bytes)\n&lt; if CONFIG_SOC_IEEE802154_SUPPORTED=y, MAC for IEEE802154 …\n&lt; MAC for WiFi Soft-AP (6 bytes)\n&lt; MAC for WiFi Station (6 bytes)\n\\brief          Clone (the state of) an MD5 context\n\\brief          MD5 final digest\n\\brief          Clear MD5 context\n\\brief          Initialize MD5 context\n\\brief          MD5 process data block (internal use only)\n\\brief          MD5 process buffer\n@brief MD5 hash callback function for data vector\n@brief      Set whether allow more than one root existing …\n@brief      Return the number of packets could be accepted …\n@brief      Connect to current parent\n@brief      Mesh de-initialization\n@brief      Delete group ID addresses\n@brief      Disable mesh Power Save function\n@brief      Disconnect from current parent\n@brief      Enable mesh Power Save function\n@brief      Enable network Fixed Root Setting - Enabling …\n@brief      Flush scan result\n@brief      Flush upstream packets pending in to_parent …\n@brief      Get device duty cycle and type\n@brief      Get announce interval\n@brief      Get mesh softAP associate expired time\n@brief      Get mesh softAP authentication mode\n@brief      Get mesh max connection configuration\n@brief      Get attempts for mesh self-organized networking\n@brief      Get mesh softAP beacon interval\n@brief      Get mesh network capacity\n@brief      Get mesh stack configuration\n@brief      Get group ID addresses\n@brief      Get the number of group ID addresses\n@brief      Get mesh network ID\n@brief      Get mesh IE crypto key\n@brief      Get current layer value over the mesh network\n@brief      Get max layer value\n@brief      Get the network duty cycle, duration, type and …\n@brief      Get non-mesh max connection configuration\n@brief      Get the parent BSSID\n@brief      Get passive scan time\n@brief      Get delay time before network starts root …\n@brief      Get router configuration\n@brief      Get the router BSSID\n@brief      Get routing table of this device’s …\n@brief      Get the number of devices in this device’s …\n@brief      Get RSSI threshold of current parent\n@brief      Get the running active duty cycle - The …\n@brief      Return the number of packets available in the …\n@brief      Return whether enable self-organized …\n@brief      Get nodes in the subnet of a specific child\n@brief      Get the number of nodes in the subnet of a …\n@brief      Get parameters for parent switch\n@brief      Get mesh topology\n@brief      Get total number of devices in current network …\n@brief      Get the TSF time\n@brief      Return the number of packets pending in the …\n@brief      Get device type over mesh network\n@brief      Get vote percentage threshold for approval of …\n@brief      Get queue size\n@brief      Check whether the device is in active state - …\n@brief      Check whether the specified group address is …\n@brief      Check whether the mesh Power Save function is …\n@brief      Return whether the device is the root node of …\n@brief      Check whether allow more than one root to …\n@brief      Check whether network Fixed Root Setting is …\n@brief      Post the toDS state to the mesh stack\n@brief      Print the number of rxQ waiting\n@brief      Enable mesh print scan result\n@brief      Print the number of txQ waiting\n@brief Mesh power save duties\n@brief      Duty signaling\n@brief      Get the running duties of device, parent and …\n@brief      Receive a packet targeted to self over the …\n@brief      Receive a packet targeted to external IP …\n@brief      Get mesh networking IE length of one AP\n@brief      Get AP record\n@brief      Send a packet over the mesh network - Send a …\n@brief      Set blocking time of esp_mesh_send() - Suggest …\n@brief      Enable the minimum rate to 6 Mbps\n@brief      Set the device duty cycle and type - The range …\n@brief      Set announce interval - The default short …\n@brief      Set mesh softAP associate expired time …\n@brief      Set mesh softAP authentication mode\n@brief      Set mesh max connection value - Set mesh …\n@brief      Set mesh softAP password\n@brief     Set attempts for mesh self-organized networking\n@brief      Set mesh network capacity (max:1000, …\n@brief      Set mesh stack configuration - Use …\n@brief      Set group ID addresses\n@brief      Set mesh network ID\n@brief      Set mesh IE crypto functions\n@brief      Set mesh IE crypto key\n@brief      Set network max layer value - for tree …\n@brief      Set the network duty cycle, duration and rule …\n@brief      Set a specified parent for the device\n@brief      Set passive scan time\n@brief      Set delay time before starting root healing\n@brief      Get router configuration\n@brief      Set RSSI threshold of current parent - The …\n@brief      Enable/disable self-organized networking - …\n@brief      Set parameters for parent switch\n@brief      Set mesh topology. The default value is …\n@brief      Designate device type over the mesh network - …\n@brief      Set vote percentage threshold for approval of …\n@brief      Set the number of RX queue for the node, the …\n@brief      Start mesh - Initialize mesh IE. - Start mesh …\n@brief      Stop mesh - Deinitialize mesh IE. - Disconnect …\n@brief      Cause the root device to add Channel Switch …\n@brief Mesh topology\n&lt; chain topology\n&lt; tree topology\n@brief      Cause the root device to give up (waive) its …\n@brief Lock access to RSA Accelerator (MPI/bignum …\n@brief Unlock access to RSA Accelerator (MPI/bignum …\n<em>MQTT</em> client configuration structure\nBroker related configuration\nBroker address\nBroker identity verification\nClient buffer size configuration\nClient related credentials for authentication.\nClient authentication\nNetwork related configuration\nClient outbox configuration options.\n<em>MQTT</em> Session related configuration\nLast Will and Testament message configuration.\nClient task configuration\n@brief Destroys the client handle\n@brief This api is typically used to force disconnection …\n@brief Enqueue a message to the outbox, to be sent later. …\n@brief Get outbox size\n@brief Creates <em>MQTT</em> client handle based on the …\n@brief Client to send a publish message to the broker\n@brief This api is typically used to force reconnection …\n@brief Registers <em>MQTT</em> event\n@brief Sets <em>MQTT</em> connection URI. This API is usually used …\n@brief Starts <em>MQTT</em> client with already created client …\n@brief Stops <em>MQTT</em> client tasks\n@brief Subscribe the client to a list of defined topics …\n@brief Subscribe the client to defined topic with defined …\n@brief Unregisters mqtt event\n@brief Unsubscribe the client from defined topic\n<em>MQTT</em> connection error codes propagated via ERROR event\n&lt; Connection accepted\n&lt; <em>MQTT</em> connection refused reason: Wrong user\n&lt; <em>MQTT</em> connection refused reason: ID rejected\n&lt; <em>MQTT</em> connection refused reason: Wrong username or …\n&lt; <em>MQTT</em> connection refused reason: Wrong protocol\n&lt; <em>MQTT</em> connection refused reason: Server unavailable\n@brief Dispatch user event to the mqtt internal event loop\n@brief <em>MQTT</em> error code structure to be passed as a …\n@brief <em>MQTT</em> error code structure to be passed as a …\n<em>MQTT</em> connection error codes propagated via ERROR event\n@brief <em>MQTT</em> event types.\n&lt; The event occurs before connecting\n&lt; connected event, additional context: session_present flag\n&lt; data event, additional context:\n&lt; Notification on delete of one message from the internal …\n&lt; disconnected event\n&lt; published event, additional context:  msg_id\n&lt; subscribed event, additional context:\n&lt; unsubscribed event, additional context:  msg_id\n&lt; Custom event used to queue tasks into mqtt event handler …\n<em>MQTT</em> event configuration structure\n<em>MQTT</em> protocol version used for connection\n@brief Set configuration structure, typically used when …\nTopic definition struct\n&lt; <em>MQTT</em> over SSL, using scheme: <code>MQTTS</code>\n&lt; <em>MQTT</em> over TCP, using scheme: <code>MQTT</code>\n&lt; <em>MQTT</em> over Websocket, using scheme:: <code>ws</code>\n&lt; <em>MQTT</em> over Websocket Secure, using scheme: <code>wss</code>\n@brief      End NAN Datapath that is active\n@brief      Send Datapath Request to the Publisher with …\n@brief      Send Datapath Response to accept or reject the …\n@brief      Start Publishing a service in the NAN cluster\n@brief      Send Follow-up to the Publisher with matching …\n@brief      Subscribe for a service within the NAN cluster\n&lt; Pointer to corresponding esp-netif object\n&lt; Pointer to corresponding esp-netif object\n&lt; Pointer to the associated netif handle\n@brief Default building block for network interface action …\n@brief Default building block for network interface action …\n@brief Default building block for network interface action …\n@brief Default building block for network interface action …\n@brief Default building block for network interface action …\n@brief Default building block for network interface action …\n@brief Default building block for network interface action …\n@brief Default building block for network interface action …\n@brief Default building block for network interface action …\n@brief  Cause the TCP/IP stack to add an IPv6 address to …\n@brief   Attaches esp_netif instance to the io driver …\n@brief Attaches wifi soft AP interface to supplied netif\n@brief Attaches wifi station interface to supplied netif\n@brief definitions of different authorisation types\n@brief  TCPIP thread safe callback used with …\n@brief  Generic esp_netif configuration\n@brief  Generic esp_netif configuration\n@brief Creates default WIFI AP. In case of any init error …\n@brief Creates default STA and AP network interfaces for …\n@brief Creates default WIFI NAN. In case of any init error …\n@brief Creates default WIFI STA. In case of any init error …\n@brief  Create interface link-local IPv6 address\n@brief Creates esp_netif WiFi object based on the custom …\n@brief  Deinitialize the esp-netif component (and the …\n@brief   Destroys the esp_netif object\n@brief Destroys default WIFI netif created with …\n@brief Supported options for DHCP client or DHCP server\n&lt; Domain name server\n&lt; Request IP address lease time\n&lt; Request IP address retry counter\n&lt; Request specific IP address\n&lt; Solicitation router address\n&lt; Network mask\n&lt; Vendor Class Identifier of a DHCP client\n&lt; Vendor Specific Information of a DHCP server\n@brief Mode for DHCP client or DHCP server option functions\n&lt; Get option\n&lt; Set option\n@brief Status of DHCP client or DHCP server\n&lt; DHCP client/server is in initial state (not yet started)\n&lt; DHCP client/server has been started\n&lt; DHCP client/server has been stopped\n@brief  Get DHCP client status\n@brief  Set or Get DHCP client option\n@brief Start DHCP client (only if enabled in interface …\n@brief  Stop DHCP client (only if enabled in interface …\n@brief  Populate IP addresses of clients connected to DHCP …\n@brief  Get DHCP Server status\n@brief  Set or Get DHCP server option\n@brief  Start DHCP server (only if enabled in interface …\n@brief  Stop DHCP server (only if enabled in interface …\n@brief DNS server info\n@brief Type of DNS server\n&lt; DNS backup server address (Wi-Fi STA and Ethernet only)\n&lt; DNS fallback server address (Wi-Fi STA and Ethernet only)\n&lt; DNS main server address\n@brief ESP-netif driver base handle\n@brief ESP-netif driver base handle\n@brief  Specific IO driver configuration\n@brief  Specific IO driver configuration\n@brief Return a netif pointer for the first interface that …\n@brief Predicate callback for esp_netif_find_if() used to …\n@brief  Free the rx buffer allocated by the media driver\n@brief  Get all IPv6 addresses of the specified interface\n@brief  Get all preferred IPv6 addresses of the specified …\n@brief Getter function of the default netif\n@brief Returns configured interface type for this …\n@brief  Get DNS Server information\n@brief Returns configured event for this esp-netif …\n@brief Returns configured flags for this interface\n@brief Searches over a list of created objects to find an …\n@brief Returns esp-netif handle\n@brief  Get interface hostname.\n@brief Returns configured interface key for this esp-netif …\n@brief Gets media driver handle for this esp-netif instance\n@brief  Get interface global IPv6 address\n@brief  Get interface link-local IPv6 address\n@brief  Get interface’s IP address information\n@brief Get the mac address for the interface instance\n@brief Returns network stack specific implementation handle\n@brief  Get net interface index from network stack …\n@brief  Get net interface name from network stack …\n@brief Returns number of registered esp_netif objects\n@brief  Get interface’s old IP information\n@brief Returns configured routing priority number\n@brief ESP-netif inherent config parameters\n@brief ESP-netif inherent config parameters\n@brief  Initialize the underlying TCP/IP stack\n@brief  IO driver handle type\n@brief  Get the IPv6 address type\n@brief IPV6 IP address information\nEvent structure for IP_EVENT_STA_GOT_IP, …\n@brief  Test if supplied interface is up or down\n@brief  Cause the TCP/IP stack to join a IPv6 multicast …\n@brief  Cause the TCP/IP stack to leave a IPv6 multicast …\n@brief  Disable NAPT on an interface.\n@brief  Enable NAPT on an interface\n@brief free the netstack buffer\n@brief increase the reference counter of net stack buffer\n@brief  Specific L3 network stack configuration\n@brief   Creates an instance of new esp-netif object based …\n@brief Iterates over list of interfaces. Returns first …\n@brief Iterates over list of interfaces without list …\n@brief Type of esp_netif_object server\n@brief DHCP client’s addr info (pair of MAC and IP …\n@brief Configuration structure for PPP network interface\n@brief Configuration structure for PPP network interface\n@brief Gets parameters configured in the supplied …\n@brief Sets the auth parameters for the supplied esp-netif.\n@brief Sets common parameters for the supplied esp-netif.\n@brief event ids for different PPP related events\n@brief  Passes the raw packets from communication media to …\n@brief  ESP-NETIF Receive function type\n@brief  Cause the TCP/IP stack to remove an IPv6 address …\n@brief Manual configuration of the default netif\n@brief  Set DNS Server information\n@brief   Configures driver related options of esp_netif …\n@brief  Set the hostname of an interface\n@brief Sets IPv4 address to the specified octets\n@brief  Set interface’s IP address information\n@brief Set link-speed for the specified network interface …\n@brief Set the mac address for the interface instance\n@brief  Set interface old IP information\n@brief Deinitialize esp_netif SNTP module\n@brief Initialize SNTP with supplied config struct @param …\n@brief Returns SNTP server’s reachability shift register …\n@brief Start SNTP service if it wasn’t started during …\n@brief Wait for time sync event @param tout Specified …\n@brief Converts Ascii internet IPv4 address into …\n@brief Converts Ascii internet IPv6 address into …\n@brief Utility to execute the supplied callback in TCP/IP …\n@brief  Outputs packets from the TCP/IP stack to the media …\n@brief  Outputs packets from the TCP/IP stack to the media …\nFunction which sets up newlib in ROM for use with ESP-IDF\nPostponed _GLOBAL_REENT stdio FPs initialization.\nInitialize newlib static locks\nPanic with an error-specific message if <code>err</code> is not <code>ESP_OK</code>.\nPanic with an error-specific message if <code>err</code> is not <code>ESP_OK</code>.\n@brief     Add a peer to peer list\n@brief     De-initialize ESPNOW function\n@brief     Delete a peer from peer list\n@brief     Fetch a peer from peer list. Only return the …\n@brief     Get a peer whose MAC address matches peer_addr …\n@brief     Get the number of peers\n@brief     Get the version of ESPNOW. Currently, ESPNOW …\n@brief     Initialize ESPNOW function\n@brief     Peer exists or not\n@brief     Modify a peer\n@brief ESPNOW peer information parameters.\n@brief ESPNOW peer information parameters.\n@brief Number of ESPNOW peers which exist currently.\n@brief Number of ESPNOW peers which exist currently.\n@brief ESPNOW rate config\n@brief ESPNOW rate config\n@brief     Callback function of receiving ESPNOW data …\n@brief ESPNOW packet information\n@brief ESPNOW packet information\n@brief     Register callback function of receiving ESPNOW …\n@brief     Register callback function of sending ESPNOW …\n@brief     Send ESPNOW data\n@brief     Callback function of sending ESPNOW data @param …\n@brief Status of sending ESPNOW data .\n&lt; Send ESPNOW data fail\n&lt; Send ESPNOW data successfully\n@brief      Set ESPNOW rate config for each peer\n@brief     Set the primary master key\n@brief     Set wake window for esp_now to wake up in …\n@brief     Unregister callback function of receiving …\n@brief     Unregister callback function of sending ESPNOW …\n@brief One-Key CBC MAC (OMAC1) hash with AES-128 callback …\n@brief Abort OTA update, free the handle and memory …\n@brief   Commence an OTA update writing to the specified …\n@brief Checks applications on the slots which can be …\n@brief Finish OTA update and validate newly written app …\n@brief Erase previous boot app partition and corresponding …\n@brief   Return esp_app_desc structure. This structure …\n@brief   Fill the provided buffer with SHA256 of the ELF …\n@brief Returns number of ota partitions provided in …\n@brief Get partition info of currently configured boot app\n@brief Returns the description structure of the bootloader.\n@brief Returns last partition with invalid state …\n@brief Return the next OTA app partition which should be …\n@brief Returns esp_app_desc structure for app partition. …\n@brief Get partition info of currently running app\n@brief Returns state for given partition.\n@brief Opaque handle for an application OTA update\nOTA_DATA states for checking operability of the app.\n&lt; App could not confirm the workable or non-workable. In …\n&lt; App was confirmed as non-workable. This app will not …\n&lt; Monitor the first boot. In bootloader this state is …\n&lt; First boot for this app was. If while the second boot …\n&lt; Undefined. App can boot and work without limits.\n&lt; App was confirmed as workable. App can boot and work …\n@brief This function is called to roll back to the …\n@brief This function is called to indicate that the …\n@brief Configure OTA data for a new boot partition\n@brief   Write OTA update data to partition\n@brief   Write OTA update data to partition at an offset\n@brief Check for the identity of two partitions by SHA-256 …\n@brief Deregister the partition previously registered …\n@brief Erase part of the partition\n@brief Find partition based on one or more parameters\n@brief Find first partition based on one or more parameters\n@brief Get esp_partition_t structure for given partition\n@brief Get SHA-256 digest for required partition.\nCheck whether the region on the main flash is not …\n@brief Release partition iterator\n@brief Opaque partition iterator type\nCheck whether the region on the main flash is safe to …\n@brief Configure MMU to map partition into data memory\n@brief Opaque handle for memory region obtained from …\n@brief Enumeration which specifies memory space requested …\n&lt; map to data memory (Vaddr0), allows byte-aligned access, …\n&lt; map to instruction memory (Vaddr1-3), allows only …\n@brief Release region previously obtained using …\n@brief Move partition iterator to the next partition found\n@brief Read data from the partition\n@brief Read data from the partition without any …\n@brief Register a partition on an external flash chip\n@brief Partition subtype\n!&lt; Used to search for partitions with any subtype\n!&lt; Factory application partition\n!&lt; OTA partition 0\n!&lt; OTA partition 1\n!&lt; OTA partition 10\n!&lt; OTA partition 11\n!&lt; OTA partition 12\n!&lt; OTA partition 13\n!&lt; OTA partition 14\n!&lt; OTA partition 15\n!&lt; OTA partition 2\n!&lt; OTA partition 3\n!&lt; OTA partition 4\n!&lt; OTA partition 5\n!&lt; OTA partition 6\n!&lt; OTA partition 7\n!&lt; OTA partition 8\n!&lt; OTA partition 9\n!&lt; Max subtype of OTA partition\n!&lt; Base for OTA partition subtypes\n!&lt; Test application partition\n!&lt; COREDUMP partition\n!&lt; Partition for emulate eFuse bits\n!&lt; ESPHTTPD partition\n!&lt; FAT partition\n!&lt; LITTLEFS partition\n!&lt; NVS partition\n!&lt; Partition for NVS keys\n!&lt; OTA selection partition\n!&lt; PHY init data partition\n!&lt; SPIFFS partition\n!&lt; Undefined (or unspecified) data partition\n@brief partition information structure\n@brief Partition type\n!&lt; Used to search for partitions with any type\n!&lt; Application partition type\n!&lt; Data partition type\n@brief Unload partitions and free space allocated by them\n@brief Verify partition data\n@brief Write data to the partition\n@brief Write data to the partition without any …\n@brief SHA1-based key derivation function (PBKDF2) …\n@brief Type of “ping” callback functions\n@brief Type of “ping” configuration\n@brief Delete a ping session\n@brief Get runtime profile of ping session\n@brief Type of “ping” session handle\n@brief Create a ping session\n@brief Profile of ping session\n&lt; Elapsed time of the whole ping session\n&lt; IP address of replied target\n&lt; Number of reply packets received\n&lt; Number of request packets sent out\n&lt; Sequence number of a ping procedure\n&lt; Size of received packet\n&lt; Elapsed time between request and reply packet\n&lt; Type of service of a ping procedure\n&lt; Time to live of a ping procedure\n@brief Start the ping session\n@brief Stop the ping session\nbackward compatibility newer chips no longer require this …\n@brief Power management config\n@brief Power management config\n@brief Power management config\n@brief Power management config\n@brief Power management config\n@brief Power management config\n@brief Set implementation-specific power management …\nDump the list of all locks to stderr\n@brief Get implementation-specific power management …\n@brief Take a power management lock\n@brief Initialize a lock handle for certain power …\n@brief Delete a lock created using esp_pm_lock\n@brief Opaque handle to the power management lock\n@brief Release the lock taken using esp_pm_lock_acquire.\n@brief Power management constraints\nRequire APB frequency to be at the maximum value supported …\nRequire CPU frequency to be at the maximum value set via …\nPrevent the system from going into light sleep. Argument …\nPrevent the system from going into light sleep. Argument …\n@brief Get the available size of the attached PSRAM chip\n@brief Initialize PSRAM interface/hardware.\n@brief If PSRAM has been initialized\npthread configuration structure that influences pthread …\n@brief Get current pthread creation configuration\n@brief Creates a default pthread configuration based on …\n@brief Initialize pthread library\n@brief Configure parameters for creating pthread\n@brief  Get one random 32-bit word from hardware RNG\n@brief XOR RC4 stream callback function to given data with …\n@brief  Read base MAC address and set MAC address of the …\nClean up some of lazily allocated buffers in REENT …\nReplacement for newlib’s _REENT_INIT_PTR and __sinit.\n@brief  Register a callback to the idle hook of the core …\n@brief  Register a callback to be called from the …\n@brief  Register a callback to be called from the calling …\n@brief  Register a callback to be called from the …\n@brief  Register shutdown handler\n@brief  Get reason of last reset @return See description …\n@brief Reset reasons\n!&lt; Brownout reset (software or hardware)\n!&lt; Reset due to CPU lock up (double exception)\n!&lt; Reset after exiting deep sleep mode\n!&lt; Reset due to efuse error\n!&lt; Reset by external pin (not applicable for ESP32)\n!&lt; Reset (software or hardware) due to interrupt watchdog\n!&lt; Reset by JTAG\n!&lt; Software reset due to exception/panic\n!&lt; Reset due to power-on event\n!&lt; Reset due to power glitch detected\n!&lt; Reset over SDIO\n!&lt; Software reset via esp_restart\n!&lt; Reset due to task watchdog\n!&lt; Reset reason can not be determined\n!&lt; Reset by USB peripheral\n!&lt; Reset due to other watchdogs\n@brief  Restart PRO and APP CPUs.\nConvert an <code>esp_err_t</code> into a <code>Result&lt;T, EspError&gt;</code>.\nConvert an <code>esp_err_t</code> into a <code>Result&lt;T, EspError&gt;</code>.\n@brief CRC16 value in big endian.\n@brief CRC16 value in little endian.\n@brief CRC32 value in big endian.\n@brief CRC32 value in little endian.\n@brief CRC8 value in big endian.\n@brief CRC8 value in little endian.\n@brief Pauses execution for us microseconds\n@brief Get the real CPU ticks per us\n@brief Get reset reason of CPU\n@brief Combine a GPIO input with a peripheral signal, …\n@brief Combine a peripheral signal which tagged as output …\n@brief Enable internal pull up, and disable internal pull …\n@brief Configure IO Pad as General Purpose IO, so that it …\n@brief Set IO Pad current drive capability.\n@brief Unhold the IO Pad. @note When the Pad is set to …\n@brief esp_rom_printf can print message to different …\n@brief Install UART1 as the default console channel, …\n@brief Extract the MD5 result, and erase the context\n@brief Initialize the MD5 context\n@brief Running MD5 algorithm over input data\n@brief Print formated string to console device @note float …\n@brief Route peripheral interrupt sources to CPU’s …\n@brief Set the real CPU tick rate\n@brief Software Reset cpu core.\n@brief Software Reset digital core include RTC.\n@brief  Check RRM capability of connected AP\n@brief  Send Radio measurement neighbor report request to …\n@brief  Send Radio measurement neighbor report request to …\n@brief Pointers to the trusted key digests.\n@brief Read key digests from efuse. Any revoked/missing …\n@brief If an OCD is connected over JTAG. set breakpoint 0 …\n@brief Install a new stub at runtime to run on wake from …\n@brief Set wake stub entry to default <code>esp_wake_stub_entry</code>\nUpdate current microsecond time from RTC\n@brief SHA1-based Pseudo-Random Function (PRF) (IEEE …\n@brief SHA-1 hash callback function for data vector\n@brief The SHA256 PRF callback function used by esp_wifi.\n@brief SHA256 hash callback function for data vector …\n@brief Configure to isolate all GPIO pins in sleep state\n@brief CPU Power down low-level deinitialize, disable CPU …\n@brief CPU Power down low-level initialize, enable CPU …\n@brief CPU Power down de-initialize\n@brief CPU Power down initialize\n@brief Disable wakeup by bluetooth @return - ESP_OK on …\n@brief Disable wakeup source\n@brief Disable beacon wakeup by WiFi MAC @return - ESP_OK …\n@brief Disable wakeup by WiFi MAC @return - ESP_OK on …\n@brief Enable wakeup by bluetooth @return - ESP_OK on …\n@brief Enable or disable GPIO pins status switching …\n@brief Enable wakeup from light sleep using GPIOs\n@brief Enable wakeup by timer @param time_in_us  time …\n@brief Enable wakeup from light sleep using UART\n@brief Enable beacon wakeup by WiFi MAC, it will wake up …\n@brief Enable wakeup by WiFi MAC @return - ESP_OK on …\n@brief Get the bit mask of GPIOs which caused wakeup (ext1)\n@brief Get the bit mask of GPIOs which caused wakeup (gpio)\n@brief Get the wakeup source which caused wakeup from sleep\n@brief Returns true if a GPIO number is valid for use as …\n@brief Sleep mode\n!&lt; deep sleep mode\n!&lt; light sleep mode\n@brief Set power down mode for an RTC power domain in …\n@brief Power domains which can be powered down in sleep …\n!&lt; CPU core\n!&lt; Number of domains\n!&lt; Internal Fast oscillator\n!&lt; VDD_SDIO\n!&lt; XTAL oscillator\n@brief Power down options\n!&lt; Keep power domain enabled in sleep mode, if it is …\n!&lt; Power down the power domain in sleep mode\n!&lt; Keep power domain enabled during sleep mode\n@brief Sleep wakeup cause\n!&lt; Not a wakeup cause, used to disable all wakeup sources …\n!&lt; Wakeup caused by BT (light sleep only)\n!&lt; Wakeup caused by COCPU int\n!&lt; Wakeup caused by COCPU crash\n!&lt; Wakeup caused by external signal using RTC_IO\n!&lt; Wakeup caused by external signal using RTC_CNTL\n!&lt; Wakeup caused by GPIO (light sleep only on ESP32, S2 …\n!&lt; Wakeup caused by timer\n!&lt; Wakeup caused by touchpad\n!&lt; Wakeup caused by UART (light sleep only)\n!&lt; Wakeup caused by ULP program\n!&lt; In case of deep sleep, reset was not caused by exit …\n!&lt; Wakeup caused by WIFI (light sleep only)\n@brief Sleep wakeup cause @brief Sleep wakeup cause\n@brief     Set mode of SmartConfig. default normal mode.\n@brief     Get reserved data of ESPTouch v2.\n@brief  Get the version of SmartConfig.\n@brief     Start SmartConfig, config ESP device to connect …\n@brief     Stop SmartConfig, free the buffer taken by …\n@brief     Set protocol type of SmartConfig.\n@brief     Start SmartConfig, config ESP device to connect …\n@brief     Stop SmartConfig, free the buffer taken by …\n@brief SNTP configuration struct\n@brief SNTP configuration struct\n@brief Checks if sntp is enabled @return true if sntp …\n@brief Get the configured operating mode\n@brief Gets the server reachability shift register as …\n@brief Get SNTP server IP @param idx Index of the server …\n@brief Gets SNTP server name @param idx Index of the server\n@brief Init and start SNTP service\nSNTP operating modes per lwip SNTP module\n@brief Sets SNTP operating mode. The mode has to be set …\n@brief Sets SNTP server address\n@brief Sets SNTP hostname @param idx Index of the server …\n@brief Stops SNTP service\n@brief Time sync notification function\nCheck integrity of SPIFFS\nFormat the SPIFFS partition\n@brief Perform garbage collection in SPIFFS partition\nGet information for SPIFFS\nCheck if SPIFFS is mounted\n@brief     Supplicant deinitialization\n@brief Disable or enable the caching of Pairwise Master …\n@brief     Supplicant initialization\n@brief      Convert user input colon separated MAC Address …\n@brief Trigger a software abort\n@brief Subscribe a task to the Task Watchdog Timer (TWDT)\n@brief Subscribe a user to the Task Watchdog Timer (TWDT)\n@brief Task Watchdog Timer (TWDT) configuration structure\n@brief   Deinitialize the Task Watchdog Timer (TWDT)\n@brief Unsubscribes a task from the Task Watchdog Timer …\n@brief Unsubscribes a user from the Task Watchdog Timer …\n@brief  Initialize the Task Watchdog Timer (TWDT)\n@brief User ISR callback placeholder\n@brief Prints or retrieves information about tasks/users …\n@brief Reconfigure the Task Watchdog Timer (TWDT)\n@brief Reset the Task Watchdog Timer (TWDT) on behalf of …\n@brief Reset the Task Watchdog Timer (TWDT) on behalf of a …\n@brief Query whether a task is subscribed to the Task …\n@brief Task Watchdog Timer (TWDT) user handle\n@brief Error types for TCP connection issues not covered …\n@brief Timer callback function type @param arg pointer to …\n@brief Create an esp_timer instance\n@brief Timer configuration passed to esp_timer_create()\n@brief De-initialize esp_timer library\n@brief Delete an esp_timer instance\n@brief Method to dispatch timer callback\n!&lt; Sentinel value for the number of callback dispatch …\n!&lt; Callback is dispatched from esp_timer task\n@brief Dump the list of timers to a stream\n@brief Minimal initialization of esp_timer\n@brief Get the expiry time of a one-shot timer\n@brief Get the timestamp of the next expected timeout …\n@brief Get the timestamp of the next expected timeout …\n@brief Get the period of a timer\n@brief Get time in microseconds since boot @return Number …\n@brief Opaque type representing a single timer handle\n@brief Initialize esp_timer library\n@brief Returns status of a timer, active or not\n@brief Get the ETM event handle of esp_timer underlying …\n@brief Restart a currently running timer\n@brief Start a one-shot timer\n@brief Start a periodic timer\n@brief Stop a running timer\n&lt; IPv4 address family.\n&lt; IPv6 address family.\n&lt; Unspecified address family.\n&lt; tls flags reported from underlying tls stack during …\n&lt; tls flags reported from underlying tls stack during …\n@brief      ESP-TLS configuration parameters\n@brief ESP-TLS Server configuration parameters\n@brief Free the server side TLS session ticket context\n@brief Initialize the server side TLS session ticket …\n@brief ESP-TLS Server configuration parameters\n@brief      ESP-TLS configuration parameters\n@brief      Close the TLS/SSL connection and free any …\n@brief      Create a new blocking TLS/SSL connection with …\n@brief      Create a new non-blocking TLS/SSL connection …\n@brief      Create a new blocking TLS/SSL connection with …\n@brief      Create a new non-blocking TLS/SSL connection\n@brief      Create a new blocking TLS/SSL connection\n@brief      Read from specified tls connection into the …\n@brief ESP-TLS Connection State\n@brief ESP-TLS Connection State @brief ESP-TLS Connection …\n@brief      Write from buffer ‘data’ into specified …\n&lt; esp_tls error code from last esp_tls failed api\n&lt; esp_tls error code from last esp_tls failed api\nDefinition of different types/sources of error codes …\n&lt; ESP-IDF error type – esp_err_t\n&lt; Last err type – invalid entry\n&lt; Error code from mbedTLS library\n&lt; Certificate flags defined in mbedTLS\n&lt; System error – errno\n&lt; Error code from wolfSSL library\n&lt; Certificate flags defined in wolfSSL\n&lt; last certification verification flags\n&lt; last certification verification flags\n@brief      Free the global CA store currently being used.\n@brief      Returns the last error captured in esp_tls of …\n@brief      Returns last error in esp_tls with detailed …\n@brief      Return the number of application data bytes …\n@brief Get supported TLS ciphersuites list.\n@brief       Returns the connection socket file descriptor …\n@brief       Gets the connection state for the esp_tls …\n@brief       Returns the ESP-TLS error_handle\n@brief      Get the pointer to the global CA store …\n@brief       Returns the ssl context\n@brief      Create TLS connection\n@brief      Create a global CA store, initially empty.\n@brief Error structure containing relevant errors in case …\n@brief Error structure containing relevant errors in case …\n&lt; last esp_err code reported from esp-tls component\n&lt; last esp_err code reported from esp-tls component\n@brief Creates a plain TCP connection, returning a valid …\n@brief      Create TLS/SSL server session\n@brief      Close the server side TLS/SSL connection and …\n@brief       Sets the connection socket file descriptor …\n@brief       Sets the connection state for the esp_tls …\n@brief      Set the global CA store with the buffer …\n&lt; tls specific error code reported from underlying tls …\n&lt; tls specific error code reported from underlying tls …\n&lt; Enable ESPTouch v2 crypt.\n&lt; ESPTouch v2 crypt key, len should be 16.\n@brief      Transport close\n@brief      Transport connection function, to make a …\n@brief      Non-blocking transport connection function, to …\n@brief      Cleanup and free memory the transport\n@brief      Get user data context of this transport\n@brief      Get default port number used by this transport\n@brief      Get and clear last captured socket errno\n@brief      Returns esp_tls error handle. Warning: The …\n@brief      Get transport handle of underlying protocol …\n@brief      Initialize a transport handle object\n@brief Keep alive parameters structure\n@brief Keep alive parameters structure\n@brief      Add a transport to the list, and define a …\n@brief      This function will remove all transport from …\n@brief      Cleanup and free all transports, include …\n@brief      Get the transport by scheme, which has been …\n@brief      Create transport list\n@brief      Poll the transport until readable or timeout\n@brief      Poll the transport until writeable or timeout\n@brief      Transport read function\n@brief      Set transport functions for the transport …\n@brief      Set the user context data for this transport\n@brief      Set default port number that can be used by …\n@brief      Set transport functions for the transport …\n@brief      Set parent transport function to the handle\n&lt; errno from the underlying socket\n&lt; errno from the underlying socket\n@brief      Enable the use of certification bundle for …\n@brief      Enable global CA store for SSL connection\n@brief       Create new SSL transport, the transport …\n@brief      Set the list of supported application …\n@brief      Set SSL certificate data (as PEM format). Note …\n@brief      Set SSL certificate data (as DER format). Note …\n@brief      Set SSL client certificate data for mutual …\n@brief      Set SSL client certificate data for mutual …\n@brief      Set SSL client key data for mutual …\n@brief      Set SSL client key data for mutual …\n@brief      Set SSL client key password if the key is …\n@brief      Set the server certificate’s common name …\n@brief      Set the ds_data handle in ssl context.(used …\n@brief      Set name of interface that socket can be …\n@brief      Set keep-alive status in current ssl context\n@brief      Set PSK key and hint for PSK server/client …\n@brief      Set TLS protocol version for ESP-TLS connection\n@brief      Skip validation of certificate’s common name …\n@brief      Set the ssl context to use secure element …\n@brief      Create TCP transport, the transport handle …\n@brief      Set name of interface that socket can be …\n@brief      Set TCP keep-alive configuration\n@brief Translates the TCP transport error codes to …\n@brief      Transport write function\nWS transport configuration structure\n@brief               Returns websocket fin flag for last …\n@brief               Returns websocket op-code for last …\n@brief               Returns payload length of the last …\n@brief               Returns the HTTP status code of the …\n@brief      Create web socket transport\n@brief               Polls the active connection for …\n@brief               Sends websocket raw message with …\n@brief               Set websocket authorization headers\n@brief               Set websocket transport parameters\n@brief               Set websocket additional headers\n@brief       Set HTTP path to update protocol to websocket\n@brief               Set websocket sub protocol header\n@brief               Set websocket user-agent header\n@brief  Unregister shutdown handler\n@brief     Function signature for received Vendor-Specific …\n@brief add uart/usb_serial_jtag/usb_otg_acmcdc virtual …\n@brief add /dev/cdcacm virtual filesystem driver\n@brief Set the line endings expected to be received\n@brief Set the line endings to sent\n@brief Set the line endings expected to be received on UART\n@brief Set the line endings to sent to UART\n@brief Dump the existing VFS FDs data to FILE* fp\n@brief Eventfd vfs initialization settings\n@brief  Registers the event vfs.\n@brief  Unregisters the event vfs.\n@brief Configuration structure for esp_vfs_fat_register\n@brief Create a file with contiguous space at given path\n@brief Get information for FATFS partition\n@brief Configuration arguments for esp_vfs_fat_sdmmc_mount …\n@deprecated Please use <code>esp_vfs_fat_spiflash_mount_ro</code> …\n@deprecated Please use <code>esp_vfs_fat_spiflash_unmount_ro</code> …\n@cond <em>/ /</em>* @deprecated Please use <code>esp_vfs_fat_register_cfg</code> …\n@brief Register FATFS with VFS component\n@brief Format FAT filesystem\n@brief Format FAT filesystem with given configuration\n@brief Unmount an SD card from the FAT filesystem and …\n@brief Convenience function to get FAT filesystem on SD …\n@brief Configuration arguments for esp_vfs_fat_sdmmc_mount …\n@brief Unmount FAT filesystem and release resources …\n@brief Convenience function to get FAT filesystem on SD …\n@brief Format FAT filesystem with given configuration\n@brief Format FAT filesystem\n@deprecated Please use <code>esp_vfs_fat_spiflash_mount_rw_wl</code> …\n@brief Convenience function to initialize read-only FAT …\n@brief Convenience function to initialize FAT filesystem …\n@deprecated Please use <code>esp_vfs_fat_spiflash_unmount_rw_wl</code> …\n@brief Unmount FAT filesystem and release resources …\n@brief Unmount FAT filesystem and release resources …\n@brief Test if a file is contiguous in the FAT filesystem\n@brief Un-register FATFS from VFS\n@brief Implements the VFS layer of POSIX pread()\n@brief Implements the VFS layer of POSIX pwrite()\nRegister a virtual filesystem for given path prefix.\nSpecial function for registering another file descriptor …\nSpecial case function for registering a VFS that uses a …\nSpecial function for registering another file descriptor …\nSpecial case function for registering a VFS that uses a …\n@brief Synchronous I/O multiplexing which implements the …\n@brief VFS semaphore type for select()\n@brief Notification from a VFS driver about a …\n@brief Notification from a VFS driver about a …\n@brief add virtual filesystem semihosting driver\n@brief Un-register semihosting driver from VFS\n@brief Configuration structure for esp_vfs_spiffs_register\nRegister and mount SPIFFS to VFS with given path prefix.\nUnregister and unmount SPIFFS from VFS\n@brief VFS definition structure\nUnregister a virtual filesystem for given path prefix\nSpecial function for unregistering a file descriptor …\nUnregister a virtual filesystem with the given index\n@brief set VFS to use USB-SERIAL-JTAG driver for reading …\n@brief set VFS to use simple functions for reading and …\nThese functions are to be used in newlib syscall table. …\n@brief Default stub to run on wake from deep sleep.\n@brief     Send raw ieee80211 data\n@brief     Get AID of STA connected with soft-AP\n@brief     Get STAs associated with soft-AP\n@brief  Disable Wi-Fi SoftAP WPS function and release …\n@brief     Enable Wi-Fi AP WPS function.\n@brief     WPS starts to work.\n@brief   Configure wifi beacon montior default parameters\n@brief     Clear AP list found in last scan\n@brief Clears default wifi event handlers for supplied …\n@brief     Currently this API is just an stub API\n@brief      Enable or disable 11b rate of specified …\n@brief      Config 80211 tx rate of specified interface\n@brief      Config ESPNOW rate of specified interface\n@brief     Connect WiFi station to the AP.\n@brief     Connect WiFi station to the AP.\n@brief      Set wake interval for connectionless modules …\n@brief Creates wifi driver instance to be used with …\n@brief     deauthenticate all stations or associated id …\n@brief  Deinit WiFi Free all resource allocated in …\n@brief Deinitialize Wi-Fi Driver Free resource for WiFi …\n@brief Destroys wifi driver instance\n@brief      Disable PMF configuration for specified …\n@brief     Disconnect WiFi station from the AP.\n@brief     Disconnect WiFi station from the AP.\n@brief      Request extra reference of Wi-Fi radio. Wi-Fi …\n@brief      Release extra reference of Wi-Fi radio. Wi-Fi …\n@brief      End the ongoing FTM Initiator session\n@brief      Get FTM measurements report copied into a user …\n@brief      Start an FTM Initiator session by sending FTM …\n@brief      Set offset in cm for FTM Responder. An …\n@brief     Get current antenna configuration\n@brief     Get current antenna GPIO configuration\n@brief     Get the bandwidth of specified interface\n@brief     Get the primary/secondary channel of device\n@brief     Get configuration of specified interface\n@brief     get the current country info\n@brief     get the current country code\n@brief Get CSI data configuration\n@brief     Get mask of WiFi events\n@brief Return mac of specified wifi driver instance\n@brief     Get inactive time of specified interface\n@brief     Get mac of specified interface\n@brief     Get maximum transmitting power after WiFi start\n@brief  Get current operating mode of WiFi\n@brief     Get the promiscuous mode.\n@brief     Get the subtype filter of the control packet in …\n@brief     Get the promiscuous filter.\n@brief     Get the current protocol bitmap of the …\n@brief     Get current WiFi power save type\n@brief     Get default parameters used for scanning by …\n@brief      Get the TSF time In Station mode or …\n@brief  Initialize WiFi Allocate resource for WiFi driver, …\n@brief Initialize Wi-Fi Driver Alloc resource for WiFi …\n@brief     Check the MD5 values of the crypto types header …\n@brief     Check the MD5 values of the esp_wifi_he.h in …\n@brief     Check the MD5 values of the esp_wifi.h in IDF …\n@brief  free the rx buffer which allocated by wifi driver\n@brief     Get the user-configured channel info\n@brief     Get current WiFi log info\n@brief     Get the negotiated bandwidth info after WiFi …\n@brief     Get the negotiated channel info after WiFi …\n@brief     A general API to set/get WiFi internal …\n@brief     Check if WiFi TSF is active\n@brief   Set light sleep mode to require WiFi to enable or …\n@brief   Set modem state mode to require WiFi to enable or …\n@brief     Check the MD5 values of the OS adapter header …\n@brief  register the net stack buffer reference increasing …\n@brief     Set the WiFi RX callback\n@brief  enable or disable transmitting WiFi MAC frame with …\n@brief     Set current WiFi log level\n@brief     Set current log module and submodule\n@brief     Set device spp amsdu attributes\n@brief     Notify WIFI driver that the station got ip …\n@brief  transmit the buffer via wifi driver\n@brief  transmit the buffer by reference via wifi driver\n@brief   Update WIFI light sleep default parameters\n@brief     Update WIFI light sleep wake ahead time\n@brief     Update WiFi MAC time\n@brief     De-initialize WAPI function when wpa_supplicant …\n@brief     Initialize WAPI function when wpa_supplicant …\n@brief     Check the MD5 values of the esp_wifi_he_types.h …\n@brief     Check the MD5 values of the esp_wifi_types.h in …\n@brief Return true if the supplied interface instance is …\n@brief Wifi power domain power off\n@brief Wifi power domain power on\n@brief Register interface receive callback function with …\n@brief  Restore WiFi stack persistent settings to default …\n@brief     Get number of APs found in last scan\n@brief      Get one AP record from the scanned AP list.\n@brief     Get AP list found in last scan.\n@brief     Scan all available APs.\n@brief     Stop the scan in process\n@brief     Set antenna configuration\n@brief     Set antenna GPIO configuration\n@brief     Set the bandwidth of specified interface\n@brief     Set primary/secondary channel of device\n@brief     Set the configuration of the STA, AP or NAN\n@brief     configure country info\n@brief     configure country\n@brief Enable or disable CSI\n@brief Set CSI data configuration\n@brief Register the RX callback function of CSI data.\n@brief Sets default wifi event handlers for AP interface\n@brief Sets default wifi event handlers for NAN interface\n@brief Sets default wifi event handlers for STA interface\n@brief      Config dynamic carrier sense\n@brief     Set mask to enable or disable some WiFi events\n@brief     Set the inactive time of the STA or AP\n@brief   Set wifi keep alive time\n@brief     Set MAC address of WiFi station, soft-AP or NAN …\n@brief     Set maximum transmitting power after WiFi start.\n@brief     Set the WiFi operating mode\n@brief     Enable the promiscuous mode.\n@brief Enable subtype filter of the control packet in …\n@brief Enable the promiscuous mode packet type filter.\n@brief Register the RX callback function in the …\n@brief     Set protocol type of specified interface The …\n@brief     Set current WiFi power save type\n@brief      Set RSSI threshold, if average rssi gets lower …\n@brief     Set default parameters used for scanning by …\n@brief   Set the min active time for wifi to enter the …\n@brief      Set the min broadcast data wait time for wifi …\n@brief     Set the WiFi API configuration storage type\n@brief    Register the txDone callback function of type …\n@brief     Set 802.11 Vendor-Specific Information Element\n@brief     Register Vendor-Specific Information Element …\n@brief Disable EAP authentication(WiFi Enterprise) for the …\n@brief Enable EAP authentication(WiFi Enterprise) for the …\n@brief     Get the Association id assigned to STA by AP\n@brief     Get information of AP to which the device is …\n@brief     Get the negotiated phymode after connection.\n@brief      Get the rssi information of AP to which the …\n@brief  Clear CA certificate for PEAP/TTLS method.\n@brief  Clear client certificate and key.\n@brief  Clear identity for PEAP/TTLS method.\n@brief  Clear new password for MSCHAPv2 method..\n@brief  Clear password for PEAP/TTLS method..\n@brief  Clear username for PEAP/TTLS method. @deprecated …\n@brief  Disable wpa2 enterprise authentication.\n@brief  Enable wpa2 enterprise authentication.\n@brief  Get wpa2 enterprise certs time check(disable or …\n@brief  Set CA certificate for PEAP/TTLS method.\n@brief  Set client certificate and key.\n@brief  Set wpa2 enterprise certs time check(disable or …\n@brief  Set Phase 1 parameters for EAP-FAST\n@brief  Set identity for PEAP/TTLS method.\n@brief  Set new password for MSCHAPv2 method..\n@brief  Set client pac file\n@brief  Set password for PEAP/TTLS method..\n@brief  Set wpa2 enterprise ttls phase2 method\n@brief  Set username for PEAP/TTLS method.\n@brief  enable/disable 192 bit suite b certification checks\n@brief  Use default CA cert bundle for server validation\n@brief  Start WiFi according to current configuration If …\n@brief     Dump WiFi statistics\n@brief  Stop WiFi If mode is WIFI_MODE_STA, it stops …\n@brief     Update WiFi TSF tick interval\n@brief  Disable Wi-Fi WPS function and release resource it …\n@brief     Enable Wi-Fi WPS function.\n@brief     Start WPS session.\n@brief  Check bss trasition capability of connected AP\n@brief  Send bss transition query to connected AP\n@brief Structure representing configuration settings for …\n&lt; Maximum encrypt number of peers supported by espnow\n@brief Get interrupt unmask @param none @return uint32_t …\n@brief Disable interrupts from interrupt controller.\n@brief Enable interrupts from interrupt controller.\n@brief Get the current priority of an interrupt\n@brief Get the current type of an interrupt\n@brief Check if the given interrupt is hardware vectored\nSet interrupt priority in the interrupt controller @param …\nSet interrupt priority threshold. Interrupts with priority …\n@brief Set interrupt type\n@brief Set interrupt vectored\n@brief Disable interrupts from interrupt controller.\n@brief Enable interrupts from interrupt controller.\nSet interrupt priority in the interrupt controller @param …\nSet interrupt priority threshold. Interrupts with priority …\n@brief Set interrupt type\n@brief Ethernet Checksum\n&lt; Ethernet checksum calculate by hardware\n&lt; Ethernet checksum calculate by software\n@brief Ethernet interface\n&lt; Media Independent Interface\n&lt; Reduced Media Independent Interface\n@brief Ethernet duplex mode\n&lt; Ethernet is in full duplex\n&lt; Ethernet is in half duplex\n@brief Ethernet event declarations\n&lt; Ethernet got a valid link\n&lt; Ethernet lost a valid link\n&lt; Ethernet driver start\n&lt; Ethernet driver stop\n@brief Ethernet link status\n&lt; Ethernet link is down\n&lt; Ethernet link is up\n@brief Configuration of Ethernet MAC object\n@brief Internal ethernet EMAC’s DMA available burst sizes\n@brief Auto-negotiation control commands\n@brief Ethernet PHY configuration\n@brief Ethernet speed\n&lt; Ethernet speed is 100Mbps\n&lt; Ethernet speed is 10Mbps\n&lt; Max speed mode (for checking purpose)\n@brief Custom SPI Driver Configuration. This structure …\n@brief   LWIP’s network stack init function for Ethernet …\n@brief   LWIP’s network stack input packet function for …\n@brief  CPU do while loop for some time. In FreeRTOS task, …\n@brief  Get apb_freq value, If value not stored in …")