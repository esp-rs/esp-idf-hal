name: CI

on:
  push:
    branches:
      - master
  pull_request:
  schedule:
    - cron: "50 4 * * *"

env:
  rust_toolchain: nightly
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  compile:
    name: Compile
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - riscv32imc-esp-espidf
          - xtensa-esp32-espidf
          - xtensa-esp32s2-espidf
          - xtensa-esp32s3-espidf
        idf-version:
          - release/v4.4
          - release/v5.0
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v2

      - name: Setup | libncurses5
        run: sudo apt-get install libncurses5

      - name: Setup | Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.rust_toolchain }}
          components: rustfmt, clippy
          default: true
        if: matrix.target == 'riscv32imc-esp-espidf'

      - name: Setup | Std
        run: rustup component add rust-src --toolchain ${{ env.rust_toolchain }}-x86_64-unknown-linux-gnu
        if: matrix.target == 'riscv32imc-esp-espidf'

      - name: Install Rust for Xtensa
        uses: esp-rs/xtensa-toolchain@v1.5
        with:
          default: true
        if: matrix.target != 'riscv32imc-esp-espidf'

      - name: Build | Fmt Check
        run: cargo fmt -- --check

      - name: Build | Clippy
        env:
          ESP_IDF_VERSION: ${{ matrix.idf-version }}
          ESP_IDF_SDKCONFIG_DEFAULTS: $(pwd)/.github/configs/sdkconfig.defaults
          RUSTFLAGS: "${{ matrix.idf-version == 'release/v5.0' && '--cfg espidf_time64' || ''}}"
        run: cargo clippy --no-deps --target ${{ matrix.target }} -Zbuild-std=std,panic_abort -Zbuild-std-features=panic_immediate_abort -- -Dwarnings

      - name: Build | Compile
        env:
          ESP_IDF_VERSION: ${{ matrix.idf-version }}
          ESP_IDF_SDKCONFIG_DEFAULTS: $(pwd)/.github/configs/sdkconfig.defaults
          RUSTFLAGS: "${{ matrix.idf-version == 'release/v5.0' && '--cfg espidf_time64' || ''}}"
        run: cargo build --target ${{ matrix.target }} -Zbuild-std=std,panic_abort -Zbuild-std-features=panic_immediate_abort

      - name: Build | RISCV-ULP-HAL feature
        env:
          ESP_IDF_VERSION: ${{ matrix.idf-version }}
        run: cargo build --features riscv-ulp-hal --no-default-features --target riscv32imc-unknown-none-elf -Zbuild-std=core,panic_abort -Zbuild-std-features=panic_immediate_abort

      - name: Build | Compile, no_std
        env:
          ESP_IDF_VERSION: ${{ matrix.idf-version }}
          ESP_IDF_SDKCONFIG_DEFAULTS: $(pwd)/.github/configs/sdkconfig.defaults
          RUSTFLAGS: "${{ matrix.idf-version == 'release/v5.0' && '--cfg espidf_time64' || ''}}"
        run: cargo build --features esp-idf-sys --no-default-features --target ${{ matrix.target }} -Zbuild-std=std,panic_abort -Zbuild-std-features=panic_immediate_abort

      - name: Build | Compile, no_std, alloc
        env:
          ESP_IDF_VERSION: ${{ matrix.idf-version }}
          ESP_IDF_SDKCONFIG_DEFAULTS: $(pwd)/.github/configs/sdkconfig.defaults
          RUSTFLAGS: "${{ matrix.idf-version == 'release/v5.0' && '--cfg espidf_time64' || ''}}"
        run: cargo build --features alloc,esp-idf-sys --no-default-features --target ${{ matrix.target }} -Zbuild-std=std,panic_abort -Zbuild-std-features=panic_immediate_abort

      - name: Setup | ldproxy
        uses: actions-rs/install@v0.1
        with:
          crate: ldproxy
          version: latest
        if: matrix.target == 'riscv32imc-esp-espidf'

      - name: Build | Examples
        env:
          ESP_IDF_VERSION: ${{ matrix.idf-version }}
          ESP_IDF_SDKCONFIG_DEFAULTS: $(pwd)/.github/configs/sdkconfig.defaults
          RUSTFLAGS: "${{ matrix.idf-version == 'release/v5.0' && '--cfg espidf_time64' || ''}} ${{ matrix.target == 'riscv32imc-esp-espidf' && '-C default-linker-libraries' || ''}}"
        run: cargo build --examples --target ${{ matrix.target }} -Zbuild-std=std,panic_abort -Zbuild-std-features=panic_immediate_abort
