(function() {
    var type_impls = Object.fromEntries([["esp_idf_hal",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Clone for Option&lt;T&gt;<div class=\"where\">where\n    T: Clone,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clone</a>(&amp;self) -&gt; Option&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Option&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a>Read more</a></div></details></div></details>","Clone","esp_idf_hal::sys::__compar_fn_t","esp_idf_hal::sys::shutdown_handler_t","esp_idf_hal::sys::vprintf_like_t","esp_idf_hal::sys::intr_handler_t","esp_idf_hal::sys::esp_cpu_intr_handler_t","esp_idf_hal::sys::esp_deep_sleep_cb_t","esp_idf_hal::sys::esp_deep_sleep_wake_stub_fn_t","esp_idf_hal::sys::TaskFunction_t","esp_idf_hal::sys::multi_heap_walker_cb_t","esp_idf_hal::sys::esp_alloc_failed_hook_t","esp_idf_hal::sys::heap_caps_walker_cb_t","esp_idf_hal::sys::TaskHookFunction_t","esp_idf_hal::sys::StreamBufferCallbackFunction_t","esp_idf_hal::sys::TimerCallbackFunction_t","esp_idf_hal::sys::PendedFunction_t","esp_idf_hal::sys::TlsDeleteCallbackFunction_t","esp_idf_hal::sys::task_wdt_msg_handler","esp_idf_hal::sys::esp_freertos_idle_cb_t","esp_idf_hal::sys::esp_freertos_tick_cb_t","esp_idf_hal::sys::esp_console_cmd_func_t","esp_idf_hal::sys::esp_console_cmd_func_with_context_t","esp_idf_hal::sys::linenoiseCompletionCallback","esp_idf_hal::sys::linenoiseHintsCallback","esp_idf_hal::sys::linenoiseFreeHintsCallback","esp_idf_hal::sys::_sig_func_ptr","esp_idf_hal::sys::sig_t","esp_idf_hal::sys::arg_resetfn","esp_idf_hal::sys::arg_scanfn","esp_idf_hal::sys::arg_checkfn","esp_idf_hal::sys::arg_errorfn","esp_idf_hal::sys::arg_dstr_freefn","esp_idf_hal::sys::arg_cmdfn","esp_idf_hal::sys::arg_comparefn","esp_idf_hal::sys::esp_timer_cb_t","esp_idf_hal::sys::esp_event_handler_t","esp_idf_hal::sys::esp_netif_receive_t","esp_idf_hal::sys::esp_netif_find_predicate_t","esp_idf_hal::sys::esp_netif_callback_fn","esp_idf_hal::sys::wifi_action_rx_cb_t","esp_idf_hal::sys::esp_aes_128_encrypt_t","esp_idf_hal::sys::esp_aes_128_decrypt_t","esp_idf_hal::sys::esp_aes_wrap_t","esp_idf_hal::sys::esp_aes_unwrap_t","esp_idf_hal::sys::esp_hmac_sha256_vector_t","esp_idf_hal::sys::esp_sha256_prf_t","esp_idf_hal::sys::esp_hmac_md5_t","esp_idf_hal::sys::esp_hmac_md5_vector_t","esp_idf_hal::sys::esp_hmac_sha1_t","esp_idf_hal::sys::esp_hmac_sha1_vector_t","esp_idf_hal::sys::esp_sha1_prf_t","esp_idf_hal::sys::esp_sha1_vector_t","esp_idf_hal::sys::esp_pbkdf2_sha1_t","esp_idf_hal::sys::esp_rc4_skip_t","esp_idf_hal::sys::esp_md5_vector_t","esp_idf_hal::sys::esp_aes_encrypt_t","esp_idf_hal::sys::esp_aes_encrypt_init_t","esp_idf_hal::sys::esp_aes_encrypt_deinit_t","esp_idf_hal::sys::esp_aes_decrypt_t","esp_idf_hal::sys::esp_aes_decrypt_init_t","esp_idf_hal::sys::esp_aes_decrypt_deinit_t","esp_idf_hal::sys::esp_omac1_aes_128_t","esp_idf_hal::sys::esp_ccmp_decrypt_t","esp_idf_hal::sys::esp_ccmp_encrypt_t","esp_idf_hal::sys::esp_aes_gmac_t","esp_idf_hal::sys::esp_sha256_vector_t","esp_idf_hal::sys::esp_crc32_le_t","esp_idf_hal::sys::wifi_promiscuous_cb_t","esp_idf_hal::sys::esp_vendor_ie_cb_t","esp_idf_hal::sys::wifi_csi_cb_t","esp_idf_hal::sys::esp_now_recv_cb_t","esp_idf_hal::sys::esp_now_send_cb_t","esp_idf_hal::sys::wifi_netstack_buf_ref_cb_t","esp_idf_hal::sys::wifi_netstack_buf_free_cb_t","esp_idf_hal::sys::wifi_rxcb_t","esp_idf_hal::sys::wifi_mac_time_update_cb_t","esp_idf_hal::sys::wifi_tx_done_cb_t","esp_idf_hal::sys::neighbor_rep_request_cb","esp_idf_hal::sys::transaction_cb_t","esp_idf_hal::sys::gpio_isr_t","esp_idf_hal::sys::dns_found_callback","esp_idf_hal::sys::pbuf_free_custom_fn","esp_idf_hal::sys::netif_init_fn","esp_idf_hal::sys::netif_input_fn","esp_idf_hal::sys::netif_output_fn","esp_idf_hal::sys::netif_output_ip6_fn","esp_idf_hal::sys::netif_linkoutput_fn","esp_idf_hal::sys::netif_status_callback_fn","esp_idf_hal::sys::netif_igmp_mac_filter_fn","esp_idf_hal::sys::netif_mld_mac_filter_fn","esp_idf_hal::sys::netif_ext_callback_fn","esp_idf_hal::sys::init_fn_t","esp_idf_hal::sys::input_fn_t","esp_idf_hal::sys::sntp_sync_time_cb_t","esp_idf_hal::sys::esp_sntp_time_cb_t","esp_idf_hal::sys::ETSTask","esp_idf_hal::sys::ets_idle_cb_t","esp_idf_hal::sys::ETSTimerFunc","esp_idf_hal::sys::ets_isr_t","esp_idf_hal::sys::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_sign_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_key_len_func","esp_idf_hal::sys::mbedtls_x509_crt_ext_cb_t","esp_idf_hal::sys::mbedtls_x509_crt_ca_cb_t","esp_idf_hal::sys::mbedtls_ssl_send_t","esp_idf_hal::sys::mbedtls_ssl_recv_t","esp_idf_hal::sys::mbedtls_ssl_recv_timeout_t","esp_idf_hal::sys::mbedtls_ssl_set_timer_t","esp_idf_hal::sys::mbedtls_ssl_get_timer_t","esp_idf_hal::sys::mbedtls_ssl_cache_get_t","esp_idf_hal::sys::mbedtls_ssl_cache_set_t","esp_idf_hal::sys::mbedtls_ssl_export_keys_t","esp_idf_hal::sys::mbedtls_ssl_hs_cb_t","esp_idf_hal::sys::mbedtls_ssl_ticket_write_t","esp_idf_hal::sys::mbedtls_ssl_ticket_parse_t","esp_idf_hal::sys::mbedtls_ssl_cookie_write_t","esp_idf_hal::sys::mbedtls_ssl_cookie_check_t","esp_idf_hal::sys::mbedtls_entropy_f_source_ptr","esp_idf_hal::sys::http_event_handle_cb","esp_idf_hal::sys::http_client_init_cb_t","esp_idf_hal::sys::connect_func","esp_idf_hal::sys::io_func","esp_idf_hal::sys::io_read_func","esp_idf_hal::sys::trans_func","esp_idf_hal::sys::poll_func","esp_idf_hal::sys::connect_async_func","esp_idf_hal::sys::payload_transfer_func","esp_idf_hal::sys::http_data_cb","esp_idf_hal::sys::http_cb","esp_idf_hal::sys::httpd_free_ctx_fn_t","esp_idf_hal::sys::httpd_open_func_t","esp_idf_hal::sys::httpd_close_func_t","esp_idf_hal::sys::httpd_uri_match_func_t","esp_idf_hal::sys::httpd_err_handler_func_t","esp_idf_hal::sys::httpd_send_func_t","esp_idf_hal::sys::httpd_recv_func_t","esp_idf_hal::sys::httpd_pending_func_t","esp_idf_hal::sys::httpd_work_fn_t","esp_idf_hal::sys::nvs_flash_generate_keys_t","esp_idf_hal::sys::nvs_flash_read_cfg_t","esp_idf_hal::sys::protocomm_req_handler_t","esp_idf_hal::sys::wifi_prov_cb_func_t","esp_idf_hal::sys::adc_continuous_callback_t","esp_idf_hal::sys::gptimer_alarm_cb_t","esp_idf_hal::sys::i2c_master_callback_t","esp_idf_hal::sys::i2c_slave_received_callback_t","esp_idf_hal::sys::i2c_slave_stretch_callback_t","esp_idf_hal::sys::i2s_isr_callback_t","esp_idf_hal::sys::ledc_cb_t","esp_idf_hal::sys::mcpwm_timer_event_cb_t","esp_idf_hal::sys::mcpwm_brake_event_cb_t","esp_idf_hal::sys::mcpwm_fault_event_cb_t","esp_idf_hal::sys::mcpwm_compare_event_cb_t","esp_idf_hal::sys::mcpwm_capture_event_cb_t","esp_idf_hal::sys::rmt_tx_end_fn_t","esp_idf_hal::sys::sample_to_rmt_t","esp_idf_hal::sys::rmt_tx_done_callback_t","esp_idf_hal::sys::rmt_rx_done_callback_t","esp_idf_hal::sys::rmt_encode_simple_cb_t","esp_idf_hal::sys::slave_transaction_cb_t","esp_idf_hal::sys::timer_isr_t","esp_idf_hal::sys::uart_select_notif_callback_t","esp_idf_hal::sys::panic_info_dump_fn_t","esp_idf_hal::sys::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Debug for Option&lt;T&gt;<div class=\"where\">where\n    T: Debug,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">fmt</a>(&amp;self, f: &amp;mut Formatter&lt;'_&gt;) -&gt; Result&lt;(), Error&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a>Read more</a></div></details></div></details>","Debug","esp_idf_hal::sys::__compar_fn_t","esp_idf_hal::sys::shutdown_handler_t","esp_idf_hal::sys::vprintf_like_t","esp_idf_hal::sys::intr_handler_t","esp_idf_hal::sys::esp_cpu_intr_handler_t","esp_idf_hal::sys::esp_deep_sleep_cb_t","esp_idf_hal::sys::esp_deep_sleep_wake_stub_fn_t","esp_idf_hal::sys::TaskFunction_t","esp_idf_hal::sys::multi_heap_walker_cb_t","esp_idf_hal::sys::esp_alloc_failed_hook_t","esp_idf_hal::sys::heap_caps_walker_cb_t","esp_idf_hal::sys::TaskHookFunction_t","esp_idf_hal::sys::StreamBufferCallbackFunction_t","esp_idf_hal::sys::TimerCallbackFunction_t","esp_idf_hal::sys::PendedFunction_t","esp_idf_hal::sys::TlsDeleteCallbackFunction_t","esp_idf_hal::sys::task_wdt_msg_handler","esp_idf_hal::sys::esp_freertos_idle_cb_t","esp_idf_hal::sys::esp_freertos_tick_cb_t","esp_idf_hal::sys::esp_console_cmd_func_t","esp_idf_hal::sys::esp_console_cmd_func_with_context_t","esp_idf_hal::sys::linenoiseCompletionCallback","esp_idf_hal::sys::linenoiseHintsCallback","esp_idf_hal::sys::linenoiseFreeHintsCallback","esp_idf_hal::sys::_sig_func_ptr","esp_idf_hal::sys::sig_t","esp_idf_hal::sys::arg_resetfn","esp_idf_hal::sys::arg_scanfn","esp_idf_hal::sys::arg_checkfn","esp_idf_hal::sys::arg_errorfn","esp_idf_hal::sys::arg_dstr_freefn","esp_idf_hal::sys::arg_cmdfn","esp_idf_hal::sys::arg_comparefn","esp_idf_hal::sys::esp_timer_cb_t","esp_idf_hal::sys::esp_event_handler_t","esp_idf_hal::sys::esp_netif_receive_t","esp_idf_hal::sys::esp_netif_find_predicate_t","esp_idf_hal::sys::esp_netif_callback_fn","esp_idf_hal::sys::wifi_action_rx_cb_t","esp_idf_hal::sys::esp_aes_128_encrypt_t","esp_idf_hal::sys::esp_aes_128_decrypt_t","esp_idf_hal::sys::esp_aes_wrap_t","esp_idf_hal::sys::esp_aes_unwrap_t","esp_idf_hal::sys::esp_hmac_sha256_vector_t","esp_idf_hal::sys::esp_sha256_prf_t","esp_idf_hal::sys::esp_hmac_md5_t","esp_idf_hal::sys::esp_hmac_md5_vector_t","esp_idf_hal::sys::esp_hmac_sha1_t","esp_idf_hal::sys::esp_hmac_sha1_vector_t","esp_idf_hal::sys::esp_sha1_prf_t","esp_idf_hal::sys::esp_sha1_vector_t","esp_idf_hal::sys::esp_pbkdf2_sha1_t","esp_idf_hal::sys::esp_rc4_skip_t","esp_idf_hal::sys::esp_md5_vector_t","esp_idf_hal::sys::esp_aes_encrypt_t","esp_idf_hal::sys::esp_aes_encrypt_init_t","esp_idf_hal::sys::esp_aes_encrypt_deinit_t","esp_idf_hal::sys::esp_aes_decrypt_t","esp_idf_hal::sys::esp_aes_decrypt_init_t","esp_idf_hal::sys::esp_aes_decrypt_deinit_t","esp_idf_hal::sys::esp_omac1_aes_128_t","esp_idf_hal::sys::esp_ccmp_decrypt_t","esp_idf_hal::sys::esp_ccmp_encrypt_t","esp_idf_hal::sys::esp_aes_gmac_t","esp_idf_hal::sys::esp_sha256_vector_t","esp_idf_hal::sys::esp_crc32_le_t","esp_idf_hal::sys::wifi_promiscuous_cb_t","esp_idf_hal::sys::esp_vendor_ie_cb_t","esp_idf_hal::sys::wifi_csi_cb_t","esp_idf_hal::sys::esp_now_recv_cb_t","esp_idf_hal::sys::esp_now_send_cb_t","esp_idf_hal::sys::wifi_netstack_buf_ref_cb_t","esp_idf_hal::sys::wifi_netstack_buf_free_cb_t","esp_idf_hal::sys::wifi_rxcb_t","esp_idf_hal::sys::wifi_mac_time_update_cb_t","esp_idf_hal::sys::wifi_tx_done_cb_t","esp_idf_hal::sys::neighbor_rep_request_cb","esp_idf_hal::sys::transaction_cb_t","esp_idf_hal::sys::gpio_isr_t","esp_idf_hal::sys::dns_found_callback","esp_idf_hal::sys::pbuf_free_custom_fn","esp_idf_hal::sys::netif_init_fn","esp_idf_hal::sys::netif_input_fn","esp_idf_hal::sys::netif_output_fn","esp_idf_hal::sys::netif_output_ip6_fn","esp_idf_hal::sys::netif_linkoutput_fn","esp_idf_hal::sys::netif_status_callback_fn","esp_idf_hal::sys::netif_igmp_mac_filter_fn","esp_idf_hal::sys::netif_mld_mac_filter_fn","esp_idf_hal::sys::netif_ext_callback_fn","esp_idf_hal::sys::init_fn_t","esp_idf_hal::sys::input_fn_t","esp_idf_hal::sys::sntp_sync_time_cb_t","esp_idf_hal::sys::esp_sntp_time_cb_t","esp_idf_hal::sys::ETSTask","esp_idf_hal::sys::ets_idle_cb_t","esp_idf_hal::sys::ETSTimerFunc","esp_idf_hal::sys::ets_isr_t","esp_idf_hal::sys::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_sign_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_key_len_func","esp_idf_hal::sys::mbedtls_x509_crt_ext_cb_t","esp_idf_hal::sys::mbedtls_x509_crt_ca_cb_t","esp_idf_hal::sys::mbedtls_ssl_send_t","esp_idf_hal::sys::mbedtls_ssl_recv_t","esp_idf_hal::sys::mbedtls_ssl_recv_timeout_t","esp_idf_hal::sys::mbedtls_ssl_set_timer_t","esp_idf_hal::sys::mbedtls_ssl_get_timer_t","esp_idf_hal::sys::mbedtls_ssl_cache_get_t","esp_idf_hal::sys::mbedtls_ssl_cache_set_t","esp_idf_hal::sys::mbedtls_ssl_export_keys_t","esp_idf_hal::sys::mbedtls_ssl_hs_cb_t","esp_idf_hal::sys::mbedtls_ssl_ticket_write_t","esp_idf_hal::sys::mbedtls_ssl_ticket_parse_t","esp_idf_hal::sys::mbedtls_ssl_cookie_write_t","esp_idf_hal::sys::mbedtls_ssl_cookie_check_t","esp_idf_hal::sys::mbedtls_entropy_f_source_ptr","esp_idf_hal::sys::http_event_handle_cb","esp_idf_hal::sys::http_client_init_cb_t","esp_idf_hal::sys::connect_func","esp_idf_hal::sys::io_func","esp_idf_hal::sys::io_read_func","esp_idf_hal::sys::trans_func","esp_idf_hal::sys::poll_func","esp_idf_hal::sys::connect_async_func","esp_idf_hal::sys::payload_transfer_func","esp_idf_hal::sys::http_data_cb","esp_idf_hal::sys::http_cb","esp_idf_hal::sys::httpd_free_ctx_fn_t","esp_idf_hal::sys::httpd_open_func_t","esp_idf_hal::sys::httpd_close_func_t","esp_idf_hal::sys::httpd_uri_match_func_t","esp_idf_hal::sys::httpd_err_handler_func_t","esp_idf_hal::sys::httpd_send_func_t","esp_idf_hal::sys::httpd_recv_func_t","esp_idf_hal::sys::httpd_pending_func_t","esp_idf_hal::sys::httpd_work_fn_t","esp_idf_hal::sys::nvs_flash_generate_keys_t","esp_idf_hal::sys::nvs_flash_read_cfg_t","esp_idf_hal::sys::protocomm_req_handler_t","esp_idf_hal::sys::wifi_prov_cb_func_t","esp_idf_hal::sys::adc_continuous_callback_t","esp_idf_hal::sys::gptimer_alarm_cb_t","esp_idf_hal::sys::i2c_master_callback_t","esp_idf_hal::sys::i2c_slave_received_callback_t","esp_idf_hal::sys::i2c_slave_stretch_callback_t","esp_idf_hal::sys::i2s_isr_callback_t","esp_idf_hal::sys::ledc_cb_t","esp_idf_hal::sys::mcpwm_timer_event_cb_t","esp_idf_hal::sys::mcpwm_brake_event_cb_t","esp_idf_hal::sys::mcpwm_fault_event_cb_t","esp_idf_hal::sys::mcpwm_compare_event_cb_t","esp_idf_hal::sys::mcpwm_capture_event_cb_t","esp_idf_hal::sys::rmt_tx_end_fn_t","esp_idf_hal::sys::sample_to_rmt_t","esp_idf_hal::sys::rmt_tx_done_callback_t","esp_idf_hal::sys::rmt_rx_done_callback_t","esp_idf_hal::sys::rmt_encode_simple_cb_t","esp_idf_hal::sys::slave_transaction_cb_t","esp_idf_hal::sys::timer_isr_t","esp_idf_hal::sys::uart_select_notif_callback_t","esp_idf_hal::sys::panic_info_dump_fn_t","esp_idf_hal::sys::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for Option&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; Option&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns [<code>None</code>][Option::None].</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre></div>\n</div></details></div></details>","Default","esp_idf_hal::sys::__compar_fn_t","esp_idf_hal::sys::shutdown_handler_t","esp_idf_hal::sys::vprintf_like_t","esp_idf_hal::sys::intr_handler_t","esp_idf_hal::sys::esp_cpu_intr_handler_t","esp_idf_hal::sys::esp_deep_sleep_cb_t","esp_idf_hal::sys::esp_deep_sleep_wake_stub_fn_t","esp_idf_hal::sys::TaskFunction_t","esp_idf_hal::sys::multi_heap_walker_cb_t","esp_idf_hal::sys::esp_alloc_failed_hook_t","esp_idf_hal::sys::heap_caps_walker_cb_t","esp_idf_hal::sys::TaskHookFunction_t","esp_idf_hal::sys::StreamBufferCallbackFunction_t","esp_idf_hal::sys::TimerCallbackFunction_t","esp_idf_hal::sys::PendedFunction_t","esp_idf_hal::sys::TlsDeleteCallbackFunction_t","esp_idf_hal::sys::task_wdt_msg_handler","esp_idf_hal::sys::esp_freertos_idle_cb_t","esp_idf_hal::sys::esp_freertos_tick_cb_t","esp_idf_hal::sys::esp_console_cmd_func_t","esp_idf_hal::sys::esp_console_cmd_func_with_context_t","esp_idf_hal::sys::linenoiseCompletionCallback","esp_idf_hal::sys::linenoiseHintsCallback","esp_idf_hal::sys::linenoiseFreeHintsCallback","esp_idf_hal::sys::_sig_func_ptr","esp_idf_hal::sys::sig_t","esp_idf_hal::sys::arg_resetfn","esp_idf_hal::sys::arg_scanfn","esp_idf_hal::sys::arg_checkfn","esp_idf_hal::sys::arg_errorfn","esp_idf_hal::sys::arg_dstr_freefn","esp_idf_hal::sys::arg_cmdfn","esp_idf_hal::sys::arg_comparefn","esp_idf_hal::sys::esp_timer_cb_t","esp_idf_hal::sys::esp_event_handler_t","esp_idf_hal::sys::esp_netif_receive_t","esp_idf_hal::sys::esp_netif_find_predicate_t","esp_idf_hal::sys::esp_netif_callback_fn","esp_idf_hal::sys::wifi_action_rx_cb_t","esp_idf_hal::sys::esp_aes_128_encrypt_t","esp_idf_hal::sys::esp_aes_128_decrypt_t","esp_idf_hal::sys::esp_aes_wrap_t","esp_idf_hal::sys::esp_aes_unwrap_t","esp_idf_hal::sys::esp_hmac_sha256_vector_t","esp_idf_hal::sys::esp_sha256_prf_t","esp_idf_hal::sys::esp_hmac_md5_t","esp_idf_hal::sys::esp_hmac_md5_vector_t","esp_idf_hal::sys::esp_hmac_sha1_t","esp_idf_hal::sys::esp_hmac_sha1_vector_t","esp_idf_hal::sys::esp_sha1_prf_t","esp_idf_hal::sys::esp_sha1_vector_t","esp_idf_hal::sys::esp_pbkdf2_sha1_t","esp_idf_hal::sys::esp_rc4_skip_t","esp_idf_hal::sys::esp_md5_vector_t","esp_idf_hal::sys::esp_aes_encrypt_t","esp_idf_hal::sys::esp_aes_encrypt_init_t","esp_idf_hal::sys::esp_aes_encrypt_deinit_t","esp_idf_hal::sys::esp_aes_decrypt_t","esp_idf_hal::sys::esp_aes_decrypt_init_t","esp_idf_hal::sys::esp_aes_decrypt_deinit_t","esp_idf_hal::sys::esp_omac1_aes_128_t","esp_idf_hal::sys::esp_ccmp_decrypt_t","esp_idf_hal::sys::esp_ccmp_encrypt_t","esp_idf_hal::sys::esp_aes_gmac_t","esp_idf_hal::sys::esp_sha256_vector_t","esp_idf_hal::sys::esp_crc32_le_t","esp_idf_hal::sys::wifi_promiscuous_cb_t","esp_idf_hal::sys::esp_vendor_ie_cb_t","esp_idf_hal::sys::wifi_csi_cb_t","esp_idf_hal::sys::esp_now_recv_cb_t","esp_idf_hal::sys::esp_now_send_cb_t","esp_idf_hal::sys::wifi_netstack_buf_ref_cb_t","esp_idf_hal::sys::wifi_netstack_buf_free_cb_t","esp_idf_hal::sys::wifi_rxcb_t","esp_idf_hal::sys::wifi_mac_time_update_cb_t","esp_idf_hal::sys::wifi_tx_done_cb_t","esp_idf_hal::sys::neighbor_rep_request_cb","esp_idf_hal::sys::transaction_cb_t","esp_idf_hal::sys::gpio_isr_t","esp_idf_hal::sys::dns_found_callback","esp_idf_hal::sys::pbuf_free_custom_fn","esp_idf_hal::sys::netif_init_fn","esp_idf_hal::sys::netif_input_fn","esp_idf_hal::sys::netif_output_fn","esp_idf_hal::sys::netif_output_ip6_fn","esp_idf_hal::sys::netif_linkoutput_fn","esp_idf_hal::sys::netif_status_callback_fn","esp_idf_hal::sys::netif_igmp_mac_filter_fn","esp_idf_hal::sys::netif_mld_mac_filter_fn","esp_idf_hal::sys::netif_ext_callback_fn","esp_idf_hal::sys::init_fn_t","esp_idf_hal::sys::input_fn_t","esp_idf_hal::sys::sntp_sync_time_cb_t","esp_idf_hal::sys::esp_sntp_time_cb_t","esp_idf_hal::sys::ETSTask","esp_idf_hal::sys::ets_idle_cb_t","esp_idf_hal::sys::ETSTimerFunc","esp_idf_hal::sys::ets_isr_t","esp_idf_hal::sys::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_sign_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_key_len_func","esp_idf_hal::sys::mbedtls_x509_crt_ext_cb_t","esp_idf_hal::sys::mbedtls_x509_crt_ca_cb_t","esp_idf_hal::sys::mbedtls_ssl_send_t","esp_idf_hal::sys::mbedtls_ssl_recv_t","esp_idf_hal::sys::mbedtls_ssl_recv_timeout_t","esp_idf_hal::sys::mbedtls_ssl_set_timer_t","esp_idf_hal::sys::mbedtls_ssl_get_timer_t","esp_idf_hal::sys::mbedtls_ssl_cache_get_t","esp_idf_hal::sys::mbedtls_ssl_cache_set_t","esp_idf_hal::sys::mbedtls_ssl_export_keys_t","esp_idf_hal::sys::mbedtls_ssl_hs_cb_t","esp_idf_hal::sys::mbedtls_ssl_ticket_write_t","esp_idf_hal::sys::mbedtls_ssl_ticket_parse_t","esp_idf_hal::sys::mbedtls_ssl_cookie_write_t","esp_idf_hal::sys::mbedtls_ssl_cookie_check_t","esp_idf_hal::sys::mbedtls_entropy_f_source_ptr","esp_idf_hal::sys::http_event_handle_cb","esp_idf_hal::sys::http_client_init_cb_t","esp_idf_hal::sys::connect_func","esp_idf_hal::sys::io_func","esp_idf_hal::sys::io_read_func","esp_idf_hal::sys::trans_func","esp_idf_hal::sys::poll_func","esp_idf_hal::sys::connect_async_func","esp_idf_hal::sys::payload_transfer_func","esp_idf_hal::sys::http_data_cb","esp_idf_hal::sys::http_cb","esp_idf_hal::sys::httpd_free_ctx_fn_t","esp_idf_hal::sys::httpd_open_func_t","esp_idf_hal::sys::httpd_close_func_t","esp_idf_hal::sys::httpd_uri_match_func_t","esp_idf_hal::sys::httpd_err_handler_func_t","esp_idf_hal::sys::httpd_send_func_t","esp_idf_hal::sys::httpd_recv_func_t","esp_idf_hal::sys::httpd_pending_func_t","esp_idf_hal::sys::httpd_work_fn_t","esp_idf_hal::sys::nvs_flash_generate_keys_t","esp_idf_hal::sys::nvs_flash_read_cfg_t","esp_idf_hal::sys::protocomm_req_handler_t","esp_idf_hal::sys::wifi_prov_cb_func_t","esp_idf_hal::sys::adc_continuous_callback_t","esp_idf_hal::sys::gptimer_alarm_cb_t","esp_idf_hal::sys::i2c_master_callback_t","esp_idf_hal::sys::i2c_slave_received_callback_t","esp_idf_hal::sys::i2c_slave_stretch_callback_t","esp_idf_hal::sys::i2s_isr_callback_t","esp_idf_hal::sys::ledc_cb_t","esp_idf_hal::sys::mcpwm_timer_event_cb_t","esp_idf_hal::sys::mcpwm_brake_event_cb_t","esp_idf_hal::sys::mcpwm_fault_event_cb_t","esp_idf_hal::sys::mcpwm_compare_event_cb_t","esp_idf_hal::sys::mcpwm_capture_event_cb_t","esp_idf_hal::sys::rmt_tx_end_fn_t","esp_idf_hal::sys::sample_to_rmt_t","esp_idf_hal::sys::rmt_tx_done_callback_t","esp_idf_hal::sys::rmt_rx_done_callback_t","esp_idf_hal::sys::rmt_encode_simple_cb_t","esp_idf_hal::sys::slave_transaction_cb_t","esp_idf_hal::sys::timer_isr_t","esp_idf_hal::sys::uart_select_notif_callback_t","esp_idf_hal::sys::panic_info_dump_fn_t","esp_idf_hal::sys::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.12.0\">1.12.0</span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; From&lt;T&gt; for Option&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from</a>(val: T) -&gt; Option&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new [<code>Some</code>].</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre></div>\n</div></details></div></details>","From<T>","esp_idf_hal::sys::__compar_fn_t","esp_idf_hal::sys::shutdown_handler_t","esp_idf_hal::sys::vprintf_like_t","esp_idf_hal::sys::intr_handler_t","esp_idf_hal::sys::esp_cpu_intr_handler_t","esp_idf_hal::sys::esp_deep_sleep_cb_t","esp_idf_hal::sys::esp_deep_sleep_wake_stub_fn_t","esp_idf_hal::sys::TaskFunction_t","esp_idf_hal::sys::multi_heap_walker_cb_t","esp_idf_hal::sys::esp_alloc_failed_hook_t","esp_idf_hal::sys::heap_caps_walker_cb_t","esp_idf_hal::sys::TaskHookFunction_t","esp_idf_hal::sys::StreamBufferCallbackFunction_t","esp_idf_hal::sys::TimerCallbackFunction_t","esp_idf_hal::sys::PendedFunction_t","esp_idf_hal::sys::TlsDeleteCallbackFunction_t","esp_idf_hal::sys::task_wdt_msg_handler","esp_idf_hal::sys::esp_freertos_idle_cb_t","esp_idf_hal::sys::esp_freertos_tick_cb_t","esp_idf_hal::sys::esp_console_cmd_func_t","esp_idf_hal::sys::esp_console_cmd_func_with_context_t","esp_idf_hal::sys::linenoiseCompletionCallback","esp_idf_hal::sys::linenoiseHintsCallback","esp_idf_hal::sys::linenoiseFreeHintsCallback","esp_idf_hal::sys::_sig_func_ptr","esp_idf_hal::sys::sig_t","esp_idf_hal::sys::arg_resetfn","esp_idf_hal::sys::arg_scanfn","esp_idf_hal::sys::arg_checkfn","esp_idf_hal::sys::arg_errorfn","esp_idf_hal::sys::arg_dstr_freefn","esp_idf_hal::sys::arg_cmdfn","esp_idf_hal::sys::arg_comparefn","esp_idf_hal::sys::esp_timer_cb_t","esp_idf_hal::sys::esp_event_handler_t","esp_idf_hal::sys::esp_netif_receive_t","esp_idf_hal::sys::esp_netif_find_predicate_t","esp_idf_hal::sys::esp_netif_callback_fn","esp_idf_hal::sys::wifi_action_rx_cb_t","esp_idf_hal::sys::esp_aes_128_encrypt_t","esp_idf_hal::sys::esp_aes_128_decrypt_t","esp_idf_hal::sys::esp_aes_wrap_t","esp_idf_hal::sys::esp_aes_unwrap_t","esp_idf_hal::sys::esp_hmac_sha256_vector_t","esp_idf_hal::sys::esp_sha256_prf_t","esp_idf_hal::sys::esp_hmac_md5_t","esp_idf_hal::sys::esp_hmac_md5_vector_t","esp_idf_hal::sys::esp_hmac_sha1_t","esp_idf_hal::sys::esp_hmac_sha1_vector_t","esp_idf_hal::sys::esp_sha1_prf_t","esp_idf_hal::sys::esp_sha1_vector_t","esp_idf_hal::sys::esp_pbkdf2_sha1_t","esp_idf_hal::sys::esp_rc4_skip_t","esp_idf_hal::sys::esp_md5_vector_t","esp_idf_hal::sys::esp_aes_encrypt_t","esp_idf_hal::sys::esp_aes_encrypt_init_t","esp_idf_hal::sys::esp_aes_encrypt_deinit_t","esp_idf_hal::sys::esp_aes_decrypt_t","esp_idf_hal::sys::esp_aes_decrypt_init_t","esp_idf_hal::sys::esp_aes_decrypt_deinit_t","esp_idf_hal::sys::esp_omac1_aes_128_t","esp_idf_hal::sys::esp_ccmp_decrypt_t","esp_idf_hal::sys::esp_ccmp_encrypt_t","esp_idf_hal::sys::esp_aes_gmac_t","esp_idf_hal::sys::esp_sha256_vector_t","esp_idf_hal::sys::esp_crc32_le_t","esp_idf_hal::sys::wifi_promiscuous_cb_t","esp_idf_hal::sys::esp_vendor_ie_cb_t","esp_idf_hal::sys::wifi_csi_cb_t","esp_idf_hal::sys::esp_now_recv_cb_t","esp_idf_hal::sys::esp_now_send_cb_t","esp_idf_hal::sys::wifi_netstack_buf_ref_cb_t","esp_idf_hal::sys::wifi_netstack_buf_free_cb_t","esp_idf_hal::sys::wifi_rxcb_t","esp_idf_hal::sys::wifi_mac_time_update_cb_t","esp_idf_hal::sys::wifi_tx_done_cb_t","esp_idf_hal::sys::neighbor_rep_request_cb","esp_idf_hal::sys::transaction_cb_t","esp_idf_hal::sys::gpio_isr_t","esp_idf_hal::sys::dns_found_callback","esp_idf_hal::sys::pbuf_free_custom_fn","esp_idf_hal::sys::netif_init_fn","esp_idf_hal::sys::netif_input_fn","esp_idf_hal::sys::netif_output_fn","esp_idf_hal::sys::netif_output_ip6_fn","esp_idf_hal::sys::netif_linkoutput_fn","esp_idf_hal::sys::netif_status_callback_fn","esp_idf_hal::sys::netif_igmp_mac_filter_fn","esp_idf_hal::sys::netif_mld_mac_filter_fn","esp_idf_hal::sys::netif_ext_callback_fn","esp_idf_hal::sys::init_fn_t","esp_idf_hal::sys::input_fn_t","esp_idf_hal::sys::sntp_sync_time_cb_t","esp_idf_hal::sys::esp_sntp_time_cb_t","esp_idf_hal::sys::ETSTask","esp_idf_hal::sys::ets_idle_cb_t","esp_idf_hal::sys::ETSTimerFunc","esp_idf_hal::sys::ets_isr_t","esp_idf_hal::sys::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_sign_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_key_len_func","esp_idf_hal::sys::mbedtls_x509_crt_ext_cb_t","esp_idf_hal::sys::mbedtls_x509_crt_ca_cb_t","esp_idf_hal::sys::mbedtls_ssl_send_t","esp_idf_hal::sys::mbedtls_ssl_recv_t","esp_idf_hal::sys::mbedtls_ssl_recv_timeout_t","esp_idf_hal::sys::mbedtls_ssl_set_timer_t","esp_idf_hal::sys::mbedtls_ssl_get_timer_t","esp_idf_hal::sys::mbedtls_ssl_cache_get_t","esp_idf_hal::sys::mbedtls_ssl_cache_set_t","esp_idf_hal::sys::mbedtls_ssl_export_keys_t","esp_idf_hal::sys::mbedtls_ssl_hs_cb_t","esp_idf_hal::sys::mbedtls_ssl_ticket_write_t","esp_idf_hal::sys::mbedtls_ssl_ticket_parse_t","esp_idf_hal::sys::mbedtls_ssl_cookie_write_t","esp_idf_hal::sys::mbedtls_ssl_cookie_check_t","esp_idf_hal::sys::mbedtls_entropy_f_source_ptr","esp_idf_hal::sys::http_event_handle_cb","esp_idf_hal::sys::http_client_init_cb_t","esp_idf_hal::sys::connect_func","esp_idf_hal::sys::io_func","esp_idf_hal::sys::io_read_func","esp_idf_hal::sys::trans_func","esp_idf_hal::sys::poll_func","esp_idf_hal::sys::connect_async_func","esp_idf_hal::sys::payload_transfer_func","esp_idf_hal::sys::http_data_cb","esp_idf_hal::sys::http_cb","esp_idf_hal::sys::httpd_free_ctx_fn_t","esp_idf_hal::sys::httpd_open_func_t","esp_idf_hal::sys::httpd_close_func_t","esp_idf_hal::sys::httpd_uri_match_func_t","esp_idf_hal::sys::httpd_err_handler_func_t","esp_idf_hal::sys::httpd_send_func_t","esp_idf_hal::sys::httpd_recv_func_t","esp_idf_hal::sys::httpd_pending_func_t","esp_idf_hal::sys::httpd_work_fn_t","esp_idf_hal::sys::nvs_flash_generate_keys_t","esp_idf_hal::sys::nvs_flash_read_cfg_t","esp_idf_hal::sys::protocomm_req_handler_t","esp_idf_hal::sys::wifi_prov_cb_func_t","esp_idf_hal::sys::adc_continuous_callback_t","esp_idf_hal::sys::gptimer_alarm_cb_t","esp_idf_hal::sys::i2c_master_callback_t","esp_idf_hal::sys::i2c_slave_received_callback_t","esp_idf_hal::sys::i2c_slave_stretch_callback_t","esp_idf_hal::sys::i2s_isr_callback_t","esp_idf_hal::sys::ledc_cb_t","esp_idf_hal::sys::mcpwm_timer_event_cb_t","esp_idf_hal::sys::mcpwm_brake_event_cb_t","esp_idf_hal::sys::mcpwm_fault_event_cb_t","esp_idf_hal::sys::mcpwm_compare_event_cb_t","esp_idf_hal::sys::mcpwm_capture_event_cb_t","esp_idf_hal::sys::rmt_tx_end_fn_t","esp_idf_hal::sys::sample_to_rmt_t","esp_idf_hal::sys::rmt_tx_done_callback_t","esp_idf_hal::sys::rmt_rx_done_callback_t","esp_idf_hal::sys::rmt_encode_simple_cb_t","esp_idf_hal::sys::slave_transaction_cb_t","esp_idf_hal::sys::timer_isr_t","esp_idf_hal::sys::uart_select_notif_callback_t","esp_idf_hal::sys::panic_info_dump_fn_t","esp_idf_hal::sys::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; FromIterator&lt;Option&lt;A&gt;&gt; for Option&lt;V&gt;<div class=\"where\">where\n    V: FromIterator&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; Option&lt;V&gt;<div class=\"where\">where\n    I: IntoIterator&lt;Item = Option&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the [<code>Iterator</code>]: if it is [<code>None</code>][Option::None],\nno further elements are taken, and the [<code>None</code>][Option::None] is\nreturned. Should no [<code>None</code>][Option::None] occur, a container of type\n<code>V</code> containing the values of each [<code>Option</code>] is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Option<A>>","esp_idf_hal::sys::__compar_fn_t","esp_idf_hal::sys::shutdown_handler_t","esp_idf_hal::sys::vprintf_like_t","esp_idf_hal::sys::intr_handler_t","esp_idf_hal::sys::esp_cpu_intr_handler_t","esp_idf_hal::sys::esp_deep_sleep_cb_t","esp_idf_hal::sys::esp_deep_sleep_wake_stub_fn_t","esp_idf_hal::sys::TaskFunction_t","esp_idf_hal::sys::multi_heap_walker_cb_t","esp_idf_hal::sys::esp_alloc_failed_hook_t","esp_idf_hal::sys::heap_caps_walker_cb_t","esp_idf_hal::sys::TaskHookFunction_t","esp_idf_hal::sys::StreamBufferCallbackFunction_t","esp_idf_hal::sys::TimerCallbackFunction_t","esp_idf_hal::sys::PendedFunction_t","esp_idf_hal::sys::TlsDeleteCallbackFunction_t","esp_idf_hal::sys::task_wdt_msg_handler","esp_idf_hal::sys::esp_freertos_idle_cb_t","esp_idf_hal::sys::esp_freertos_tick_cb_t","esp_idf_hal::sys::esp_console_cmd_func_t","esp_idf_hal::sys::esp_console_cmd_func_with_context_t","esp_idf_hal::sys::linenoiseCompletionCallback","esp_idf_hal::sys::linenoiseHintsCallback","esp_idf_hal::sys::linenoiseFreeHintsCallback","esp_idf_hal::sys::_sig_func_ptr","esp_idf_hal::sys::sig_t","esp_idf_hal::sys::arg_resetfn","esp_idf_hal::sys::arg_scanfn","esp_idf_hal::sys::arg_checkfn","esp_idf_hal::sys::arg_errorfn","esp_idf_hal::sys::arg_dstr_freefn","esp_idf_hal::sys::arg_cmdfn","esp_idf_hal::sys::arg_comparefn","esp_idf_hal::sys::esp_timer_cb_t","esp_idf_hal::sys::esp_event_handler_t","esp_idf_hal::sys::esp_netif_receive_t","esp_idf_hal::sys::esp_netif_find_predicate_t","esp_idf_hal::sys::esp_netif_callback_fn","esp_idf_hal::sys::wifi_action_rx_cb_t","esp_idf_hal::sys::esp_aes_128_encrypt_t","esp_idf_hal::sys::esp_aes_128_decrypt_t","esp_idf_hal::sys::esp_aes_wrap_t","esp_idf_hal::sys::esp_aes_unwrap_t","esp_idf_hal::sys::esp_hmac_sha256_vector_t","esp_idf_hal::sys::esp_sha256_prf_t","esp_idf_hal::sys::esp_hmac_md5_t","esp_idf_hal::sys::esp_hmac_md5_vector_t","esp_idf_hal::sys::esp_hmac_sha1_t","esp_idf_hal::sys::esp_hmac_sha1_vector_t","esp_idf_hal::sys::esp_sha1_prf_t","esp_idf_hal::sys::esp_sha1_vector_t","esp_idf_hal::sys::esp_pbkdf2_sha1_t","esp_idf_hal::sys::esp_rc4_skip_t","esp_idf_hal::sys::esp_md5_vector_t","esp_idf_hal::sys::esp_aes_encrypt_t","esp_idf_hal::sys::esp_aes_encrypt_init_t","esp_idf_hal::sys::esp_aes_encrypt_deinit_t","esp_idf_hal::sys::esp_aes_decrypt_t","esp_idf_hal::sys::esp_aes_decrypt_init_t","esp_idf_hal::sys::esp_aes_decrypt_deinit_t","esp_idf_hal::sys::esp_omac1_aes_128_t","esp_idf_hal::sys::esp_ccmp_decrypt_t","esp_idf_hal::sys::esp_ccmp_encrypt_t","esp_idf_hal::sys::esp_aes_gmac_t","esp_idf_hal::sys::esp_sha256_vector_t","esp_idf_hal::sys::esp_crc32_le_t","esp_idf_hal::sys::wifi_promiscuous_cb_t","esp_idf_hal::sys::esp_vendor_ie_cb_t","esp_idf_hal::sys::wifi_csi_cb_t","esp_idf_hal::sys::esp_now_recv_cb_t","esp_idf_hal::sys::esp_now_send_cb_t","esp_idf_hal::sys::wifi_netstack_buf_ref_cb_t","esp_idf_hal::sys::wifi_netstack_buf_free_cb_t","esp_idf_hal::sys::wifi_rxcb_t","esp_idf_hal::sys::wifi_mac_time_update_cb_t","esp_idf_hal::sys::wifi_tx_done_cb_t","esp_idf_hal::sys::neighbor_rep_request_cb","esp_idf_hal::sys::transaction_cb_t","esp_idf_hal::sys::gpio_isr_t","esp_idf_hal::sys::dns_found_callback","esp_idf_hal::sys::pbuf_free_custom_fn","esp_idf_hal::sys::netif_init_fn","esp_idf_hal::sys::netif_input_fn","esp_idf_hal::sys::netif_output_fn","esp_idf_hal::sys::netif_output_ip6_fn","esp_idf_hal::sys::netif_linkoutput_fn","esp_idf_hal::sys::netif_status_callback_fn","esp_idf_hal::sys::netif_igmp_mac_filter_fn","esp_idf_hal::sys::netif_mld_mac_filter_fn","esp_idf_hal::sys::netif_ext_callback_fn","esp_idf_hal::sys::init_fn_t","esp_idf_hal::sys::input_fn_t","esp_idf_hal::sys::sntp_sync_time_cb_t","esp_idf_hal::sys::esp_sntp_time_cb_t","esp_idf_hal::sys::ETSTask","esp_idf_hal::sys::ets_idle_cb_t","esp_idf_hal::sys::ETSTimerFunc","esp_idf_hal::sys::ets_isr_t","esp_idf_hal::sys::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_sign_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_key_len_func","esp_idf_hal::sys::mbedtls_x509_crt_ext_cb_t","esp_idf_hal::sys::mbedtls_x509_crt_ca_cb_t","esp_idf_hal::sys::mbedtls_ssl_send_t","esp_idf_hal::sys::mbedtls_ssl_recv_t","esp_idf_hal::sys::mbedtls_ssl_recv_timeout_t","esp_idf_hal::sys::mbedtls_ssl_set_timer_t","esp_idf_hal::sys::mbedtls_ssl_get_timer_t","esp_idf_hal::sys::mbedtls_ssl_cache_get_t","esp_idf_hal::sys::mbedtls_ssl_cache_set_t","esp_idf_hal::sys::mbedtls_ssl_export_keys_t","esp_idf_hal::sys::mbedtls_ssl_hs_cb_t","esp_idf_hal::sys::mbedtls_ssl_ticket_write_t","esp_idf_hal::sys::mbedtls_ssl_ticket_parse_t","esp_idf_hal::sys::mbedtls_ssl_cookie_write_t","esp_idf_hal::sys::mbedtls_ssl_cookie_check_t","esp_idf_hal::sys::mbedtls_entropy_f_source_ptr","esp_idf_hal::sys::http_event_handle_cb","esp_idf_hal::sys::http_client_init_cb_t","esp_idf_hal::sys::connect_func","esp_idf_hal::sys::io_func","esp_idf_hal::sys::io_read_func","esp_idf_hal::sys::trans_func","esp_idf_hal::sys::poll_func","esp_idf_hal::sys::connect_async_func","esp_idf_hal::sys::payload_transfer_func","esp_idf_hal::sys::http_data_cb","esp_idf_hal::sys::http_cb","esp_idf_hal::sys::httpd_free_ctx_fn_t","esp_idf_hal::sys::httpd_open_func_t","esp_idf_hal::sys::httpd_close_func_t","esp_idf_hal::sys::httpd_uri_match_func_t","esp_idf_hal::sys::httpd_err_handler_func_t","esp_idf_hal::sys::httpd_send_func_t","esp_idf_hal::sys::httpd_recv_func_t","esp_idf_hal::sys::httpd_pending_func_t","esp_idf_hal::sys::httpd_work_fn_t","esp_idf_hal::sys::nvs_flash_generate_keys_t","esp_idf_hal::sys::nvs_flash_read_cfg_t","esp_idf_hal::sys::protocomm_req_handler_t","esp_idf_hal::sys::wifi_prov_cb_func_t","esp_idf_hal::sys::adc_continuous_callback_t","esp_idf_hal::sys::gptimer_alarm_cb_t","esp_idf_hal::sys::i2c_master_callback_t","esp_idf_hal::sys::i2c_slave_received_callback_t","esp_idf_hal::sys::i2c_slave_stretch_callback_t","esp_idf_hal::sys::i2s_isr_callback_t","esp_idf_hal::sys::ledc_cb_t","esp_idf_hal::sys::mcpwm_timer_event_cb_t","esp_idf_hal::sys::mcpwm_brake_event_cb_t","esp_idf_hal::sys::mcpwm_fault_event_cb_t","esp_idf_hal::sys::mcpwm_compare_event_cb_t","esp_idf_hal::sys::mcpwm_capture_event_cb_t","esp_idf_hal::sys::rmt_tx_end_fn_t","esp_idf_hal::sys::sample_to_rmt_t","esp_idf_hal::sys::rmt_tx_done_callback_t","esp_idf_hal::sys::rmt_rx_done_callback_t","esp_idf_hal::sys::rmt_encode_simple_cb_t","esp_idf_hal::sys::slave_transaction_cb_t","esp_idf_hal::sys::timer_isr_t","esp_idf_hal::sys::uart_select_notif_callback_t","esp_idf_hal::sys::panic_info_dump_fn_t","esp_idf_hal::sys::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3COption%3CInfallible%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-FromResidual%3COption%3CInfallible%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; FromResidual&lt;Option&lt;Infallible&gt;&gt; for Option&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_residual</a>(residual: Option&lt;Infallible&gt;) -&gt; Option&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a>Read more</a></div></details></div></details>","FromResidual<Option<Infallible>>","esp_idf_hal::sys::__compar_fn_t","esp_idf_hal::sys::shutdown_handler_t","esp_idf_hal::sys::vprintf_like_t","esp_idf_hal::sys::intr_handler_t","esp_idf_hal::sys::esp_cpu_intr_handler_t","esp_idf_hal::sys::esp_deep_sleep_cb_t","esp_idf_hal::sys::esp_deep_sleep_wake_stub_fn_t","esp_idf_hal::sys::TaskFunction_t","esp_idf_hal::sys::multi_heap_walker_cb_t","esp_idf_hal::sys::esp_alloc_failed_hook_t","esp_idf_hal::sys::heap_caps_walker_cb_t","esp_idf_hal::sys::TaskHookFunction_t","esp_idf_hal::sys::StreamBufferCallbackFunction_t","esp_idf_hal::sys::TimerCallbackFunction_t","esp_idf_hal::sys::PendedFunction_t","esp_idf_hal::sys::TlsDeleteCallbackFunction_t","esp_idf_hal::sys::task_wdt_msg_handler","esp_idf_hal::sys::esp_freertos_idle_cb_t","esp_idf_hal::sys::esp_freertos_tick_cb_t","esp_idf_hal::sys::esp_console_cmd_func_t","esp_idf_hal::sys::esp_console_cmd_func_with_context_t","esp_idf_hal::sys::linenoiseCompletionCallback","esp_idf_hal::sys::linenoiseHintsCallback","esp_idf_hal::sys::linenoiseFreeHintsCallback","esp_idf_hal::sys::_sig_func_ptr","esp_idf_hal::sys::sig_t","esp_idf_hal::sys::arg_resetfn","esp_idf_hal::sys::arg_scanfn","esp_idf_hal::sys::arg_checkfn","esp_idf_hal::sys::arg_errorfn","esp_idf_hal::sys::arg_dstr_freefn","esp_idf_hal::sys::arg_cmdfn","esp_idf_hal::sys::arg_comparefn","esp_idf_hal::sys::esp_timer_cb_t","esp_idf_hal::sys::esp_event_handler_t","esp_idf_hal::sys::esp_netif_receive_t","esp_idf_hal::sys::esp_netif_find_predicate_t","esp_idf_hal::sys::esp_netif_callback_fn","esp_idf_hal::sys::wifi_action_rx_cb_t","esp_idf_hal::sys::esp_aes_128_encrypt_t","esp_idf_hal::sys::esp_aes_128_decrypt_t","esp_idf_hal::sys::esp_aes_wrap_t","esp_idf_hal::sys::esp_aes_unwrap_t","esp_idf_hal::sys::esp_hmac_sha256_vector_t","esp_idf_hal::sys::esp_sha256_prf_t","esp_idf_hal::sys::esp_hmac_md5_t","esp_idf_hal::sys::esp_hmac_md5_vector_t","esp_idf_hal::sys::esp_hmac_sha1_t","esp_idf_hal::sys::esp_hmac_sha1_vector_t","esp_idf_hal::sys::esp_sha1_prf_t","esp_idf_hal::sys::esp_sha1_vector_t","esp_idf_hal::sys::esp_pbkdf2_sha1_t","esp_idf_hal::sys::esp_rc4_skip_t","esp_idf_hal::sys::esp_md5_vector_t","esp_idf_hal::sys::esp_aes_encrypt_t","esp_idf_hal::sys::esp_aes_encrypt_init_t","esp_idf_hal::sys::esp_aes_encrypt_deinit_t","esp_idf_hal::sys::esp_aes_decrypt_t","esp_idf_hal::sys::esp_aes_decrypt_init_t","esp_idf_hal::sys::esp_aes_decrypt_deinit_t","esp_idf_hal::sys::esp_omac1_aes_128_t","esp_idf_hal::sys::esp_ccmp_decrypt_t","esp_idf_hal::sys::esp_ccmp_encrypt_t","esp_idf_hal::sys::esp_aes_gmac_t","esp_idf_hal::sys::esp_sha256_vector_t","esp_idf_hal::sys::esp_crc32_le_t","esp_idf_hal::sys::wifi_promiscuous_cb_t","esp_idf_hal::sys::esp_vendor_ie_cb_t","esp_idf_hal::sys::wifi_csi_cb_t","esp_idf_hal::sys::esp_now_recv_cb_t","esp_idf_hal::sys::esp_now_send_cb_t","esp_idf_hal::sys::wifi_netstack_buf_ref_cb_t","esp_idf_hal::sys::wifi_netstack_buf_free_cb_t","esp_idf_hal::sys::wifi_rxcb_t","esp_idf_hal::sys::wifi_mac_time_update_cb_t","esp_idf_hal::sys::wifi_tx_done_cb_t","esp_idf_hal::sys::neighbor_rep_request_cb","esp_idf_hal::sys::transaction_cb_t","esp_idf_hal::sys::gpio_isr_t","esp_idf_hal::sys::dns_found_callback","esp_idf_hal::sys::pbuf_free_custom_fn","esp_idf_hal::sys::netif_init_fn","esp_idf_hal::sys::netif_input_fn","esp_idf_hal::sys::netif_output_fn","esp_idf_hal::sys::netif_output_ip6_fn","esp_idf_hal::sys::netif_linkoutput_fn","esp_idf_hal::sys::netif_status_callback_fn","esp_idf_hal::sys::netif_igmp_mac_filter_fn","esp_idf_hal::sys::netif_mld_mac_filter_fn","esp_idf_hal::sys::netif_ext_callback_fn","esp_idf_hal::sys::init_fn_t","esp_idf_hal::sys::input_fn_t","esp_idf_hal::sys::sntp_sync_time_cb_t","esp_idf_hal::sys::esp_sntp_time_cb_t","esp_idf_hal::sys::ETSTask","esp_idf_hal::sys::ets_idle_cb_t","esp_idf_hal::sys::ETSTimerFunc","esp_idf_hal::sys::ets_isr_t","esp_idf_hal::sys::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_sign_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_key_len_func","esp_idf_hal::sys::mbedtls_x509_crt_ext_cb_t","esp_idf_hal::sys::mbedtls_x509_crt_ca_cb_t","esp_idf_hal::sys::mbedtls_ssl_send_t","esp_idf_hal::sys::mbedtls_ssl_recv_t","esp_idf_hal::sys::mbedtls_ssl_recv_timeout_t","esp_idf_hal::sys::mbedtls_ssl_set_timer_t","esp_idf_hal::sys::mbedtls_ssl_get_timer_t","esp_idf_hal::sys::mbedtls_ssl_cache_get_t","esp_idf_hal::sys::mbedtls_ssl_cache_set_t","esp_idf_hal::sys::mbedtls_ssl_export_keys_t","esp_idf_hal::sys::mbedtls_ssl_hs_cb_t","esp_idf_hal::sys::mbedtls_ssl_ticket_write_t","esp_idf_hal::sys::mbedtls_ssl_ticket_parse_t","esp_idf_hal::sys::mbedtls_ssl_cookie_write_t","esp_idf_hal::sys::mbedtls_ssl_cookie_check_t","esp_idf_hal::sys::mbedtls_entropy_f_source_ptr","esp_idf_hal::sys::http_event_handle_cb","esp_idf_hal::sys::http_client_init_cb_t","esp_idf_hal::sys::connect_func","esp_idf_hal::sys::io_func","esp_idf_hal::sys::io_read_func","esp_idf_hal::sys::trans_func","esp_idf_hal::sys::poll_func","esp_idf_hal::sys::connect_async_func","esp_idf_hal::sys::payload_transfer_func","esp_idf_hal::sys::http_data_cb","esp_idf_hal::sys::http_cb","esp_idf_hal::sys::httpd_free_ctx_fn_t","esp_idf_hal::sys::httpd_open_func_t","esp_idf_hal::sys::httpd_close_func_t","esp_idf_hal::sys::httpd_uri_match_func_t","esp_idf_hal::sys::httpd_err_handler_func_t","esp_idf_hal::sys::httpd_send_func_t","esp_idf_hal::sys::httpd_recv_func_t","esp_idf_hal::sys::httpd_pending_func_t","esp_idf_hal::sys::httpd_work_fn_t","esp_idf_hal::sys::nvs_flash_generate_keys_t","esp_idf_hal::sys::nvs_flash_read_cfg_t","esp_idf_hal::sys::protocomm_req_handler_t","esp_idf_hal::sys::wifi_prov_cb_func_t","esp_idf_hal::sys::adc_continuous_callback_t","esp_idf_hal::sys::gptimer_alarm_cb_t","esp_idf_hal::sys::i2c_master_callback_t","esp_idf_hal::sys::i2c_slave_received_callback_t","esp_idf_hal::sys::i2c_slave_stretch_callback_t","esp_idf_hal::sys::i2s_isr_callback_t","esp_idf_hal::sys::ledc_cb_t","esp_idf_hal::sys::mcpwm_timer_event_cb_t","esp_idf_hal::sys::mcpwm_brake_event_cb_t","esp_idf_hal::sys::mcpwm_fault_event_cb_t","esp_idf_hal::sys::mcpwm_compare_event_cb_t","esp_idf_hal::sys::mcpwm_capture_event_cb_t","esp_idf_hal::sys::rmt_tx_end_fn_t","esp_idf_hal::sys::sample_to_rmt_t","esp_idf_hal::sys::rmt_tx_done_callback_t","esp_idf_hal::sys::rmt_rx_done_callback_t","esp_idf_hal::sys::rmt_encode_simple_cb_t","esp_idf_hal::sys::slave_transaction_cb_t","esp_idf_hal::sys::timer_isr_t","esp_idf_hal::sys::uart_select_notif_callback_t","esp_idf_hal::sys::panic_info_dump_fn_t","esp_idf_hal::sys::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; FromResidual&lt;Yeet&lt;()&gt;&gt; for Option&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_residual</a>(_: Yeet&lt;()&gt;) -&gt; Option&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a>Read more</a></div></details></div></details>","FromResidual<Yeet<()>>","esp_idf_hal::sys::__compar_fn_t","esp_idf_hal::sys::shutdown_handler_t","esp_idf_hal::sys::vprintf_like_t","esp_idf_hal::sys::intr_handler_t","esp_idf_hal::sys::esp_cpu_intr_handler_t","esp_idf_hal::sys::esp_deep_sleep_cb_t","esp_idf_hal::sys::esp_deep_sleep_wake_stub_fn_t","esp_idf_hal::sys::TaskFunction_t","esp_idf_hal::sys::multi_heap_walker_cb_t","esp_idf_hal::sys::esp_alloc_failed_hook_t","esp_idf_hal::sys::heap_caps_walker_cb_t","esp_idf_hal::sys::TaskHookFunction_t","esp_idf_hal::sys::StreamBufferCallbackFunction_t","esp_idf_hal::sys::TimerCallbackFunction_t","esp_idf_hal::sys::PendedFunction_t","esp_idf_hal::sys::TlsDeleteCallbackFunction_t","esp_idf_hal::sys::task_wdt_msg_handler","esp_idf_hal::sys::esp_freertos_idle_cb_t","esp_idf_hal::sys::esp_freertos_tick_cb_t","esp_idf_hal::sys::esp_console_cmd_func_t","esp_idf_hal::sys::esp_console_cmd_func_with_context_t","esp_idf_hal::sys::linenoiseCompletionCallback","esp_idf_hal::sys::linenoiseHintsCallback","esp_idf_hal::sys::linenoiseFreeHintsCallback","esp_idf_hal::sys::_sig_func_ptr","esp_idf_hal::sys::sig_t","esp_idf_hal::sys::arg_resetfn","esp_idf_hal::sys::arg_scanfn","esp_idf_hal::sys::arg_checkfn","esp_idf_hal::sys::arg_errorfn","esp_idf_hal::sys::arg_dstr_freefn","esp_idf_hal::sys::arg_cmdfn","esp_idf_hal::sys::arg_comparefn","esp_idf_hal::sys::esp_timer_cb_t","esp_idf_hal::sys::esp_event_handler_t","esp_idf_hal::sys::esp_netif_receive_t","esp_idf_hal::sys::esp_netif_find_predicate_t","esp_idf_hal::sys::esp_netif_callback_fn","esp_idf_hal::sys::wifi_action_rx_cb_t","esp_idf_hal::sys::esp_aes_128_encrypt_t","esp_idf_hal::sys::esp_aes_128_decrypt_t","esp_idf_hal::sys::esp_aes_wrap_t","esp_idf_hal::sys::esp_aes_unwrap_t","esp_idf_hal::sys::esp_hmac_sha256_vector_t","esp_idf_hal::sys::esp_sha256_prf_t","esp_idf_hal::sys::esp_hmac_md5_t","esp_idf_hal::sys::esp_hmac_md5_vector_t","esp_idf_hal::sys::esp_hmac_sha1_t","esp_idf_hal::sys::esp_hmac_sha1_vector_t","esp_idf_hal::sys::esp_sha1_prf_t","esp_idf_hal::sys::esp_sha1_vector_t","esp_idf_hal::sys::esp_pbkdf2_sha1_t","esp_idf_hal::sys::esp_rc4_skip_t","esp_idf_hal::sys::esp_md5_vector_t","esp_idf_hal::sys::esp_aes_encrypt_t","esp_idf_hal::sys::esp_aes_encrypt_init_t","esp_idf_hal::sys::esp_aes_encrypt_deinit_t","esp_idf_hal::sys::esp_aes_decrypt_t","esp_idf_hal::sys::esp_aes_decrypt_init_t","esp_idf_hal::sys::esp_aes_decrypt_deinit_t","esp_idf_hal::sys::esp_omac1_aes_128_t","esp_idf_hal::sys::esp_ccmp_decrypt_t","esp_idf_hal::sys::esp_ccmp_encrypt_t","esp_idf_hal::sys::esp_aes_gmac_t","esp_idf_hal::sys::esp_sha256_vector_t","esp_idf_hal::sys::esp_crc32_le_t","esp_idf_hal::sys::wifi_promiscuous_cb_t","esp_idf_hal::sys::esp_vendor_ie_cb_t","esp_idf_hal::sys::wifi_csi_cb_t","esp_idf_hal::sys::esp_now_recv_cb_t","esp_idf_hal::sys::esp_now_send_cb_t","esp_idf_hal::sys::wifi_netstack_buf_ref_cb_t","esp_idf_hal::sys::wifi_netstack_buf_free_cb_t","esp_idf_hal::sys::wifi_rxcb_t","esp_idf_hal::sys::wifi_mac_time_update_cb_t","esp_idf_hal::sys::wifi_tx_done_cb_t","esp_idf_hal::sys::neighbor_rep_request_cb","esp_idf_hal::sys::transaction_cb_t","esp_idf_hal::sys::gpio_isr_t","esp_idf_hal::sys::dns_found_callback","esp_idf_hal::sys::pbuf_free_custom_fn","esp_idf_hal::sys::netif_init_fn","esp_idf_hal::sys::netif_input_fn","esp_idf_hal::sys::netif_output_fn","esp_idf_hal::sys::netif_output_ip6_fn","esp_idf_hal::sys::netif_linkoutput_fn","esp_idf_hal::sys::netif_status_callback_fn","esp_idf_hal::sys::netif_igmp_mac_filter_fn","esp_idf_hal::sys::netif_mld_mac_filter_fn","esp_idf_hal::sys::netif_ext_callback_fn","esp_idf_hal::sys::init_fn_t","esp_idf_hal::sys::input_fn_t","esp_idf_hal::sys::sntp_sync_time_cb_t","esp_idf_hal::sys::esp_sntp_time_cb_t","esp_idf_hal::sys::ETSTask","esp_idf_hal::sys::ets_idle_cb_t","esp_idf_hal::sys::ETSTimerFunc","esp_idf_hal::sys::ets_isr_t","esp_idf_hal::sys::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_sign_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_key_len_func","esp_idf_hal::sys::mbedtls_x509_crt_ext_cb_t","esp_idf_hal::sys::mbedtls_x509_crt_ca_cb_t","esp_idf_hal::sys::mbedtls_ssl_send_t","esp_idf_hal::sys::mbedtls_ssl_recv_t","esp_idf_hal::sys::mbedtls_ssl_recv_timeout_t","esp_idf_hal::sys::mbedtls_ssl_set_timer_t","esp_idf_hal::sys::mbedtls_ssl_get_timer_t","esp_idf_hal::sys::mbedtls_ssl_cache_get_t","esp_idf_hal::sys::mbedtls_ssl_cache_set_t","esp_idf_hal::sys::mbedtls_ssl_export_keys_t","esp_idf_hal::sys::mbedtls_ssl_hs_cb_t","esp_idf_hal::sys::mbedtls_ssl_ticket_write_t","esp_idf_hal::sys::mbedtls_ssl_ticket_parse_t","esp_idf_hal::sys::mbedtls_ssl_cookie_write_t","esp_idf_hal::sys::mbedtls_ssl_cookie_check_t","esp_idf_hal::sys::mbedtls_entropy_f_source_ptr","esp_idf_hal::sys::http_event_handle_cb","esp_idf_hal::sys::http_client_init_cb_t","esp_idf_hal::sys::connect_func","esp_idf_hal::sys::io_func","esp_idf_hal::sys::io_read_func","esp_idf_hal::sys::trans_func","esp_idf_hal::sys::poll_func","esp_idf_hal::sys::connect_async_func","esp_idf_hal::sys::payload_transfer_func","esp_idf_hal::sys::http_data_cb","esp_idf_hal::sys::http_cb","esp_idf_hal::sys::httpd_free_ctx_fn_t","esp_idf_hal::sys::httpd_open_func_t","esp_idf_hal::sys::httpd_close_func_t","esp_idf_hal::sys::httpd_uri_match_func_t","esp_idf_hal::sys::httpd_err_handler_func_t","esp_idf_hal::sys::httpd_send_func_t","esp_idf_hal::sys::httpd_recv_func_t","esp_idf_hal::sys::httpd_pending_func_t","esp_idf_hal::sys::httpd_work_fn_t","esp_idf_hal::sys::nvs_flash_generate_keys_t","esp_idf_hal::sys::nvs_flash_read_cfg_t","esp_idf_hal::sys::protocomm_req_handler_t","esp_idf_hal::sys::wifi_prov_cb_func_t","esp_idf_hal::sys::adc_continuous_callback_t","esp_idf_hal::sys::gptimer_alarm_cb_t","esp_idf_hal::sys::i2c_master_callback_t","esp_idf_hal::sys::i2c_slave_received_callback_t","esp_idf_hal::sys::i2c_slave_stretch_callback_t","esp_idf_hal::sys::i2s_isr_callback_t","esp_idf_hal::sys::ledc_cb_t","esp_idf_hal::sys::mcpwm_timer_event_cb_t","esp_idf_hal::sys::mcpwm_brake_event_cb_t","esp_idf_hal::sys::mcpwm_fault_event_cb_t","esp_idf_hal::sys::mcpwm_compare_event_cb_t","esp_idf_hal::sys::mcpwm_capture_event_cb_t","esp_idf_hal::sys::rmt_tx_end_fn_t","esp_idf_hal::sys::sample_to_rmt_t","esp_idf_hal::sys::rmt_tx_done_callback_t","esp_idf_hal::sys::rmt_rx_done_callback_t","esp_idf_hal::sys::rmt_encode_simple_cb_t","esp_idf_hal::sys::slave_transaction_cb_t","esp_idf_hal::sys::timer_isr_t","esp_idf_hal::sys::uart_select_notif_callback_t","esp_idf_hal::sys::panic_info_dump_fn_t","esp_idf_hal::sys::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Hash for Option&lt;T&gt;<div class=\"where\">where\n    T: Hash,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: &amp;mut __H)<div class=\"where\">where\n    __H: Hasher,</div></h4></section></summary><div class='docblock'>Feeds this value into the given [<code>Hasher</code>]. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.3.0\">1.3.0</span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: &amp;mut H)<div class=\"where\">where\n    H: Hasher,\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given [<code>Hasher</code>]. <a>Read more</a></div></details></div></details>","Hash","esp_idf_hal::sys::__compar_fn_t","esp_idf_hal::sys::shutdown_handler_t","esp_idf_hal::sys::vprintf_like_t","esp_idf_hal::sys::intr_handler_t","esp_idf_hal::sys::esp_cpu_intr_handler_t","esp_idf_hal::sys::esp_deep_sleep_cb_t","esp_idf_hal::sys::esp_deep_sleep_wake_stub_fn_t","esp_idf_hal::sys::TaskFunction_t","esp_idf_hal::sys::multi_heap_walker_cb_t","esp_idf_hal::sys::esp_alloc_failed_hook_t","esp_idf_hal::sys::heap_caps_walker_cb_t","esp_idf_hal::sys::TaskHookFunction_t","esp_idf_hal::sys::StreamBufferCallbackFunction_t","esp_idf_hal::sys::TimerCallbackFunction_t","esp_idf_hal::sys::PendedFunction_t","esp_idf_hal::sys::TlsDeleteCallbackFunction_t","esp_idf_hal::sys::task_wdt_msg_handler","esp_idf_hal::sys::esp_freertos_idle_cb_t","esp_idf_hal::sys::esp_freertos_tick_cb_t","esp_idf_hal::sys::esp_console_cmd_func_t","esp_idf_hal::sys::esp_console_cmd_func_with_context_t","esp_idf_hal::sys::linenoiseCompletionCallback","esp_idf_hal::sys::linenoiseHintsCallback","esp_idf_hal::sys::linenoiseFreeHintsCallback","esp_idf_hal::sys::_sig_func_ptr","esp_idf_hal::sys::sig_t","esp_idf_hal::sys::arg_resetfn","esp_idf_hal::sys::arg_scanfn","esp_idf_hal::sys::arg_checkfn","esp_idf_hal::sys::arg_errorfn","esp_idf_hal::sys::arg_dstr_freefn","esp_idf_hal::sys::arg_cmdfn","esp_idf_hal::sys::arg_comparefn","esp_idf_hal::sys::esp_timer_cb_t","esp_idf_hal::sys::esp_event_handler_t","esp_idf_hal::sys::esp_netif_receive_t","esp_idf_hal::sys::esp_netif_find_predicate_t","esp_idf_hal::sys::esp_netif_callback_fn","esp_idf_hal::sys::wifi_action_rx_cb_t","esp_idf_hal::sys::esp_aes_128_encrypt_t","esp_idf_hal::sys::esp_aes_128_decrypt_t","esp_idf_hal::sys::esp_aes_wrap_t","esp_idf_hal::sys::esp_aes_unwrap_t","esp_idf_hal::sys::esp_hmac_sha256_vector_t","esp_idf_hal::sys::esp_sha256_prf_t","esp_idf_hal::sys::esp_hmac_md5_t","esp_idf_hal::sys::esp_hmac_md5_vector_t","esp_idf_hal::sys::esp_hmac_sha1_t","esp_idf_hal::sys::esp_hmac_sha1_vector_t","esp_idf_hal::sys::esp_sha1_prf_t","esp_idf_hal::sys::esp_sha1_vector_t","esp_idf_hal::sys::esp_pbkdf2_sha1_t","esp_idf_hal::sys::esp_rc4_skip_t","esp_idf_hal::sys::esp_md5_vector_t","esp_idf_hal::sys::esp_aes_encrypt_t","esp_idf_hal::sys::esp_aes_encrypt_init_t","esp_idf_hal::sys::esp_aes_encrypt_deinit_t","esp_idf_hal::sys::esp_aes_decrypt_t","esp_idf_hal::sys::esp_aes_decrypt_init_t","esp_idf_hal::sys::esp_aes_decrypt_deinit_t","esp_idf_hal::sys::esp_omac1_aes_128_t","esp_idf_hal::sys::esp_ccmp_decrypt_t","esp_idf_hal::sys::esp_ccmp_encrypt_t","esp_idf_hal::sys::esp_aes_gmac_t","esp_idf_hal::sys::esp_sha256_vector_t","esp_idf_hal::sys::esp_crc32_le_t","esp_idf_hal::sys::wifi_promiscuous_cb_t","esp_idf_hal::sys::esp_vendor_ie_cb_t","esp_idf_hal::sys::wifi_csi_cb_t","esp_idf_hal::sys::esp_now_recv_cb_t","esp_idf_hal::sys::esp_now_send_cb_t","esp_idf_hal::sys::wifi_netstack_buf_ref_cb_t","esp_idf_hal::sys::wifi_netstack_buf_free_cb_t","esp_idf_hal::sys::wifi_rxcb_t","esp_idf_hal::sys::wifi_mac_time_update_cb_t","esp_idf_hal::sys::wifi_tx_done_cb_t","esp_idf_hal::sys::neighbor_rep_request_cb","esp_idf_hal::sys::transaction_cb_t","esp_idf_hal::sys::gpio_isr_t","esp_idf_hal::sys::dns_found_callback","esp_idf_hal::sys::pbuf_free_custom_fn","esp_idf_hal::sys::netif_init_fn","esp_idf_hal::sys::netif_input_fn","esp_idf_hal::sys::netif_output_fn","esp_idf_hal::sys::netif_output_ip6_fn","esp_idf_hal::sys::netif_linkoutput_fn","esp_idf_hal::sys::netif_status_callback_fn","esp_idf_hal::sys::netif_igmp_mac_filter_fn","esp_idf_hal::sys::netif_mld_mac_filter_fn","esp_idf_hal::sys::netif_ext_callback_fn","esp_idf_hal::sys::init_fn_t","esp_idf_hal::sys::input_fn_t","esp_idf_hal::sys::sntp_sync_time_cb_t","esp_idf_hal::sys::esp_sntp_time_cb_t","esp_idf_hal::sys::ETSTask","esp_idf_hal::sys::ets_idle_cb_t","esp_idf_hal::sys::ETSTimerFunc","esp_idf_hal::sys::ets_isr_t","esp_idf_hal::sys::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_sign_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_key_len_func","esp_idf_hal::sys::mbedtls_x509_crt_ext_cb_t","esp_idf_hal::sys::mbedtls_x509_crt_ca_cb_t","esp_idf_hal::sys::mbedtls_ssl_send_t","esp_idf_hal::sys::mbedtls_ssl_recv_t","esp_idf_hal::sys::mbedtls_ssl_recv_timeout_t","esp_idf_hal::sys::mbedtls_ssl_set_timer_t","esp_idf_hal::sys::mbedtls_ssl_get_timer_t","esp_idf_hal::sys::mbedtls_ssl_cache_get_t","esp_idf_hal::sys::mbedtls_ssl_cache_set_t","esp_idf_hal::sys::mbedtls_ssl_export_keys_t","esp_idf_hal::sys::mbedtls_ssl_hs_cb_t","esp_idf_hal::sys::mbedtls_ssl_ticket_write_t","esp_idf_hal::sys::mbedtls_ssl_ticket_parse_t","esp_idf_hal::sys::mbedtls_ssl_cookie_write_t","esp_idf_hal::sys::mbedtls_ssl_cookie_check_t","esp_idf_hal::sys::mbedtls_entropy_f_source_ptr","esp_idf_hal::sys::http_event_handle_cb","esp_idf_hal::sys::http_client_init_cb_t","esp_idf_hal::sys::connect_func","esp_idf_hal::sys::io_func","esp_idf_hal::sys::io_read_func","esp_idf_hal::sys::trans_func","esp_idf_hal::sys::poll_func","esp_idf_hal::sys::connect_async_func","esp_idf_hal::sys::payload_transfer_func","esp_idf_hal::sys::http_data_cb","esp_idf_hal::sys::http_cb","esp_idf_hal::sys::httpd_free_ctx_fn_t","esp_idf_hal::sys::httpd_open_func_t","esp_idf_hal::sys::httpd_close_func_t","esp_idf_hal::sys::httpd_uri_match_func_t","esp_idf_hal::sys::httpd_err_handler_func_t","esp_idf_hal::sys::httpd_send_func_t","esp_idf_hal::sys::httpd_recv_func_t","esp_idf_hal::sys::httpd_pending_func_t","esp_idf_hal::sys::httpd_work_fn_t","esp_idf_hal::sys::nvs_flash_generate_keys_t","esp_idf_hal::sys::nvs_flash_read_cfg_t","esp_idf_hal::sys::protocomm_req_handler_t","esp_idf_hal::sys::wifi_prov_cb_func_t","esp_idf_hal::sys::adc_continuous_callback_t","esp_idf_hal::sys::gptimer_alarm_cb_t","esp_idf_hal::sys::i2c_master_callback_t","esp_idf_hal::sys::i2c_slave_received_callback_t","esp_idf_hal::sys::i2c_slave_stretch_callback_t","esp_idf_hal::sys::i2s_isr_callback_t","esp_idf_hal::sys::ledc_cb_t","esp_idf_hal::sys::mcpwm_timer_event_cb_t","esp_idf_hal::sys::mcpwm_brake_event_cb_t","esp_idf_hal::sys::mcpwm_fault_event_cb_t","esp_idf_hal::sys::mcpwm_compare_event_cb_t","esp_idf_hal::sys::mcpwm_capture_event_cb_t","esp_idf_hal::sys::rmt_tx_end_fn_t","esp_idf_hal::sys::sample_to_rmt_t","esp_idf_hal::sys::rmt_tx_done_callback_t","esp_idf_hal::sys::rmt_rx_done_callback_t","esp_idf_hal::sys::rmt_encode_simple_cb_t","esp_idf_hal::sys::slave_transaction_cb_t","esp_idf_hal::sys::timer_isr_t","esp_idf_hal::sys::uart_select_notif_callback_t","esp_idf_hal::sys::panic_info_dump_fn_t","esp_idf_hal::sys::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; IntoIterator for Option&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_iter</a>(self) -&gt; IntoIter&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">IntoIter</a> = IntoIter&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","esp_idf_hal::sys::__compar_fn_t","esp_idf_hal::sys::shutdown_handler_t","esp_idf_hal::sys::vprintf_like_t","esp_idf_hal::sys::intr_handler_t","esp_idf_hal::sys::esp_cpu_intr_handler_t","esp_idf_hal::sys::esp_deep_sleep_cb_t","esp_idf_hal::sys::esp_deep_sleep_wake_stub_fn_t","esp_idf_hal::sys::TaskFunction_t","esp_idf_hal::sys::multi_heap_walker_cb_t","esp_idf_hal::sys::esp_alloc_failed_hook_t","esp_idf_hal::sys::heap_caps_walker_cb_t","esp_idf_hal::sys::TaskHookFunction_t","esp_idf_hal::sys::StreamBufferCallbackFunction_t","esp_idf_hal::sys::TimerCallbackFunction_t","esp_idf_hal::sys::PendedFunction_t","esp_idf_hal::sys::TlsDeleteCallbackFunction_t","esp_idf_hal::sys::task_wdt_msg_handler","esp_idf_hal::sys::esp_freertos_idle_cb_t","esp_idf_hal::sys::esp_freertos_tick_cb_t","esp_idf_hal::sys::esp_console_cmd_func_t","esp_idf_hal::sys::esp_console_cmd_func_with_context_t","esp_idf_hal::sys::linenoiseCompletionCallback","esp_idf_hal::sys::linenoiseHintsCallback","esp_idf_hal::sys::linenoiseFreeHintsCallback","esp_idf_hal::sys::_sig_func_ptr","esp_idf_hal::sys::sig_t","esp_idf_hal::sys::arg_resetfn","esp_idf_hal::sys::arg_scanfn","esp_idf_hal::sys::arg_checkfn","esp_idf_hal::sys::arg_errorfn","esp_idf_hal::sys::arg_dstr_freefn","esp_idf_hal::sys::arg_cmdfn","esp_idf_hal::sys::arg_comparefn","esp_idf_hal::sys::esp_timer_cb_t","esp_idf_hal::sys::esp_event_handler_t","esp_idf_hal::sys::esp_netif_receive_t","esp_idf_hal::sys::esp_netif_find_predicate_t","esp_idf_hal::sys::esp_netif_callback_fn","esp_idf_hal::sys::wifi_action_rx_cb_t","esp_idf_hal::sys::esp_aes_128_encrypt_t","esp_idf_hal::sys::esp_aes_128_decrypt_t","esp_idf_hal::sys::esp_aes_wrap_t","esp_idf_hal::sys::esp_aes_unwrap_t","esp_idf_hal::sys::esp_hmac_sha256_vector_t","esp_idf_hal::sys::esp_sha256_prf_t","esp_idf_hal::sys::esp_hmac_md5_t","esp_idf_hal::sys::esp_hmac_md5_vector_t","esp_idf_hal::sys::esp_hmac_sha1_t","esp_idf_hal::sys::esp_hmac_sha1_vector_t","esp_idf_hal::sys::esp_sha1_prf_t","esp_idf_hal::sys::esp_sha1_vector_t","esp_idf_hal::sys::esp_pbkdf2_sha1_t","esp_idf_hal::sys::esp_rc4_skip_t","esp_idf_hal::sys::esp_md5_vector_t","esp_idf_hal::sys::esp_aes_encrypt_t","esp_idf_hal::sys::esp_aes_encrypt_init_t","esp_idf_hal::sys::esp_aes_encrypt_deinit_t","esp_idf_hal::sys::esp_aes_decrypt_t","esp_idf_hal::sys::esp_aes_decrypt_init_t","esp_idf_hal::sys::esp_aes_decrypt_deinit_t","esp_idf_hal::sys::esp_omac1_aes_128_t","esp_idf_hal::sys::esp_ccmp_decrypt_t","esp_idf_hal::sys::esp_ccmp_encrypt_t","esp_idf_hal::sys::esp_aes_gmac_t","esp_idf_hal::sys::esp_sha256_vector_t","esp_idf_hal::sys::esp_crc32_le_t","esp_idf_hal::sys::wifi_promiscuous_cb_t","esp_idf_hal::sys::esp_vendor_ie_cb_t","esp_idf_hal::sys::wifi_csi_cb_t","esp_idf_hal::sys::esp_now_recv_cb_t","esp_idf_hal::sys::esp_now_send_cb_t","esp_idf_hal::sys::wifi_netstack_buf_ref_cb_t","esp_idf_hal::sys::wifi_netstack_buf_free_cb_t","esp_idf_hal::sys::wifi_rxcb_t","esp_idf_hal::sys::wifi_mac_time_update_cb_t","esp_idf_hal::sys::wifi_tx_done_cb_t","esp_idf_hal::sys::neighbor_rep_request_cb","esp_idf_hal::sys::transaction_cb_t","esp_idf_hal::sys::gpio_isr_t","esp_idf_hal::sys::dns_found_callback","esp_idf_hal::sys::pbuf_free_custom_fn","esp_idf_hal::sys::netif_init_fn","esp_idf_hal::sys::netif_input_fn","esp_idf_hal::sys::netif_output_fn","esp_idf_hal::sys::netif_output_ip6_fn","esp_idf_hal::sys::netif_linkoutput_fn","esp_idf_hal::sys::netif_status_callback_fn","esp_idf_hal::sys::netif_igmp_mac_filter_fn","esp_idf_hal::sys::netif_mld_mac_filter_fn","esp_idf_hal::sys::netif_ext_callback_fn","esp_idf_hal::sys::init_fn_t","esp_idf_hal::sys::input_fn_t","esp_idf_hal::sys::sntp_sync_time_cb_t","esp_idf_hal::sys::esp_sntp_time_cb_t","esp_idf_hal::sys::ETSTask","esp_idf_hal::sys::ets_idle_cb_t","esp_idf_hal::sys::ETSTimerFunc","esp_idf_hal::sys::ets_isr_t","esp_idf_hal::sys::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_sign_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_key_len_func","esp_idf_hal::sys::mbedtls_x509_crt_ext_cb_t","esp_idf_hal::sys::mbedtls_x509_crt_ca_cb_t","esp_idf_hal::sys::mbedtls_ssl_send_t","esp_idf_hal::sys::mbedtls_ssl_recv_t","esp_idf_hal::sys::mbedtls_ssl_recv_timeout_t","esp_idf_hal::sys::mbedtls_ssl_set_timer_t","esp_idf_hal::sys::mbedtls_ssl_get_timer_t","esp_idf_hal::sys::mbedtls_ssl_cache_get_t","esp_idf_hal::sys::mbedtls_ssl_cache_set_t","esp_idf_hal::sys::mbedtls_ssl_export_keys_t","esp_idf_hal::sys::mbedtls_ssl_hs_cb_t","esp_idf_hal::sys::mbedtls_ssl_ticket_write_t","esp_idf_hal::sys::mbedtls_ssl_ticket_parse_t","esp_idf_hal::sys::mbedtls_ssl_cookie_write_t","esp_idf_hal::sys::mbedtls_ssl_cookie_check_t","esp_idf_hal::sys::mbedtls_entropy_f_source_ptr","esp_idf_hal::sys::http_event_handle_cb","esp_idf_hal::sys::http_client_init_cb_t","esp_idf_hal::sys::connect_func","esp_idf_hal::sys::io_func","esp_idf_hal::sys::io_read_func","esp_idf_hal::sys::trans_func","esp_idf_hal::sys::poll_func","esp_idf_hal::sys::connect_async_func","esp_idf_hal::sys::payload_transfer_func","esp_idf_hal::sys::http_data_cb","esp_idf_hal::sys::http_cb","esp_idf_hal::sys::httpd_free_ctx_fn_t","esp_idf_hal::sys::httpd_open_func_t","esp_idf_hal::sys::httpd_close_func_t","esp_idf_hal::sys::httpd_uri_match_func_t","esp_idf_hal::sys::httpd_err_handler_func_t","esp_idf_hal::sys::httpd_send_func_t","esp_idf_hal::sys::httpd_recv_func_t","esp_idf_hal::sys::httpd_pending_func_t","esp_idf_hal::sys::httpd_work_fn_t","esp_idf_hal::sys::nvs_flash_generate_keys_t","esp_idf_hal::sys::nvs_flash_read_cfg_t","esp_idf_hal::sys::protocomm_req_handler_t","esp_idf_hal::sys::wifi_prov_cb_func_t","esp_idf_hal::sys::adc_continuous_callback_t","esp_idf_hal::sys::gptimer_alarm_cb_t","esp_idf_hal::sys::i2c_master_callback_t","esp_idf_hal::sys::i2c_slave_received_callback_t","esp_idf_hal::sys::i2c_slave_stretch_callback_t","esp_idf_hal::sys::i2s_isr_callback_t","esp_idf_hal::sys::ledc_cb_t","esp_idf_hal::sys::mcpwm_timer_event_cb_t","esp_idf_hal::sys::mcpwm_brake_event_cb_t","esp_idf_hal::sys::mcpwm_fault_event_cb_t","esp_idf_hal::sys::mcpwm_compare_event_cb_t","esp_idf_hal::sys::mcpwm_capture_event_cb_t","esp_idf_hal::sys::rmt_tx_end_fn_t","esp_idf_hal::sys::sample_to_rmt_t","esp_idf_hal::sys::rmt_tx_done_callback_t","esp_idf_hal::sys::rmt_rx_done_callback_t","esp_idf_hal::sys::rmt_encode_simple_cb_t","esp_idf_hal::sys::slave_transaction_cb_t","esp_idf_hal::sys::timer_isr_t","esp_idf_hal::sys::uart_select_notif_callback_t","esp_idf_hal::sys::panic_info_dump_fn_t","esp_idf_hal::sys::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Option&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">is_some</a>(&amp;self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a [<code>Some</code>] value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">is_some_and</a>(self, f: impl FnOnce(T) -&gt; bool) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a [<code>Some</code>] and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">is_none</a>(&amp;self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a [<code>None</code>] value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none_or\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.82.0\">1.82.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">is_none_or</a>(self, f: impl FnOnce(T) -&gt; bool) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a [<code>None</code>] or the value inside of it matches a predicate.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none_or(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none_or(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none_or(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">as_ref</a>(&amp;self) -&gt; Option&lt;&amp;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;[usize]&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0, const since 1.83.0\">1.0.0 (const: 1.83.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">as_mut</a>(&amp;mut self) -&gt; Option&lt;&amp;mut T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.33.0, const since 1.84.0\">1.33.0 (const: 1.84.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">as_pin_ref</a>(self: Pin&lt;&amp;Option&lt;T&gt;&gt;) -&gt; Option&lt;Pin&lt;&amp;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>[Pin]&lt;<a href=\"reference\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;[Pin]&lt;<a href=\"reference\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.33.0, const since 1.84.0\">1.33.0 (const: 1.84.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">as_pin_mut</a>(self: Pin&lt;&amp;mut Option&lt;T&gt;&gt;) -&gt; Option&lt;Pin&lt;&amp;mut T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>[Pin]&lt;<a href=\"reference\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;[Pin]&lt;<a href=\"reference\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.75.0, const since 1.84.0\">1.75.0 (const: 1.84.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;[T]</h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.75.0, const since 1.84.0\">1.75.0 (const: 1.84.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut [T]</h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0, const since 1.83.0\">1.0.0 (const: 1.83.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">expect</a>(self, msg: &amp;str) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained [<code>Some</code>] value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is a [<code>None</code>] with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a class=\"doc-anchor\" href=\"#recommended-message-style\">§</a>Recommended Message Style</h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0, const since 1.83.0\">1.0.0 (const: 1.83.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained [<code>Some</code>] value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nPanics are meant for unrecoverable errors, and\n<a href=\"https://doc.rust-lang.org/book/ch09-01-unrecoverable-errors-with-panic.html\">may abort the entire program</a>.</p>\n<p>Instead, prefer to use pattern matching and handle the [<code>None</code>]\ncase explicitly, or call <a href=\"Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"Option::unwrap_or_default\"><code>unwrap_or_default</code></a>. In functions returning <code>Option</code>, you can use\n<a href=\"https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html#where-the--operator-can-be-used\">the <code>?</code> (try) operator</a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the self value equals [<code>None</code>].</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained [<code>Some</code>] value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: FnOnce() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained [<code>Some</code>] value or computes it from a closure.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: Default,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained [<code>Some</code>] value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if [<code>Some</code>], returns the contained\nvalue, otherwise if [<code>None</code>], returns the <a href=\"Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.58.0, const since 1.83.0\">1.58.0 (const: 1.83.0)</span><h4 class=\"code-header\">pub const unsafe fn <a class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained [<code>Some</code>] value, consuming the <code>self</code> value,\nwithout checking that the value is not [<code>None</code>].</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method on [<code>None</code>] is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; Option&lt;U&gt;<div class=\"where\">where\n    F: FnOnce(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;[usize]&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.76.0\">1.76.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; Option&lt;T&gt;<div class=\"where\">where\n    F: FnOnce(&amp;T),</div></h4></section></summary><div class=\"docblock\"><p>Calls a function with a reference to the contained value if [<code>Some</code>].</p>\n<p>Returns the original option.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>list = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"comment\">// prints \"got: 2\"\n</span><span class=\"kw\">let </span>x = list\n    .get(<span class=\"number\">1</span>)\n    .inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>))\n    .expect(<span class=\"string\">\"list should be long enough\"</span>);\n\n<span class=\"comment\">// prints nothing\n</span>list.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: FnOnce(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: FnOnce() -&gt; U,\n    F: FnOnce(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a class=\"doc-anchor\" href=\"#basic-examples\">§</a>Basic examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n<h5 id=\"handling-a-result-based-fallback\"><a class=\"doc-anchor\" href=\"#handling-a-result-based-fallback\">§</a>Handling a Result-based fallback</h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with [<code>Result&lt;T, E&gt;</code>] is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; Result&lt;T, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a [<code>Result&lt;T, E&gt;</code>], mapping <a href=\"Some\"><code>Some(v)</code></a> to\n<a href=\"Ok\"><code>Ok(v)</code></a> and [<code>None</code>] to <a href=\"Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; Result&lt;T, E&gt;<div class=\"where\">where\n    F: FnOnce() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a [<code>Result&lt;T, E&gt;</code>], mapping <a href=\"Some\"><code>Some(v)</code></a> to\n<a href=\"Ok\"><code>Ok(v)</code></a> and [<code>None</code>] to <a href=\"Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.40.0\">1.40.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">as_deref</a>(&amp;self) -&gt; Option&lt;&amp;&lt;T as Deref&gt;::Target&gt;<div class=\"where\">where\n    T: Deref,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via [<code>Deref</code>].</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.40.0\">1.40.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; Option&lt;&amp;mut &lt;T as Deref&gt;::Target&gt;<div class=\"where\">where\n    T: DerefMut,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s [<code>Deref::Target</code>] type.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">iter</a>(&amp;self) -&gt; Iter&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; IterMut&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">and</a>&lt;U&gt;(self, optb: Option&lt;U&gt;) -&gt; Option&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Returns [<code>None</code>] if the option is [<code>None</code>], otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; Option&lt;U&gt;<div class=\"where\">where\n    F: FnOnce(T) -&gt; Option&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns [<code>None</code>] if the option is [<code>None</code>], otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Often used to chain fallible operations that may return [<code>None</code>].</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.27.0\">1.27.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; Option&lt;T&gt;<div class=\"where\">where\n    P: FnOnce(&amp;T) -&gt; bool,</div></h4></section></summary><div class=\"docblock\"><p>Returns [<code>None</code>] if the option is [<code>None</code>], otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li>[<code>None</code>] if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to [<code>Iterator::filter()</code>]. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">or</a>(self, optb: Option&lt;T&gt;) -&gt; Option&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; Option&lt;T&gt;<div class=\"where\">where\n    F: FnOnce() -&gt; Option&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.37.0\">1.37.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">xor</a>(self, optb: Option&lt;T&gt;) -&gt; Option&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns [<code>Some</code>] if exactly one of <code>self</code>, <code>optb</code> is [<code>Some</code>], otherwise returns [<code>None</code>].</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0\">1.53.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; &amp;mut T</h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also [<code>Option::get_or_insert</code>], which doesn’t update the value if\nthe option already contains [<code>Some</code>].</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.20.0\">1.20.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; &amp;mut T</h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is [<code>None</code>], then\nreturns a mutable reference to the contained value.</p>\n<p>See also [<code>Option::insert</code>], which updates the value even if\nthe option already contains [<code>Some</code>].</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_default\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.83.0\">1.83.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; &amp;mut T<div class=\"where\">where\n    T: Default,</div></h4></section></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is [<code>None</code>], then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.20.0\">1.20.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; &amp;mut T<div class=\"where\">where\n    F: FnOnce() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is [<code>None</code>],\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0, const since 1.83.0\">1.0.0 (const: 1.83.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">take</a>(&amp;mut self) -&gt; Option&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a [<code>None</code>] in its place.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_if\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.80.0\">1.80.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; Option&lt;T&gt;<div class=\"where\">where\n    P: FnOnce(&amp;mut T) -&gt; bool,</div></h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to [<code>Option::take</code>] but conditional.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.31.0, const since 1.83.0\">1.31.0 (const: 1.83.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; Option&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a [<code>Some</code>] in its place without deinitializing either one.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.46.0\">1.46.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">zip</a>&lt;U&gt;(self, other: Option&lt;U&gt;) -&gt; Option&lt;(T, U)&gt;</h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_with\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: Option&lt;U&gt;, f: F) -&gt; Option&lt;R&gt;<div class=\"where\">where\n    F: FnOnce(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"esp_idf_hal::sys::__compar_fn_t","esp_idf_hal::sys::shutdown_handler_t","esp_idf_hal::sys::vprintf_like_t","esp_idf_hal::sys::intr_handler_t","esp_idf_hal::sys::esp_cpu_intr_handler_t","esp_idf_hal::sys::esp_deep_sleep_cb_t","esp_idf_hal::sys::esp_deep_sleep_wake_stub_fn_t","esp_idf_hal::sys::TaskFunction_t","esp_idf_hal::sys::multi_heap_walker_cb_t","esp_idf_hal::sys::esp_alloc_failed_hook_t","esp_idf_hal::sys::heap_caps_walker_cb_t","esp_idf_hal::sys::TaskHookFunction_t","esp_idf_hal::sys::StreamBufferCallbackFunction_t","esp_idf_hal::sys::TimerCallbackFunction_t","esp_idf_hal::sys::PendedFunction_t","esp_idf_hal::sys::TlsDeleteCallbackFunction_t","esp_idf_hal::sys::task_wdt_msg_handler","esp_idf_hal::sys::esp_freertos_idle_cb_t","esp_idf_hal::sys::esp_freertos_tick_cb_t","esp_idf_hal::sys::esp_console_cmd_func_t","esp_idf_hal::sys::esp_console_cmd_func_with_context_t","esp_idf_hal::sys::linenoiseCompletionCallback","esp_idf_hal::sys::linenoiseHintsCallback","esp_idf_hal::sys::linenoiseFreeHintsCallback","esp_idf_hal::sys::_sig_func_ptr","esp_idf_hal::sys::sig_t","esp_idf_hal::sys::arg_resetfn","esp_idf_hal::sys::arg_scanfn","esp_idf_hal::sys::arg_checkfn","esp_idf_hal::sys::arg_errorfn","esp_idf_hal::sys::arg_dstr_freefn","esp_idf_hal::sys::arg_cmdfn","esp_idf_hal::sys::arg_comparefn","esp_idf_hal::sys::esp_timer_cb_t","esp_idf_hal::sys::esp_event_handler_t","esp_idf_hal::sys::esp_netif_receive_t","esp_idf_hal::sys::esp_netif_find_predicate_t","esp_idf_hal::sys::esp_netif_callback_fn","esp_idf_hal::sys::wifi_action_rx_cb_t","esp_idf_hal::sys::esp_aes_128_encrypt_t","esp_idf_hal::sys::esp_aes_128_decrypt_t","esp_idf_hal::sys::esp_aes_wrap_t","esp_idf_hal::sys::esp_aes_unwrap_t","esp_idf_hal::sys::esp_hmac_sha256_vector_t","esp_idf_hal::sys::esp_sha256_prf_t","esp_idf_hal::sys::esp_hmac_md5_t","esp_idf_hal::sys::esp_hmac_md5_vector_t","esp_idf_hal::sys::esp_hmac_sha1_t","esp_idf_hal::sys::esp_hmac_sha1_vector_t","esp_idf_hal::sys::esp_sha1_prf_t","esp_idf_hal::sys::esp_sha1_vector_t","esp_idf_hal::sys::esp_pbkdf2_sha1_t","esp_idf_hal::sys::esp_rc4_skip_t","esp_idf_hal::sys::esp_md5_vector_t","esp_idf_hal::sys::esp_aes_encrypt_t","esp_idf_hal::sys::esp_aes_encrypt_init_t","esp_idf_hal::sys::esp_aes_encrypt_deinit_t","esp_idf_hal::sys::esp_aes_decrypt_t","esp_idf_hal::sys::esp_aes_decrypt_init_t","esp_idf_hal::sys::esp_aes_decrypt_deinit_t","esp_idf_hal::sys::esp_omac1_aes_128_t","esp_idf_hal::sys::esp_ccmp_decrypt_t","esp_idf_hal::sys::esp_ccmp_encrypt_t","esp_idf_hal::sys::esp_aes_gmac_t","esp_idf_hal::sys::esp_sha256_vector_t","esp_idf_hal::sys::esp_crc32_le_t","esp_idf_hal::sys::wifi_promiscuous_cb_t","esp_idf_hal::sys::esp_vendor_ie_cb_t","esp_idf_hal::sys::wifi_csi_cb_t","esp_idf_hal::sys::esp_now_recv_cb_t","esp_idf_hal::sys::esp_now_send_cb_t","esp_idf_hal::sys::wifi_netstack_buf_ref_cb_t","esp_idf_hal::sys::wifi_netstack_buf_free_cb_t","esp_idf_hal::sys::wifi_rxcb_t","esp_idf_hal::sys::wifi_mac_time_update_cb_t","esp_idf_hal::sys::wifi_tx_done_cb_t","esp_idf_hal::sys::neighbor_rep_request_cb","esp_idf_hal::sys::transaction_cb_t","esp_idf_hal::sys::gpio_isr_t","esp_idf_hal::sys::dns_found_callback","esp_idf_hal::sys::pbuf_free_custom_fn","esp_idf_hal::sys::netif_init_fn","esp_idf_hal::sys::netif_input_fn","esp_idf_hal::sys::netif_output_fn","esp_idf_hal::sys::netif_output_ip6_fn","esp_idf_hal::sys::netif_linkoutput_fn","esp_idf_hal::sys::netif_status_callback_fn","esp_idf_hal::sys::netif_igmp_mac_filter_fn","esp_idf_hal::sys::netif_mld_mac_filter_fn","esp_idf_hal::sys::netif_ext_callback_fn","esp_idf_hal::sys::init_fn_t","esp_idf_hal::sys::input_fn_t","esp_idf_hal::sys::sntp_sync_time_cb_t","esp_idf_hal::sys::esp_sntp_time_cb_t","esp_idf_hal::sys::ETSTask","esp_idf_hal::sys::ets_idle_cb_t","esp_idf_hal::sys::ETSTimerFunc","esp_idf_hal::sys::ets_isr_t","esp_idf_hal::sys::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_sign_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_key_len_func","esp_idf_hal::sys::mbedtls_x509_crt_ext_cb_t","esp_idf_hal::sys::mbedtls_x509_crt_ca_cb_t","esp_idf_hal::sys::mbedtls_ssl_send_t","esp_idf_hal::sys::mbedtls_ssl_recv_t","esp_idf_hal::sys::mbedtls_ssl_recv_timeout_t","esp_idf_hal::sys::mbedtls_ssl_set_timer_t","esp_idf_hal::sys::mbedtls_ssl_get_timer_t","esp_idf_hal::sys::mbedtls_ssl_cache_get_t","esp_idf_hal::sys::mbedtls_ssl_cache_set_t","esp_idf_hal::sys::mbedtls_ssl_export_keys_t","esp_idf_hal::sys::mbedtls_ssl_hs_cb_t","esp_idf_hal::sys::mbedtls_ssl_ticket_write_t","esp_idf_hal::sys::mbedtls_ssl_ticket_parse_t","esp_idf_hal::sys::mbedtls_ssl_cookie_write_t","esp_idf_hal::sys::mbedtls_ssl_cookie_check_t","esp_idf_hal::sys::mbedtls_entropy_f_source_ptr","esp_idf_hal::sys::http_event_handle_cb","esp_idf_hal::sys::http_client_init_cb_t","esp_idf_hal::sys::connect_func","esp_idf_hal::sys::io_func","esp_idf_hal::sys::io_read_func","esp_idf_hal::sys::trans_func","esp_idf_hal::sys::poll_func","esp_idf_hal::sys::connect_async_func","esp_idf_hal::sys::payload_transfer_func","esp_idf_hal::sys::http_data_cb","esp_idf_hal::sys::http_cb","esp_idf_hal::sys::httpd_free_ctx_fn_t","esp_idf_hal::sys::httpd_open_func_t","esp_idf_hal::sys::httpd_close_func_t","esp_idf_hal::sys::httpd_uri_match_func_t","esp_idf_hal::sys::httpd_err_handler_func_t","esp_idf_hal::sys::httpd_send_func_t","esp_idf_hal::sys::httpd_recv_func_t","esp_idf_hal::sys::httpd_pending_func_t","esp_idf_hal::sys::httpd_work_fn_t","esp_idf_hal::sys::nvs_flash_generate_keys_t","esp_idf_hal::sys::nvs_flash_read_cfg_t","esp_idf_hal::sys::protocomm_req_handler_t","esp_idf_hal::sys::wifi_prov_cb_func_t","esp_idf_hal::sys::adc_continuous_callback_t","esp_idf_hal::sys::gptimer_alarm_cb_t","esp_idf_hal::sys::i2c_master_callback_t","esp_idf_hal::sys::i2c_slave_received_callback_t","esp_idf_hal::sys::i2c_slave_stretch_callback_t","esp_idf_hal::sys::i2s_isr_callback_t","esp_idf_hal::sys::ledc_cb_t","esp_idf_hal::sys::mcpwm_timer_event_cb_t","esp_idf_hal::sys::mcpwm_brake_event_cb_t","esp_idf_hal::sys::mcpwm_fault_event_cb_t","esp_idf_hal::sys::mcpwm_compare_event_cb_t","esp_idf_hal::sys::mcpwm_capture_event_cb_t","esp_idf_hal::sys::rmt_tx_end_fn_t","esp_idf_hal::sys::sample_to_rmt_t","esp_idf_hal::sys::rmt_tx_done_callback_t","esp_idf_hal::sys::rmt_rx_done_callback_t","esp_idf_hal::sys::rmt_encode_simple_cb_t","esp_idf_hal::sys::slave_transaction_cb_t","esp_idf_hal::sys::timer_isr_t","esp_idf_hal::sys::uart_select_notif_callback_t","esp_idf_hal::sys::panic_info_dump_fn_t","esp_idf_hal::sys::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Ord for Option&lt;T&gt;<div class=\"where\">where\n    T: Ord,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">cmp</a>(&amp;self, other: &amp;Option&lt;T&gt;) -&gt; Ordering</h4></section></summary><div class='docblock'>This method returns an [<code>Ordering</code>] between <code>self</code> and <code>other</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.21.0\">1.21.0</span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.21.0\">1.21.0</span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.50.0\">1.50.0</span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a>Read more</a></div></details></div></details>","Ord","esp_idf_hal::sys::__compar_fn_t","esp_idf_hal::sys::shutdown_handler_t","esp_idf_hal::sys::vprintf_like_t","esp_idf_hal::sys::intr_handler_t","esp_idf_hal::sys::esp_cpu_intr_handler_t","esp_idf_hal::sys::esp_deep_sleep_cb_t","esp_idf_hal::sys::esp_deep_sleep_wake_stub_fn_t","esp_idf_hal::sys::TaskFunction_t","esp_idf_hal::sys::multi_heap_walker_cb_t","esp_idf_hal::sys::esp_alloc_failed_hook_t","esp_idf_hal::sys::heap_caps_walker_cb_t","esp_idf_hal::sys::TaskHookFunction_t","esp_idf_hal::sys::StreamBufferCallbackFunction_t","esp_idf_hal::sys::TimerCallbackFunction_t","esp_idf_hal::sys::PendedFunction_t","esp_idf_hal::sys::TlsDeleteCallbackFunction_t","esp_idf_hal::sys::task_wdt_msg_handler","esp_idf_hal::sys::esp_freertos_idle_cb_t","esp_idf_hal::sys::esp_freertos_tick_cb_t","esp_idf_hal::sys::esp_console_cmd_func_t","esp_idf_hal::sys::esp_console_cmd_func_with_context_t","esp_idf_hal::sys::linenoiseCompletionCallback","esp_idf_hal::sys::linenoiseHintsCallback","esp_idf_hal::sys::linenoiseFreeHintsCallback","esp_idf_hal::sys::_sig_func_ptr","esp_idf_hal::sys::sig_t","esp_idf_hal::sys::arg_resetfn","esp_idf_hal::sys::arg_scanfn","esp_idf_hal::sys::arg_checkfn","esp_idf_hal::sys::arg_errorfn","esp_idf_hal::sys::arg_dstr_freefn","esp_idf_hal::sys::arg_cmdfn","esp_idf_hal::sys::arg_comparefn","esp_idf_hal::sys::esp_timer_cb_t","esp_idf_hal::sys::esp_event_handler_t","esp_idf_hal::sys::esp_netif_receive_t","esp_idf_hal::sys::esp_netif_find_predicate_t","esp_idf_hal::sys::esp_netif_callback_fn","esp_idf_hal::sys::wifi_action_rx_cb_t","esp_idf_hal::sys::esp_aes_128_encrypt_t","esp_idf_hal::sys::esp_aes_128_decrypt_t","esp_idf_hal::sys::esp_aes_wrap_t","esp_idf_hal::sys::esp_aes_unwrap_t","esp_idf_hal::sys::esp_hmac_sha256_vector_t","esp_idf_hal::sys::esp_sha256_prf_t","esp_idf_hal::sys::esp_hmac_md5_t","esp_idf_hal::sys::esp_hmac_md5_vector_t","esp_idf_hal::sys::esp_hmac_sha1_t","esp_idf_hal::sys::esp_hmac_sha1_vector_t","esp_idf_hal::sys::esp_sha1_prf_t","esp_idf_hal::sys::esp_sha1_vector_t","esp_idf_hal::sys::esp_pbkdf2_sha1_t","esp_idf_hal::sys::esp_rc4_skip_t","esp_idf_hal::sys::esp_md5_vector_t","esp_idf_hal::sys::esp_aes_encrypt_t","esp_idf_hal::sys::esp_aes_encrypt_init_t","esp_idf_hal::sys::esp_aes_encrypt_deinit_t","esp_idf_hal::sys::esp_aes_decrypt_t","esp_idf_hal::sys::esp_aes_decrypt_init_t","esp_idf_hal::sys::esp_aes_decrypt_deinit_t","esp_idf_hal::sys::esp_omac1_aes_128_t","esp_idf_hal::sys::esp_ccmp_decrypt_t","esp_idf_hal::sys::esp_ccmp_encrypt_t","esp_idf_hal::sys::esp_aes_gmac_t","esp_idf_hal::sys::esp_sha256_vector_t","esp_idf_hal::sys::esp_crc32_le_t","esp_idf_hal::sys::wifi_promiscuous_cb_t","esp_idf_hal::sys::esp_vendor_ie_cb_t","esp_idf_hal::sys::wifi_csi_cb_t","esp_idf_hal::sys::esp_now_recv_cb_t","esp_idf_hal::sys::esp_now_send_cb_t","esp_idf_hal::sys::wifi_netstack_buf_ref_cb_t","esp_idf_hal::sys::wifi_netstack_buf_free_cb_t","esp_idf_hal::sys::wifi_rxcb_t","esp_idf_hal::sys::wifi_mac_time_update_cb_t","esp_idf_hal::sys::wifi_tx_done_cb_t","esp_idf_hal::sys::neighbor_rep_request_cb","esp_idf_hal::sys::transaction_cb_t","esp_idf_hal::sys::gpio_isr_t","esp_idf_hal::sys::dns_found_callback","esp_idf_hal::sys::pbuf_free_custom_fn","esp_idf_hal::sys::netif_init_fn","esp_idf_hal::sys::netif_input_fn","esp_idf_hal::sys::netif_output_fn","esp_idf_hal::sys::netif_output_ip6_fn","esp_idf_hal::sys::netif_linkoutput_fn","esp_idf_hal::sys::netif_status_callback_fn","esp_idf_hal::sys::netif_igmp_mac_filter_fn","esp_idf_hal::sys::netif_mld_mac_filter_fn","esp_idf_hal::sys::netif_ext_callback_fn","esp_idf_hal::sys::init_fn_t","esp_idf_hal::sys::input_fn_t","esp_idf_hal::sys::sntp_sync_time_cb_t","esp_idf_hal::sys::esp_sntp_time_cb_t","esp_idf_hal::sys::ETSTask","esp_idf_hal::sys::ets_idle_cb_t","esp_idf_hal::sys::ETSTimerFunc","esp_idf_hal::sys::ets_isr_t","esp_idf_hal::sys::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_sign_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_key_len_func","esp_idf_hal::sys::mbedtls_x509_crt_ext_cb_t","esp_idf_hal::sys::mbedtls_x509_crt_ca_cb_t","esp_idf_hal::sys::mbedtls_ssl_send_t","esp_idf_hal::sys::mbedtls_ssl_recv_t","esp_idf_hal::sys::mbedtls_ssl_recv_timeout_t","esp_idf_hal::sys::mbedtls_ssl_set_timer_t","esp_idf_hal::sys::mbedtls_ssl_get_timer_t","esp_idf_hal::sys::mbedtls_ssl_cache_get_t","esp_idf_hal::sys::mbedtls_ssl_cache_set_t","esp_idf_hal::sys::mbedtls_ssl_export_keys_t","esp_idf_hal::sys::mbedtls_ssl_hs_cb_t","esp_idf_hal::sys::mbedtls_ssl_ticket_write_t","esp_idf_hal::sys::mbedtls_ssl_ticket_parse_t","esp_idf_hal::sys::mbedtls_ssl_cookie_write_t","esp_idf_hal::sys::mbedtls_ssl_cookie_check_t","esp_idf_hal::sys::mbedtls_entropy_f_source_ptr","esp_idf_hal::sys::http_event_handle_cb","esp_idf_hal::sys::http_client_init_cb_t","esp_idf_hal::sys::connect_func","esp_idf_hal::sys::io_func","esp_idf_hal::sys::io_read_func","esp_idf_hal::sys::trans_func","esp_idf_hal::sys::poll_func","esp_idf_hal::sys::connect_async_func","esp_idf_hal::sys::payload_transfer_func","esp_idf_hal::sys::http_data_cb","esp_idf_hal::sys::http_cb","esp_idf_hal::sys::httpd_free_ctx_fn_t","esp_idf_hal::sys::httpd_open_func_t","esp_idf_hal::sys::httpd_close_func_t","esp_idf_hal::sys::httpd_uri_match_func_t","esp_idf_hal::sys::httpd_err_handler_func_t","esp_idf_hal::sys::httpd_send_func_t","esp_idf_hal::sys::httpd_recv_func_t","esp_idf_hal::sys::httpd_pending_func_t","esp_idf_hal::sys::httpd_work_fn_t","esp_idf_hal::sys::nvs_flash_generate_keys_t","esp_idf_hal::sys::nvs_flash_read_cfg_t","esp_idf_hal::sys::protocomm_req_handler_t","esp_idf_hal::sys::wifi_prov_cb_func_t","esp_idf_hal::sys::adc_continuous_callback_t","esp_idf_hal::sys::gptimer_alarm_cb_t","esp_idf_hal::sys::i2c_master_callback_t","esp_idf_hal::sys::i2c_slave_received_callback_t","esp_idf_hal::sys::i2c_slave_stretch_callback_t","esp_idf_hal::sys::i2s_isr_callback_t","esp_idf_hal::sys::ledc_cb_t","esp_idf_hal::sys::mcpwm_timer_event_cb_t","esp_idf_hal::sys::mcpwm_brake_event_cb_t","esp_idf_hal::sys::mcpwm_fault_event_cb_t","esp_idf_hal::sys::mcpwm_compare_event_cb_t","esp_idf_hal::sys::mcpwm_capture_event_cb_t","esp_idf_hal::sys::rmt_tx_end_fn_t","esp_idf_hal::sys::sample_to_rmt_t","esp_idf_hal::sys::rmt_tx_done_callback_t","esp_idf_hal::sys::rmt_rx_done_callback_t","esp_idf_hal::sys::rmt_encode_simple_cb_t","esp_idf_hal::sys::slave_transaction_cb_t","esp_idf_hal::sys::timer_isr_t","esp_idf_hal::sys::uart_select_notif_callback_t","esp_idf_hal::sys::panic_info_dump_fn_t","esp_idf_hal::sys::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; PartialEq for Option&lt;T&gt;<div class=\"where\">where\n    T: PartialEq,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">eq</a>(&amp;self, other: &amp;Option&lt;T&gt;) -&gt; bool</h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ne</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","esp_idf_hal::sys::__compar_fn_t","esp_idf_hal::sys::shutdown_handler_t","esp_idf_hal::sys::vprintf_like_t","esp_idf_hal::sys::intr_handler_t","esp_idf_hal::sys::esp_cpu_intr_handler_t","esp_idf_hal::sys::esp_deep_sleep_cb_t","esp_idf_hal::sys::esp_deep_sleep_wake_stub_fn_t","esp_idf_hal::sys::TaskFunction_t","esp_idf_hal::sys::multi_heap_walker_cb_t","esp_idf_hal::sys::esp_alloc_failed_hook_t","esp_idf_hal::sys::heap_caps_walker_cb_t","esp_idf_hal::sys::TaskHookFunction_t","esp_idf_hal::sys::StreamBufferCallbackFunction_t","esp_idf_hal::sys::TimerCallbackFunction_t","esp_idf_hal::sys::PendedFunction_t","esp_idf_hal::sys::TlsDeleteCallbackFunction_t","esp_idf_hal::sys::task_wdt_msg_handler","esp_idf_hal::sys::esp_freertos_idle_cb_t","esp_idf_hal::sys::esp_freertos_tick_cb_t","esp_idf_hal::sys::esp_console_cmd_func_t","esp_idf_hal::sys::esp_console_cmd_func_with_context_t","esp_idf_hal::sys::linenoiseCompletionCallback","esp_idf_hal::sys::linenoiseHintsCallback","esp_idf_hal::sys::linenoiseFreeHintsCallback","esp_idf_hal::sys::_sig_func_ptr","esp_idf_hal::sys::sig_t","esp_idf_hal::sys::arg_resetfn","esp_idf_hal::sys::arg_scanfn","esp_idf_hal::sys::arg_checkfn","esp_idf_hal::sys::arg_errorfn","esp_idf_hal::sys::arg_dstr_freefn","esp_idf_hal::sys::arg_cmdfn","esp_idf_hal::sys::arg_comparefn","esp_idf_hal::sys::esp_timer_cb_t","esp_idf_hal::sys::esp_event_handler_t","esp_idf_hal::sys::esp_netif_receive_t","esp_idf_hal::sys::esp_netif_find_predicate_t","esp_idf_hal::sys::esp_netif_callback_fn","esp_idf_hal::sys::wifi_action_rx_cb_t","esp_idf_hal::sys::esp_aes_128_encrypt_t","esp_idf_hal::sys::esp_aes_128_decrypt_t","esp_idf_hal::sys::esp_aes_wrap_t","esp_idf_hal::sys::esp_aes_unwrap_t","esp_idf_hal::sys::esp_hmac_sha256_vector_t","esp_idf_hal::sys::esp_sha256_prf_t","esp_idf_hal::sys::esp_hmac_md5_t","esp_idf_hal::sys::esp_hmac_md5_vector_t","esp_idf_hal::sys::esp_hmac_sha1_t","esp_idf_hal::sys::esp_hmac_sha1_vector_t","esp_idf_hal::sys::esp_sha1_prf_t","esp_idf_hal::sys::esp_sha1_vector_t","esp_idf_hal::sys::esp_pbkdf2_sha1_t","esp_idf_hal::sys::esp_rc4_skip_t","esp_idf_hal::sys::esp_md5_vector_t","esp_idf_hal::sys::esp_aes_encrypt_t","esp_idf_hal::sys::esp_aes_encrypt_init_t","esp_idf_hal::sys::esp_aes_encrypt_deinit_t","esp_idf_hal::sys::esp_aes_decrypt_t","esp_idf_hal::sys::esp_aes_decrypt_init_t","esp_idf_hal::sys::esp_aes_decrypt_deinit_t","esp_idf_hal::sys::esp_omac1_aes_128_t","esp_idf_hal::sys::esp_ccmp_decrypt_t","esp_idf_hal::sys::esp_ccmp_encrypt_t","esp_idf_hal::sys::esp_aes_gmac_t","esp_idf_hal::sys::esp_sha256_vector_t","esp_idf_hal::sys::esp_crc32_le_t","esp_idf_hal::sys::wifi_promiscuous_cb_t","esp_idf_hal::sys::esp_vendor_ie_cb_t","esp_idf_hal::sys::wifi_csi_cb_t","esp_idf_hal::sys::esp_now_recv_cb_t","esp_idf_hal::sys::esp_now_send_cb_t","esp_idf_hal::sys::wifi_netstack_buf_ref_cb_t","esp_idf_hal::sys::wifi_netstack_buf_free_cb_t","esp_idf_hal::sys::wifi_rxcb_t","esp_idf_hal::sys::wifi_mac_time_update_cb_t","esp_idf_hal::sys::wifi_tx_done_cb_t","esp_idf_hal::sys::neighbor_rep_request_cb","esp_idf_hal::sys::transaction_cb_t","esp_idf_hal::sys::gpio_isr_t","esp_idf_hal::sys::dns_found_callback","esp_idf_hal::sys::pbuf_free_custom_fn","esp_idf_hal::sys::netif_init_fn","esp_idf_hal::sys::netif_input_fn","esp_idf_hal::sys::netif_output_fn","esp_idf_hal::sys::netif_output_ip6_fn","esp_idf_hal::sys::netif_linkoutput_fn","esp_idf_hal::sys::netif_status_callback_fn","esp_idf_hal::sys::netif_igmp_mac_filter_fn","esp_idf_hal::sys::netif_mld_mac_filter_fn","esp_idf_hal::sys::netif_ext_callback_fn","esp_idf_hal::sys::init_fn_t","esp_idf_hal::sys::input_fn_t","esp_idf_hal::sys::sntp_sync_time_cb_t","esp_idf_hal::sys::esp_sntp_time_cb_t","esp_idf_hal::sys::ETSTask","esp_idf_hal::sys::ets_idle_cb_t","esp_idf_hal::sys::ETSTimerFunc","esp_idf_hal::sys::ets_isr_t","esp_idf_hal::sys::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_sign_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_key_len_func","esp_idf_hal::sys::mbedtls_x509_crt_ext_cb_t","esp_idf_hal::sys::mbedtls_x509_crt_ca_cb_t","esp_idf_hal::sys::mbedtls_ssl_send_t","esp_idf_hal::sys::mbedtls_ssl_recv_t","esp_idf_hal::sys::mbedtls_ssl_recv_timeout_t","esp_idf_hal::sys::mbedtls_ssl_set_timer_t","esp_idf_hal::sys::mbedtls_ssl_get_timer_t","esp_idf_hal::sys::mbedtls_ssl_cache_get_t","esp_idf_hal::sys::mbedtls_ssl_cache_set_t","esp_idf_hal::sys::mbedtls_ssl_export_keys_t","esp_idf_hal::sys::mbedtls_ssl_hs_cb_t","esp_idf_hal::sys::mbedtls_ssl_ticket_write_t","esp_idf_hal::sys::mbedtls_ssl_ticket_parse_t","esp_idf_hal::sys::mbedtls_ssl_cookie_write_t","esp_idf_hal::sys::mbedtls_ssl_cookie_check_t","esp_idf_hal::sys::mbedtls_entropy_f_source_ptr","esp_idf_hal::sys::http_event_handle_cb","esp_idf_hal::sys::http_client_init_cb_t","esp_idf_hal::sys::connect_func","esp_idf_hal::sys::io_func","esp_idf_hal::sys::io_read_func","esp_idf_hal::sys::trans_func","esp_idf_hal::sys::poll_func","esp_idf_hal::sys::connect_async_func","esp_idf_hal::sys::payload_transfer_func","esp_idf_hal::sys::http_data_cb","esp_idf_hal::sys::http_cb","esp_idf_hal::sys::httpd_free_ctx_fn_t","esp_idf_hal::sys::httpd_open_func_t","esp_idf_hal::sys::httpd_close_func_t","esp_idf_hal::sys::httpd_uri_match_func_t","esp_idf_hal::sys::httpd_err_handler_func_t","esp_idf_hal::sys::httpd_send_func_t","esp_idf_hal::sys::httpd_recv_func_t","esp_idf_hal::sys::httpd_pending_func_t","esp_idf_hal::sys::httpd_work_fn_t","esp_idf_hal::sys::nvs_flash_generate_keys_t","esp_idf_hal::sys::nvs_flash_read_cfg_t","esp_idf_hal::sys::protocomm_req_handler_t","esp_idf_hal::sys::wifi_prov_cb_func_t","esp_idf_hal::sys::adc_continuous_callback_t","esp_idf_hal::sys::gptimer_alarm_cb_t","esp_idf_hal::sys::i2c_master_callback_t","esp_idf_hal::sys::i2c_slave_received_callback_t","esp_idf_hal::sys::i2c_slave_stretch_callback_t","esp_idf_hal::sys::i2s_isr_callback_t","esp_idf_hal::sys::ledc_cb_t","esp_idf_hal::sys::mcpwm_timer_event_cb_t","esp_idf_hal::sys::mcpwm_brake_event_cb_t","esp_idf_hal::sys::mcpwm_fault_event_cb_t","esp_idf_hal::sys::mcpwm_compare_event_cb_t","esp_idf_hal::sys::mcpwm_capture_event_cb_t","esp_idf_hal::sys::rmt_tx_end_fn_t","esp_idf_hal::sys::sample_to_rmt_t","esp_idf_hal::sys::rmt_tx_done_callback_t","esp_idf_hal::sys::rmt_rx_done_callback_t","esp_idf_hal::sys::rmt_encode_simple_cb_t","esp_idf_hal::sys::slave_transaction_cb_t","esp_idf_hal::sys::timer_isr_t","esp_idf_hal::sys::uart_select_notif_callback_t","esp_idf_hal::sys::panic_info_dump_fn_t","esp_idf_hal::sys::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; PartialOrd for Option&lt;T&gt;<div class=\"where\">where\n    T: PartialOrd,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;Option&lt;T&gt;) -&gt; Option&lt;Ordering&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lt</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">le</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">gt</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ge</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a>Read more</a></div></details></div></details>","PartialOrd","esp_idf_hal::sys::__compar_fn_t","esp_idf_hal::sys::shutdown_handler_t","esp_idf_hal::sys::vprintf_like_t","esp_idf_hal::sys::intr_handler_t","esp_idf_hal::sys::esp_cpu_intr_handler_t","esp_idf_hal::sys::esp_deep_sleep_cb_t","esp_idf_hal::sys::esp_deep_sleep_wake_stub_fn_t","esp_idf_hal::sys::TaskFunction_t","esp_idf_hal::sys::multi_heap_walker_cb_t","esp_idf_hal::sys::esp_alloc_failed_hook_t","esp_idf_hal::sys::heap_caps_walker_cb_t","esp_idf_hal::sys::TaskHookFunction_t","esp_idf_hal::sys::StreamBufferCallbackFunction_t","esp_idf_hal::sys::TimerCallbackFunction_t","esp_idf_hal::sys::PendedFunction_t","esp_idf_hal::sys::TlsDeleteCallbackFunction_t","esp_idf_hal::sys::task_wdt_msg_handler","esp_idf_hal::sys::esp_freertos_idle_cb_t","esp_idf_hal::sys::esp_freertos_tick_cb_t","esp_idf_hal::sys::esp_console_cmd_func_t","esp_idf_hal::sys::esp_console_cmd_func_with_context_t","esp_idf_hal::sys::linenoiseCompletionCallback","esp_idf_hal::sys::linenoiseHintsCallback","esp_idf_hal::sys::linenoiseFreeHintsCallback","esp_idf_hal::sys::_sig_func_ptr","esp_idf_hal::sys::sig_t","esp_idf_hal::sys::arg_resetfn","esp_idf_hal::sys::arg_scanfn","esp_idf_hal::sys::arg_checkfn","esp_idf_hal::sys::arg_errorfn","esp_idf_hal::sys::arg_dstr_freefn","esp_idf_hal::sys::arg_cmdfn","esp_idf_hal::sys::arg_comparefn","esp_idf_hal::sys::esp_timer_cb_t","esp_idf_hal::sys::esp_event_handler_t","esp_idf_hal::sys::esp_netif_receive_t","esp_idf_hal::sys::esp_netif_find_predicate_t","esp_idf_hal::sys::esp_netif_callback_fn","esp_idf_hal::sys::wifi_action_rx_cb_t","esp_idf_hal::sys::esp_aes_128_encrypt_t","esp_idf_hal::sys::esp_aes_128_decrypt_t","esp_idf_hal::sys::esp_aes_wrap_t","esp_idf_hal::sys::esp_aes_unwrap_t","esp_idf_hal::sys::esp_hmac_sha256_vector_t","esp_idf_hal::sys::esp_sha256_prf_t","esp_idf_hal::sys::esp_hmac_md5_t","esp_idf_hal::sys::esp_hmac_md5_vector_t","esp_idf_hal::sys::esp_hmac_sha1_t","esp_idf_hal::sys::esp_hmac_sha1_vector_t","esp_idf_hal::sys::esp_sha1_prf_t","esp_idf_hal::sys::esp_sha1_vector_t","esp_idf_hal::sys::esp_pbkdf2_sha1_t","esp_idf_hal::sys::esp_rc4_skip_t","esp_idf_hal::sys::esp_md5_vector_t","esp_idf_hal::sys::esp_aes_encrypt_t","esp_idf_hal::sys::esp_aes_encrypt_init_t","esp_idf_hal::sys::esp_aes_encrypt_deinit_t","esp_idf_hal::sys::esp_aes_decrypt_t","esp_idf_hal::sys::esp_aes_decrypt_init_t","esp_idf_hal::sys::esp_aes_decrypt_deinit_t","esp_idf_hal::sys::esp_omac1_aes_128_t","esp_idf_hal::sys::esp_ccmp_decrypt_t","esp_idf_hal::sys::esp_ccmp_encrypt_t","esp_idf_hal::sys::esp_aes_gmac_t","esp_idf_hal::sys::esp_sha256_vector_t","esp_idf_hal::sys::esp_crc32_le_t","esp_idf_hal::sys::wifi_promiscuous_cb_t","esp_idf_hal::sys::esp_vendor_ie_cb_t","esp_idf_hal::sys::wifi_csi_cb_t","esp_idf_hal::sys::esp_now_recv_cb_t","esp_idf_hal::sys::esp_now_send_cb_t","esp_idf_hal::sys::wifi_netstack_buf_ref_cb_t","esp_idf_hal::sys::wifi_netstack_buf_free_cb_t","esp_idf_hal::sys::wifi_rxcb_t","esp_idf_hal::sys::wifi_mac_time_update_cb_t","esp_idf_hal::sys::wifi_tx_done_cb_t","esp_idf_hal::sys::neighbor_rep_request_cb","esp_idf_hal::sys::transaction_cb_t","esp_idf_hal::sys::gpio_isr_t","esp_idf_hal::sys::dns_found_callback","esp_idf_hal::sys::pbuf_free_custom_fn","esp_idf_hal::sys::netif_init_fn","esp_idf_hal::sys::netif_input_fn","esp_idf_hal::sys::netif_output_fn","esp_idf_hal::sys::netif_output_ip6_fn","esp_idf_hal::sys::netif_linkoutput_fn","esp_idf_hal::sys::netif_status_callback_fn","esp_idf_hal::sys::netif_igmp_mac_filter_fn","esp_idf_hal::sys::netif_mld_mac_filter_fn","esp_idf_hal::sys::netif_ext_callback_fn","esp_idf_hal::sys::init_fn_t","esp_idf_hal::sys::input_fn_t","esp_idf_hal::sys::sntp_sync_time_cb_t","esp_idf_hal::sys::esp_sntp_time_cb_t","esp_idf_hal::sys::ETSTask","esp_idf_hal::sys::ets_idle_cb_t","esp_idf_hal::sys::ETSTimerFunc","esp_idf_hal::sys::ets_isr_t","esp_idf_hal::sys::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_sign_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_key_len_func","esp_idf_hal::sys::mbedtls_x509_crt_ext_cb_t","esp_idf_hal::sys::mbedtls_x509_crt_ca_cb_t","esp_idf_hal::sys::mbedtls_ssl_send_t","esp_idf_hal::sys::mbedtls_ssl_recv_t","esp_idf_hal::sys::mbedtls_ssl_recv_timeout_t","esp_idf_hal::sys::mbedtls_ssl_set_timer_t","esp_idf_hal::sys::mbedtls_ssl_get_timer_t","esp_idf_hal::sys::mbedtls_ssl_cache_get_t","esp_idf_hal::sys::mbedtls_ssl_cache_set_t","esp_idf_hal::sys::mbedtls_ssl_export_keys_t","esp_idf_hal::sys::mbedtls_ssl_hs_cb_t","esp_idf_hal::sys::mbedtls_ssl_ticket_write_t","esp_idf_hal::sys::mbedtls_ssl_ticket_parse_t","esp_idf_hal::sys::mbedtls_ssl_cookie_write_t","esp_idf_hal::sys::mbedtls_ssl_cookie_check_t","esp_idf_hal::sys::mbedtls_entropy_f_source_ptr","esp_idf_hal::sys::http_event_handle_cb","esp_idf_hal::sys::http_client_init_cb_t","esp_idf_hal::sys::connect_func","esp_idf_hal::sys::io_func","esp_idf_hal::sys::io_read_func","esp_idf_hal::sys::trans_func","esp_idf_hal::sys::poll_func","esp_idf_hal::sys::connect_async_func","esp_idf_hal::sys::payload_transfer_func","esp_idf_hal::sys::http_data_cb","esp_idf_hal::sys::http_cb","esp_idf_hal::sys::httpd_free_ctx_fn_t","esp_idf_hal::sys::httpd_open_func_t","esp_idf_hal::sys::httpd_close_func_t","esp_idf_hal::sys::httpd_uri_match_func_t","esp_idf_hal::sys::httpd_err_handler_func_t","esp_idf_hal::sys::httpd_send_func_t","esp_idf_hal::sys::httpd_recv_func_t","esp_idf_hal::sys::httpd_pending_func_t","esp_idf_hal::sys::httpd_work_fn_t","esp_idf_hal::sys::nvs_flash_generate_keys_t","esp_idf_hal::sys::nvs_flash_read_cfg_t","esp_idf_hal::sys::protocomm_req_handler_t","esp_idf_hal::sys::wifi_prov_cb_func_t","esp_idf_hal::sys::adc_continuous_callback_t","esp_idf_hal::sys::gptimer_alarm_cb_t","esp_idf_hal::sys::i2c_master_callback_t","esp_idf_hal::sys::i2c_slave_received_callback_t","esp_idf_hal::sys::i2c_slave_stretch_callback_t","esp_idf_hal::sys::i2s_isr_callback_t","esp_idf_hal::sys::ledc_cb_t","esp_idf_hal::sys::mcpwm_timer_event_cb_t","esp_idf_hal::sys::mcpwm_brake_event_cb_t","esp_idf_hal::sys::mcpwm_fault_event_cb_t","esp_idf_hal::sys::mcpwm_compare_event_cb_t","esp_idf_hal::sys::mcpwm_capture_event_cb_t","esp_idf_hal::sys::rmt_tx_end_fn_t","esp_idf_hal::sys::sample_to_rmt_t","esp_idf_hal::sys::rmt_tx_done_callback_t","esp_idf_hal::sys::rmt_rx_done_callback_t","esp_idf_hal::sys::rmt_encode_simple_cb_t","esp_idf_hal::sys::slave_transaction_cb_t","esp_idf_hal::sys::timer_isr_t","esp_idf_hal::sys::uart_select_notif_callback_t","esp_idf_hal::sys::panic_info_dump_fn_t","esp_idf_hal::sys::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.37.0\">1.37.0</span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; Product&lt;Option&lt;U&gt;&gt; for Option&lt;T&gt;<div class=\"where\">where\n    T: Product&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; Option&lt;T&gt;<div class=\"where\">where\n    I: Iterator&lt;Item = Option&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the [<code>Iterator</code>]: if it is a [<code>None</code>], no further\nelements are taken, and the [<code>None</code>] is returned. Should no [<code>None</code>]\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Product<Option<U>>","esp_idf_hal::sys::__compar_fn_t","esp_idf_hal::sys::shutdown_handler_t","esp_idf_hal::sys::vprintf_like_t","esp_idf_hal::sys::intr_handler_t","esp_idf_hal::sys::esp_cpu_intr_handler_t","esp_idf_hal::sys::esp_deep_sleep_cb_t","esp_idf_hal::sys::esp_deep_sleep_wake_stub_fn_t","esp_idf_hal::sys::TaskFunction_t","esp_idf_hal::sys::multi_heap_walker_cb_t","esp_idf_hal::sys::esp_alloc_failed_hook_t","esp_idf_hal::sys::heap_caps_walker_cb_t","esp_idf_hal::sys::TaskHookFunction_t","esp_idf_hal::sys::StreamBufferCallbackFunction_t","esp_idf_hal::sys::TimerCallbackFunction_t","esp_idf_hal::sys::PendedFunction_t","esp_idf_hal::sys::TlsDeleteCallbackFunction_t","esp_idf_hal::sys::task_wdt_msg_handler","esp_idf_hal::sys::esp_freertos_idle_cb_t","esp_idf_hal::sys::esp_freertos_tick_cb_t","esp_idf_hal::sys::esp_console_cmd_func_t","esp_idf_hal::sys::esp_console_cmd_func_with_context_t","esp_idf_hal::sys::linenoiseCompletionCallback","esp_idf_hal::sys::linenoiseHintsCallback","esp_idf_hal::sys::linenoiseFreeHintsCallback","esp_idf_hal::sys::_sig_func_ptr","esp_idf_hal::sys::sig_t","esp_idf_hal::sys::arg_resetfn","esp_idf_hal::sys::arg_scanfn","esp_idf_hal::sys::arg_checkfn","esp_idf_hal::sys::arg_errorfn","esp_idf_hal::sys::arg_dstr_freefn","esp_idf_hal::sys::arg_cmdfn","esp_idf_hal::sys::arg_comparefn","esp_idf_hal::sys::esp_timer_cb_t","esp_idf_hal::sys::esp_event_handler_t","esp_idf_hal::sys::esp_netif_receive_t","esp_idf_hal::sys::esp_netif_find_predicate_t","esp_idf_hal::sys::esp_netif_callback_fn","esp_idf_hal::sys::wifi_action_rx_cb_t","esp_idf_hal::sys::esp_aes_128_encrypt_t","esp_idf_hal::sys::esp_aes_128_decrypt_t","esp_idf_hal::sys::esp_aes_wrap_t","esp_idf_hal::sys::esp_aes_unwrap_t","esp_idf_hal::sys::esp_hmac_sha256_vector_t","esp_idf_hal::sys::esp_sha256_prf_t","esp_idf_hal::sys::esp_hmac_md5_t","esp_idf_hal::sys::esp_hmac_md5_vector_t","esp_idf_hal::sys::esp_hmac_sha1_t","esp_idf_hal::sys::esp_hmac_sha1_vector_t","esp_idf_hal::sys::esp_sha1_prf_t","esp_idf_hal::sys::esp_sha1_vector_t","esp_idf_hal::sys::esp_pbkdf2_sha1_t","esp_idf_hal::sys::esp_rc4_skip_t","esp_idf_hal::sys::esp_md5_vector_t","esp_idf_hal::sys::esp_aes_encrypt_t","esp_idf_hal::sys::esp_aes_encrypt_init_t","esp_idf_hal::sys::esp_aes_encrypt_deinit_t","esp_idf_hal::sys::esp_aes_decrypt_t","esp_idf_hal::sys::esp_aes_decrypt_init_t","esp_idf_hal::sys::esp_aes_decrypt_deinit_t","esp_idf_hal::sys::esp_omac1_aes_128_t","esp_idf_hal::sys::esp_ccmp_decrypt_t","esp_idf_hal::sys::esp_ccmp_encrypt_t","esp_idf_hal::sys::esp_aes_gmac_t","esp_idf_hal::sys::esp_sha256_vector_t","esp_idf_hal::sys::esp_crc32_le_t","esp_idf_hal::sys::wifi_promiscuous_cb_t","esp_idf_hal::sys::esp_vendor_ie_cb_t","esp_idf_hal::sys::wifi_csi_cb_t","esp_idf_hal::sys::esp_now_recv_cb_t","esp_idf_hal::sys::esp_now_send_cb_t","esp_idf_hal::sys::wifi_netstack_buf_ref_cb_t","esp_idf_hal::sys::wifi_netstack_buf_free_cb_t","esp_idf_hal::sys::wifi_rxcb_t","esp_idf_hal::sys::wifi_mac_time_update_cb_t","esp_idf_hal::sys::wifi_tx_done_cb_t","esp_idf_hal::sys::neighbor_rep_request_cb","esp_idf_hal::sys::transaction_cb_t","esp_idf_hal::sys::gpio_isr_t","esp_idf_hal::sys::dns_found_callback","esp_idf_hal::sys::pbuf_free_custom_fn","esp_idf_hal::sys::netif_init_fn","esp_idf_hal::sys::netif_input_fn","esp_idf_hal::sys::netif_output_fn","esp_idf_hal::sys::netif_output_ip6_fn","esp_idf_hal::sys::netif_linkoutput_fn","esp_idf_hal::sys::netif_status_callback_fn","esp_idf_hal::sys::netif_igmp_mac_filter_fn","esp_idf_hal::sys::netif_mld_mac_filter_fn","esp_idf_hal::sys::netif_ext_callback_fn","esp_idf_hal::sys::init_fn_t","esp_idf_hal::sys::input_fn_t","esp_idf_hal::sys::sntp_sync_time_cb_t","esp_idf_hal::sys::esp_sntp_time_cb_t","esp_idf_hal::sys::ETSTask","esp_idf_hal::sys::ets_idle_cb_t","esp_idf_hal::sys::ETSTimerFunc","esp_idf_hal::sys::ets_isr_t","esp_idf_hal::sys::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_sign_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_key_len_func","esp_idf_hal::sys::mbedtls_x509_crt_ext_cb_t","esp_idf_hal::sys::mbedtls_x509_crt_ca_cb_t","esp_idf_hal::sys::mbedtls_ssl_send_t","esp_idf_hal::sys::mbedtls_ssl_recv_t","esp_idf_hal::sys::mbedtls_ssl_recv_timeout_t","esp_idf_hal::sys::mbedtls_ssl_set_timer_t","esp_idf_hal::sys::mbedtls_ssl_get_timer_t","esp_idf_hal::sys::mbedtls_ssl_cache_get_t","esp_idf_hal::sys::mbedtls_ssl_cache_set_t","esp_idf_hal::sys::mbedtls_ssl_export_keys_t","esp_idf_hal::sys::mbedtls_ssl_hs_cb_t","esp_idf_hal::sys::mbedtls_ssl_ticket_write_t","esp_idf_hal::sys::mbedtls_ssl_ticket_parse_t","esp_idf_hal::sys::mbedtls_ssl_cookie_write_t","esp_idf_hal::sys::mbedtls_ssl_cookie_check_t","esp_idf_hal::sys::mbedtls_entropy_f_source_ptr","esp_idf_hal::sys::http_event_handle_cb","esp_idf_hal::sys::http_client_init_cb_t","esp_idf_hal::sys::connect_func","esp_idf_hal::sys::io_func","esp_idf_hal::sys::io_read_func","esp_idf_hal::sys::trans_func","esp_idf_hal::sys::poll_func","esp_idf_hal::sys::connect_async_func","esp_idf_hal::sys::payload_transfer_func","esp_idf_hal::sys::http_data_cb","esp_idf_hal::sys::http_cb","esp_idf_hal::sys::httpd_free_ctx_fn_t","esp_idf_hal::sys::httpd_open_func_t","esp_idf_hal::sys::httpd_close_func_t","esp_idf_hal::sys::httpd_uri_match_func_t","esp_idf_hal::sys::httpd_err_handler_func_t","esp_idf_hal::sys::httpd_send_func_t","esp_idf_hal::sys::httpd_recv_func_t","esp_idf_hal::sys::httpd_pending_func_t","esp_idf_hal::sys::httpd_work_fn_t","esp_idf_hal::sys::nvs_flash_generate_keys_t","esp_idf_hal::sys::nvs_flash_read_cfg_t","esp_idf_hal::sys::protocomm_req_handler_t","esp_idf_hal::sys::wifi_prov_cb_func_t","esp_idf_hal::sys::adc_continuous_callback_t","esp_idf_hal::sys::gptimer_alarm_cb_t","esp_idf_hal::sys::i2c_master_callback_t","esp_idf_hal::sys::i2c_slave_received_callback_t","esp_idf_hal::sys::i2c_slave_stretch_callback_t","esp_idf_hal::sys::i2s_isr_callback_t","esp_idf_hal::sys::ledc_cb_t","esp_idf_hal::sys::mcpwm_timer_event_cb_t","esp_idf_hal::sys::mcpwm_brake_event_cb_t","esp_idf_hal::sys::mcpwm_fault_event_cb_t","esp_idf_hal::sys::mcpwm_compare_event_cb_t","esp_idf_hal::sys::mcpwm_capture_event_cb_t","esp_idf_hal::sys::rmt_tx_end_fn_t","esp_idf_hal::sys::sample_to_rmt_t","esp_idf_hal::sys::rmt_tx_done_callback_t","esp_idf_hal::sys::rmt_rx_done_callback_t","esp_idf_hal::sys::rmt_encode_simple_cb_t","esp_idf_hal::sys::slave_transaction_cb_t","esp_idf_hal::sys::timer_isr_t","esp_idf_hal::sys::uart_select_notif_callback_t","esp_idf_hal::sys::panic_info_dump_fn_t","esp_idf_hal::sys::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.37.0\">1.37.0</span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; Sum&lt;Option&lt;U&gt;&gt; for Option&lt;T&gt;<div class=\"where\">where\n    T: Sum&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; Option&lt;T&gt;<div class=\"where\">where\n    I: Iterator&lt;Item = Option&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the [<code>Iterator</code>]: if it is a [<code>None</code>], no further\nelements are taken, and the [<code>None</code>] is returned. Should no [<code>None</code>]\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Sum<Option<U>>","esp_idf_hal::sys::__compar_fn_t","esp_idf_hal::sys::shutdown_handler_t","esp_idf_hal::sys::vprintf_like_t","esp_idf_hal::sys::intr_handler_t","esp_idf_hal::sys::esp_cpu_intr_handler_t","esp_idf_hal::sys::esp_deep_sleep_cb_t","esp_idf_hal::sys::esp_deep_sleep_wake_stub_fn_t","esp_idf_hal::sys::TaskFunction_t","esp_idf_hal::sys::multi_heap_walker_cb_t","esp_idf_hal::sys::esp_alloc_failed_hook_t","esp_idf_hal::sys::heap_caps_walker_cb_t","esp_idf_hal::sys::TaskHookFunction_t","esp_idf_hal::sys::StreamBufferCallbackFunction_t","esp_idf_hal::sys::TimerCallbackFunction_t","esp_idf_hal::sys::PendedFunction_t","esp_idf_hal::sys::TlsDeleteCallbackFunction_t","esp_idf_hal::sys::task_wdt_msg_handler","esp_idf_hal::sys::esp_freertos_idle_cb_t","esp_idf_hal::sys::esp_freertos_tick_cb_t","esp_idf_hal::sys::esp_console_cmd_func_t","esp_idf_hal::sys::esp_console_cmd_func_with_context_t","esp_idf_hal::sys::linenoiseCompletionCallback","esp_idf_hal::sys::linenoiseHintsCallback","esp_idf_hal::sys::linenoiseFreeHintsCallback","esp_idf_hal::sys::_sig_func_ptr","esp_idf_hal::sys::sig_t","esp_idf_hal::sys::arg_resetfn","esp_idf_hal::sys::arg_scanfn","esp_idf_hal::sys::arg_checkfn","esp_idf_hal::sys::arg_errorfn","esp_idf_hal::sys::arg_dstr_freefn","esp_idf_hal::sys::arg_cmdfn","esp_idf_hal::sys::arg_comparefn","esp_idf_hal::sys::esp_timer_cb_t","esp_idf_hal::sys::esp_event_handler_t","esp_idf_hal::sys::esp_netif_receive_t","esp_idf_hal::sys::esp_netif_find_predicate_t","esp_idf_hal::sys::esp_netif_callback_fn","esp_idf_hal::sys::wifi_action_rx_cb_t","esp_idf_hal::sys::esp_aes_128_encrypt_t","esp_idf_hal::sys::esp_aes_128_decrypt_t","esp_idf_hal::sys::esp_aes_wrap_t","esp_idf_hal::sys::esp_aes_unwrap_t","esp_idf_hal::sys::esp_hmac_sha256_vector_t","esp_idf_hal::sys::esp_sha256_prf_t","esp_idf_hal::sys::esp_hmac_md5_t","esp_idf_hal::sys::esp_hmac_md5_vector_t","esp_idf_hal::sys::esp_hmac_sha1_t","esp_idf_hal::sys::esp_hmac_sha1_vector_t","esp_idf_hal::sys::esp_sha1_prf_t","esp_idf_hal::sys::esp_sha1_vector_t","esp_idf_hal::sys::esp_pbkdf2_sha1_t","esp_idf_hal::sys::esp_rc4_skip_t","esp_idf_hal::sys::esp_md5_vector_t","esp_idf_hal::sys::esp_aes_encrypt_t","esp_idf_hal::sys::esp_aes_encrypt_init_t","esp_idf_hal::sys::esp_aes_encrypt_deinit_t","esp_idf_hal::sys::esp_aes_decrypt_t","esp_idf_hal::sys::esp_aes_decrypt_init_t","esp_idf_hal::sys::esp_aes_decrypt_deinit_t","esp_idf_hal::sys::esp_omac1_aes_128_t","esp_idf_hal::sys::esp_ccmp_decrypt_t","esp_idf_hal::sys::esp_ccmp_encrypt_t","esp_idf_hal::sys::esp_aes_gmac_t","esp_idf_hal::sys::esp_sha256_vector_t","esp_idf_hal::sys::esp_crc32_le_t","esp_idf_hal::sys::wifi_promiscuous_cb_t","esp_idf_hal::sys::esp_vendor_ie_cb_t","esp_idf_hal::sys::wifi_csi_cb_t","esp_idf_hal::sys::esp_now_recv_cb_t","esp_idf_hal::sys::esp_now_send_cb_t","esp_idf_hal::sys::wifi_netstack_buf_ref_cb_t","esp_idf_hal::sys::wifi_netstack_buf_free_cb_t","esp_idf_hal::sys::wifi_rxcb_t","esp_idf_hal::sys::wifi_mac_time_update_cb_t","esp_idf_hal::sys::wifi_tx_done_cb_t","esp_idf_hal::sys::neighbor_rep_request_cb","esp_idf_hal::sys::transaction_cb_t","esp_idf_hal::sys::gpio_isr_t","esp_idf_hal::sys::dns_found_callback","esp_idf_hal::sys::pbuf_free_custom_fn","esp_idf_hal::sys::netif_init_fn","esp_idf_hal::sys::netif_input_fn","esp_idf_hal::sys::netif_output_fn","esp_idf_hal::sys::netif_output_ip6_fn","esp_idf_hal::sys::netif_linkoutput_fn","esp_idf_hal::sys::netif_status_callback_fn","esp_idf_hal::sys::netif_igmp_mac_filter_fn","esp_idf_hal::sys::netif_mld_mac_filter_fn","esp_idf_hal::sys::netif_ext_callback_fn","esp_idf_hal::sys::init_fn_t","esp_idf_hal::sys::input_fn_t","esp_idf_hal::sys::sntp_sync_time_cb_t","esp_idf_hal::sys::esp_sntp_time_cb_t","esp_idf_hal::sys::ETSTask","esp_idf_hal::sys::ets_idle_cb_t","esp_idf_hal::sys::ETSTimerFunc","esp_idf_hal::sys::ets_isr_t","esp_idf_hal::sys::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_sign_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_key_len_func","esp_idf_hal::sys::mbedtls_x509_crt_ext_cb_t","esp_idf_hal::sys::mbedtls_x509_crt_ca_cb_t","esp_idf_hal::sys::mbedtls_ssl_send_t","esp_idf_hal::sys::mbedtls_ssl_recv_t","esp_idf_hal::sys::mbedtls_ssl_recv_timeout_t","esp_idf_hal::sys::mbedtls_ssl_set_timer_t","esp_idf_hal::sys::mbedtls_ssl_get_timer_t","esp_idf_hal::sys::mbedtls_ssl_cache_get_t","esp_idf_hal::sys::mbedtls_ssl_cache_set_t","esp_idf_hal::sys::mbedtls_ssl_export_keys_t","esp_idf_hal::sys::mbedtls_ssl_hs_cb_t","esp_idf_hal::sys::mbedtls_ssl_ticket_write_t","esp_idf_hal::sys::mbedtls_ssl_ticket_parse_t","esp_idf_hal::sys::mbedtls_ssl_cookie_write_t","esp_idf_hal::sys::mbedtls_ssl_cookie_check_t","esp_idf_hal::sys::mbedtls_entropy_f_source_ptr","esp_idf_hal::sys::http_event_handle_cb","esp_idf_hal::sys::http_client_init_cb_t","esp_idf_hal::sys::connect_func","esp_idf_hal::sys::io_func","esp_idf_hal::sys::io_read_func","esp_idf_hal::sys::trans_func","esp_idf_hal::sys::poll_func","esp_idf_hal::sys::connect_async_func","esp_idf_hal::sys::payload_transfer_func","esp_idf_hal::sys::http_data_cb","esp_idf_hal::sys::http_cb","esp_idf_hal::sys::httpd_free_ctx_fn_t","esp_idf_hal::sys::httpd_open_func_t","esp_idf_hal::sys::httpd_close_func_t","esp_idf_hal::sys::httpd_uri_match_func_t","esp_idf_hal::sys::httpd_err_handler_func_t","esp_idf_hal::sys::httpd_send_func_t","esp_idf_hal::sys::httpd_recv_func_t","esp_idf_hal::sys::httpd_pending_func_t","esp_idf_hal::sys::httpd_work_fn_t","esp_idf_hal::sys::nvs_flash_generate_keys_t","esp_idf_hal::sys::nvs_flash_read_cfg_t","esp_idf_hal::sys::protocomm_req_handler_t","esp_idf_hal::sys::wifi_prov_cb_func_t","esp_idf_hal::sys::adc_continuous_callback_t","esp_idf_hal::sys::gptimer_alarm_cb_t","esp_idf_hal::sys::i2c_master_callback_t","esp_idf_hal::sys::i2c_slave_received_callback_t","esp_idf_hal::sys::i2c_slave_stretch_callback_t","esp_idf_hal::sys::i2s_isr_callback_t","esp_idf_hal::sys::ledc_cb_t","esp_idf_hal::sys::mcpwm_timer_event_cb_t","esp_idf_hal::sys::mcpwm_brake_event_cb_t","esp_idf_hal::sys::mcpwm_fault_event_cb_t","esp_idf_hal::sys::mcpwm_compare_event_cb_t","esp_idf_hal::sys::mcpwm_capture_event_cb_t","esp_idf_hal::sys::rmt_tx_end_fn_t","esp_idf_hal::sys::sample_to_rmt_t","esp_idf_hal::sys::rmt_tx_done_callback_t","esp_idf_hal::sys::rmt_rx_done_callback_t","esp_idf_hal::sys::rmt_encode_simple_cb_t","esp_idf_hal::sys::slave_transaction_cb_t","esp_idf_hal::sys::timer_isr_t","esp_idf_hal::sys::uart_select_notif_callback_t","esp_idf_hal::sys::panic_info_dump_fn_t","esp_idf_hal::sys::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Try for Option&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Residual</a> = Option&lt;Infallible&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value passed to [<code>FromResidual::from_residual</code>]\nas part of <code>?</code> when short-circuiting. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_output</a>(output: &lt;Option&lt;T&gt; as Try&gt;::Output) -&gt; Option&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">branch</a>(\n    self,\n) -&gt; ControlFlow&lt;&lt;Option&lt;T&gt; as Try&gt;::Residual, &lt;Option&lt;T&gt; as Try&gt;::Output&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned [<code>ControlFlow::Continue</code>])\nor propagate a value back to the caller\n(because this returned [<code>ControlFlow::Break</code>]). <a>Read more</a></div></details></div></details>","Try","esp_idf_hal::sys::__compar_fn_t","esp_idf_hal::sys::shutdown_handler_t","esp_idf_hal::sys::vprintf_like_t","esp_idf_hal::sys::intr_handler_t","esp_idf_hal::sys::esp_cpu_intr_handler_t","esp_idf_hal::sys::esp_deep_sleep_cb_t","esp_idf_hal::sys::esp_deep_sleep_wake_stub_fn_t","esp_idf_hal::sys::TaskFunction_t","esp_idf_hal::sys::multi_heap_walker_cb_t","esp_idf_hal::sys::esp_alloc_failed_hook_t","esp_idf_hal::sys::heap_caps_walker_cb_t","esp_idf_hal::sys::TaskHookFunction_t","esp_idf_hal::sys::StreamBufferCallbackFunction_t","esp_idf_hal::sys::TimerCallbackFunction_t","esp_idf_hal::sys::PendedFunction_t","esp_idf_hal::sys::TlsDeleteCallbackFunction_t","esp_idf_hal::sys::task_wdt_msg_handler","esp_idf_hal::sys::esp_freertos_idle_cb_t","esp_idf_hal::sys::esp_freertos_tick_cb_t","esp_idf_hal::sys::esp_console_cmd_func_t","esp_idf_hal::sys::esp_console_cmd_func_with_context_t","esp_idf_hal::sys::linenoiseCompletionCallback","esp_idf_hal::sys::linenoiseHintsCallback","esp_idf_hal::sys::linenoiseFreeHintsCallback","esp_idf_hal::sys::_sig_func_ptr","esp_idf_hal::sys::sig_t","esp_idf_hal::sys::arg_resetfn","esp_idf_hal::sys::arg_scanfn","esp_idf_hal::sys::arg_checkfn","esp_idf_hal::sys::arg_errorfn","esp_idf_hal::sys::arg_dstr_freefn","esp_idf_hal::sys::arg_cmdfn","esp_idf_hal::sys::arg_comparefn","esp_idf_hal::sys::esp_timer_cb_t","esp_idf_hal::sys::esp_event_handler_t","esp_idf_hal::sys::esp_netif_receive_t","esp_idf_hal::sys::esp_netif_find_predicate_t","esp_idf_hal::sys::esp_netif_callback_fn","esp_idf_hal::sys::wifi_action_rx_cb_t","esp_idf_hal::sys::esp_aes_128_encrypt_t","esp_idf_hal::sys::esp_aes_128_decrypt_t","esp_idf_hal::sys::esp_aes_wrap_t","esp_idf_hal::sys::esp_aes_unwrap_t","esp_idf_hal::sys::esp_hmac_sha256_vector_t","esp_idf_hal::sys::esp_sha256_prf_t","esp_idf_hal::sys::esp_hmac_md5_t","esp_idf_hal::sys::esp_hmac_md5_vector_t","esp_idf_hal::sys::esp_hmac_sha1_t","esp_idf_hal::sys::esp_hmac_sha1_vector_t","esp_idf_hal::sys::esp_sha1_prf_t","esp_idf_hal::sys::esp_sha1_vector_t","esp_idf_hal::sys::esp_pbkdf2_sha1_t","esp_idf_hal::sys::esp_rc4_skip_t","esp_idf_hal::sys::esp_md5_vector_t","esp_idf_hal::sys::esp_aes_encrypt_t","esp_idf_hal::sys::esp_aes_encrypt_init_t","esp_idf_hal::sys::esp_aes_encrypt_deinit_t","esp_idf_hal::sys::esp_aes_decrypt_t","esp_idf_hal::sys::esp_aes_decrypt_init_t","esp_idf_hal::sys::esp_aes_decrypt_deinit_t","esp_idf_hal::sys::esp_omac1_aes_128_t","esp_idf_hal::sys::esp_ccmp_decrypt_t","esp_idf_hal::sys::esp_ccmp_encrypt_t","esp_idf_hal::sys::esp_aes_gmac_t","esp_idf_hal::sys::esp_sha256_vector_t","esp_idf_hal::sys::esp_crc32_le_t","esp_idf_hal::sys::wifi_promiscuous_cb_t","esp_idf_hal::sys::esp_vendor_ie_cb_t","esp_idf_hal::sys::wifi_csi_cb_t","esp_idf_hal::sys::esp_now_recv_cb_t","esp_idf_hal::sys::esp_now_send_cb_t","esp_idf_hal::sys::wifi_netstack_buf_ref_cb_t","esp_idf_hal::sys::wifi_netstack_buf_free_cb_t","esp_idf_hal::sys::wifi_rxcb_t","esp_idf_hal::sys::wifi_mac_time_update_cb_t","esp_idf_hal::sys::wifi_tx_done_cb_t","esp_idf_hal::sys::neighbor_rep_request_cb","esp_idf_hal::sys::transaction_cb_t","esp_idf_hal::sys::gpio_isr_t","esp_idf_hal::sys::dns_found_callback","esp_idf_hal::sys::pbuf_free_custom_fn","esp_idf_hal::sys::netif_init_fn","esp_idf_hal::sys::netif_input_fn","esp_idf_hal::sys::netif_output_fn","esp_idf_hal::sys::netif_output_ip6_fn","esp_idf_hal::sys::netif_linkoutput_fn","esp_idf_hal::sys::netif_status_callback_fn","esp_idf_hal::sys::netif_igmp_mac_filter_fn","esp_idf_hal::sys::netif_mld_mac_filter_fn","esp_idf_hal::sys::netif_ext_callback_fn","esp_idf_hal::sys::init_fn_t","esp_idf_hal::sys::input_fn_t","esp_idf_hal::sys::sntp_sync_time_cb_t","esp_idf_hal::sys::esp_sntp_time_cb_t","esp_idf_hal::sys::ETSTask","esp_idf_hal::sys::ets_idle_cb_t","esp_idf_hal::sys::ETSTimerFunc","esp_idf_hal::sys::ets_isr_t","esp_idf_hal::sys::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_sign_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_key_len_func","esp_idf_hal::sys::mbedtls_x509_crt_ext_cb_t","esp_idf_hal::sys::mbedtls_x509_crt_ca_cb_t","esp_idf_hal::sys::mbedtls_ssl_send_t","esp_idf_hal::sys::mbedtls_ssl_recv_t","esp_idf_hal::sys::mbedtls_ssl_recv_timeout_t","esp_idf_hal::sys::mbedtls_ssl_set_timer_t","esp_idf_hal::sys::mbedtls_ssl_get_timer_t","esp_idf_hal::sys::mbedtls_ssl_cache_get_t","esp_idf_hal::sys::mbedtls_ssl_cache_set_t","esp_idf_hal::sys::mbedtls_ssl_export_keys_t","esp_idf_hal::sys::mbedtls_ssl_hs_cb_t","esp_idf_hal::sys::mbedtls_ssl_ticket_write_t","esp_idf_hal::sys::mbedtls_ssl_ticket_parse_t","esp_idf_hal::sys::mbedtls_ssl_cookie_write_t","esp_idf_hal::sys::mbedtls_ssl_cookie_check_t","esp_idf_hal::sys::mbedtls_entropy_f_source_ptr","esp_idf_hal::sys::http_event_handle_cb","esp_idf_hal::sys::http_client_init_cb_t","esp_idf_hal::sys::connect_func","esp_idf_hal::sys::io_func","esp_idf_hal::sys::io_read_func","esp_idf_hal::sys::trans_func","esp_idf_hal::sys::poll_func","esp_idf_hal::sys::connect_async_func","esp_idf_hal::sys::payload_transfer_func","esp_idf_hal::sys::http_data_cb","esp_idf_hal::sys::http_cb","esp_idf_hal::sys::httpd_free_ctx_fn_t","esp_idf_hal::sys::httpd_open_func_t","esp_idf_hal::sys::httpd_close_func_t","esp_idf_hal::sys::httpd_uri_match_func_t","esp_idf_hal::sys::httpd_err_handler_func_t","esp_idf_hal::sys::httpd_send_func_t","esp_idf_hal::sys::httpd_recv_func_t","esp_idf_hal::sys::httpd_pending_func_t","esp_idf_hal::sys::httpd_work_fn_t","esp_idf_hal::sys::nvs_flash_generate_keys_t","esp_idf_hal::sys::nvs_flash_read_cfg_t","esp_idf_hal::sys::protocomm_req_handler_t","esp_idf_hal::sys::wifi_prov_cb_func_t","esp_idf_hal::sys::adc_continuous_callback_t","esp_idf_hal::sys::gptimer_alarm_cb_t","esp_idf_hal::sys::i2c_master_callback_t","esp_idf_hal::sys::i2c_slave_received_callback_t","esp_idf_hal::sys::i2c_slave_stretch_callback_t","esp_idf_hal::sys::i2s_isr_callback_t","esp_idf_hal::sys::ledc_cb_t","esp_idf_hal::sys::mcpwm_timer_event_cb_t","esp_idf_hal::sys::mcpwm_brake_event_cb_t","esp_idf_hal::sys::mcpwm_fault_event_cb_t","esp_idf_hal::sys::mcpwm_compare_event_cb_t","esp_idf_hal::sys::mcpwm_capture_event_cb_t","esp_idf_hal::sys::rmt_tx_end_fn_t","esp_idf_hal::sys::sample_to_rmt_t","esp_idf_hal::sys::rmt_tx_done_callback_t","esp_idf_hal::sys::rmt_rx_done_callback_t","esp_idf_hal::sys::rmt_encode_simple_cb_t","esp_idf_hal::sys::slave_transaction_cb_t","esp_idf_hal::sys::timer_isr_t","esp_idf_hal::sys::uart_select_notif_callback_t","esp_idf_hal::sys::panic_info_dump_fn_t","esp_idf_hal::sys::esp_lcd_panel_io_color_trans_done_cb_t"],["<section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Copy for Option&lt;T&gt;<div class=\"where\">where\n    T: Copy,</div></h3></section>","Copy","esp_idf_hal::sys::__compar_fn_t","esp_idf_hal::sys::shutdown_handler_t","esp_idf_hal::sys::vprintf_like_t","esp_idf_hal::sys::intr_handler_t","esp_idf_hal::sys::esp_cpu_intr_handler_t","esp_idf_hal::sys::esp_deep_sleep_cb_t","esp_idf_hal::sys::esp_deep_sleep_wake_stub_fn_t","esp_idf_hal::sys::TaskFunction_t","esp_idf_hal::sys::multi_heap_walker_cb_t","esp_idf_hal::sys::esp_alloc_failed_hook_t","esp_idf_hal::sys::heap_caps_walker_cb_t","esp_idf_hal::sys::TaskHookFunction_t","esp_idf_hal::sys::StreamBufferCallbackFunction_t","esp_idf_hal::sys::TimerCallbackFunction_t","esp_idf_hal::sys::PendedFunction_t","esp_idf_hal::sys::TlsDeleteCallbackFunction_t","esp_idf_hal::sys::task_wdt_msg_handler","esp_idf_hal::sys::esp_freertos_idle_cb_t","esp_idf_hal::sys::esp_freertos_tick_cb_t","esp_idf_hal::sys::esp_console_cmd_func_t","esp_idf_hal::sys::esp_console_cmd_func_with_context_t","esp_idf_hal::sys::linenoiseCompletionCallback","esp_idf_hal::sys::linenoiseHintsCallback","esp_idf_hal::sys::linenoiseFreeHintsCallback","esp_idf_hal::sys::_sig_func_ptr","esp_idf_hal::sys::sig_t","esp_idf_hal::sys::arg_resetfn","esp_idf_hal::sys::arg_scanfn","esp_idf_hal::sys::arg_checkfn","esp_idf_hal::sys::arg_errorfn","esp_idf_hal::sys::arg_dstr_freefn","esp_idf_hal::sys::arg_cmdfn","esp_idf_hal::sys::arg_comparefn","esp_idf_hal::sys::esp_timer_cb_t","esp_idf_hal::sys::esp_event_handler_t","esp_idf_hal::sys::esp_netif_receive_t","esp_idf_hal::sys::esp_netif_find_predicate_t","esp_idf_hal::sys::esp_netif_callback_fn","esp_idf_hal::sys::wifi_action_rx_cb_t","esp_idf_hal::sys::esp_aes_128_encrypt_t","esp_idf_hal::sys::esp_aes_128_decrypt_t","esp_idf_hal::sys::esp_aes_wrap_t","esp_idf_hal::sys::esp_aes_unwrap_t","esp_idf_hal::sys::esp_hmac_sha256_vector_t","esp_idf_hal::sys::esp_sha256_prf_t","esp_idf_hal::sys::esp_hmac_md5_t","esp_idf_hal::sys::esp_hmac_md5_vector_t","esp_idf_hal::sys::esp_hmac_sha1_t","esp_idf_hal::sys::esp_hmac_sha1_vector_t","esp_idf_hal::sys::esp_sha1_prf_t","esp_idf_hal::sys::esp_sha1_vector_t","esp_idf_hal::sys::esp_pbkdf2_sha1_t","esp_idf_hal::sys::esp_rc4_skip_t","esp_idf_hal::sys::esp_md5_vector_t","esp_idf_hal::sys::esp_aes_encrypt_t","esp_idf_hal::sys::esp_aes_encrypt_init_t","esp_idf_hal::sys::esp_aes_encrypt_deinit_t","esp_idf_hal::sys::esp_aes_decrypt_t","esp_idf_hal::sys::esp_aes_decrypt_init_t","esp_idf_hal::sys::esp_aes_decrypt_deinit_t","esp_idf_hal::sys::esp_omac1_aes_128_t","esp_idf_hal::sys::esp_ccmp_decrypt_t","esp_idf_hal::sys::esp_ccmp_encrypt_t","esp_idf_hal::sys::esp_aes_gmac_t","esp_idf_hal::sys::esp_sha256_vector_t","esp_idf_hal::sys::esp_crc32_le_t","esp_idf_hal::sys::wifi_promiscuous_cb_t","esp_idf_hal::sys::esp_vendor_ie_cb_t","esp_idf_hal::sys::wifi_csi_cb_t","esp_idf_hal::sys::esp_now_recv_cb_t","esp_idf_hal::sys::esp_now_send_cb_t","esp_idf_hal::sys::wifi_netstack_buf_ref_cb_t","esp_idf_hal::sys::wifi_netstack_buf_free_cb_t","esp_idf_hal::sys::wifi_rxcb_t","esp_idf_hal::sys::wifi_mac_time_update_cb_t","esp_idf_hal::sys::wifi_tx_done_cb_t","esp_idf_hal::sys::neighbor_rep_request_cb","esp_idf_hal::sys::transaction_cb_t","esp_idf_hal::sys::gpio_isr_t","esp_idf_hal::sys::dns_found_callback","esp_idf_hal::sys::pbuf_free_custom_fn","esp_idf_hal::sys::netif_init_fn","esp_idf_hal::sys::netif_input_fn","esp_idf_hal::sys::netif_output_fn","esp_idf_hal::sys::netif_output_ip6_fn","esp_idf_hal::sys::netif_linkoutput_fn","esp_idf_hal::sys::netif_status_callback_fn","esp_idf_hal::sys::netif_igmp_mac_filter_fn","esp_idf_hal::sys::netif_mld_mac_filter_fn","esp_idf_hal::sys::netif_ext_callback_fn","esp_idf_hal::sys::init_fn_t","esp_idf_hal::sys::input_fn_t","esp_idf_hal::sys::sntp_sync_time_cb_t","esp_idf_hal::sys::esp_sntp_time_cb_t","esp_idf_hal::sys::ETSTask","esp_idf_hal::sys::ets_idle_cb_t","esp_idf_hal::sys::ETSTimerFunc","esp_idf_hal::sys::ets_isr_t","esp_idf_hal::sys::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_sign_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_key_len_func","esp_idf_hal::sys::mbedtls_x509_crt_ext_cb_t","esp_idf_hal::sys::mbedtls_x509_crt_ca_cb_t","esp_idf_hal::sys::mbedtls_ssl_send_t","esp_idf_hal::sys::mbedtls_ssl_recv_t","esp_idf_hal::sys::mbedtls_ssl_recv_timeout_t","esp_idf_hal::sys::mbedtls_ssl_set_timer_t","esp_idf_hal::sys::mbedtls_ssl_get_timer_t","esp_idf_hal::sys::mbedtls_ssl_cache_get_t","esp_idf_hal::sys::mbedtls_ssl_cache_set_t","esp_idf_hal::sys::mbedtls_ssl_export_keys_t","esp_idf_hal::sys::mbedtls_ssl_hs_cb_t","esp_idf_hal::sys::mbedtls_ssl_ticket_write_t","esp_idf_hal::sys::mbedtls_ssl_ticket_parse_t","esp_idf_hal::sys::mbedtls_ssl_cookie_write_t","esp_idf_hal::sys::mbedtls_ssl_cookie_check_t","esp_idf_hal::sys::mbedtls_entropy_f_source_ptr","esp_idf_hal::sys::http_event_handle_cb","esp_idf_hal::sys::http_client_init_cb_t","esp_idf_hal::sys::connect_func","esp_idf_hal::sys::io_func","esp_idf_hal::sys::io_read_func","esp_idf_hal::sys::trans_func","esp_idf_hal::sys::poll_func","esp_idf_hal::sys::connect_async_func","esp_idf_hal::sys::payload_transfer_func","esp_idf_hal::sys::http_data_cb","esp_idf_hal::sys::http_cb","esp_idf_hal::sys::httpd_free_ctx_fn_t","esp_idf_hal::sys::httpd_open_func_t","esp_idf_hal::sys::httpd_close_func_t","esp_idf_hal::sys::httpd_uri_match_func_t","esp_idf_hal::sys::httpd_err_handler_func_t","esp_idf_hal::sys::httpd_send_func_t","esp_idf_hal::sys::httpd_recv_func_t","esp_idf_hal::sys::httpd_pending_func_t","esp_idf_hal::sys::httpd_work_fn_t","esp_idf_hal::sys::nvs_flash_generate_keys_t","esp_idf_hal::sys::nvs_flash_read_cfg_t","esp_idf_hal::sys::protocomm_req_handler_t","esp_idf_hal::sys::wifi_prov_cb_func_t","esp_idf_hal::sys::adc_continuous_callback_t","esp_idf_hal::sys::gptimer_alarm_cb_t","esp_idf_hal::sys::i2c_master_callback_t","esp_idf_hal::sys::i2c_slave_received_callback_t","esp_idf_hal::sys::i2c_slave_stretch_callback_t","esp_idf_hal::sys::i2s_isr_callback_t","esp_idf_hal::sys::ledc_cb_t","esp_idf_hal::sys::mcpwm_timer_event_cb_t","esp_idf_hal::sys::mcpwm_brake_event_cb_t","esp_idf_hal::sys::mcpwm_fault_event_cb_t","esp_idf_hal::sys::mcpwm_compare_event_cb_t","esp_idf_hal::sys::mcpwm_capture_event_cb_t","esp_idf_hal::sys::rmt_tx_end_fn_t","esp_idf_hal::sys::sample_to_rmt_t","esp_idf_hal::sys::rmt_tx_done_callback_t","esp_idf_hal::sys::rmt_rx_done_callback_t","esp_idf_hal::sys::rmt_encode_simple_cb_t","esp_idf_hal::sys::slave_transaction_cb_t","esp_idf_hal::sys::timer_isr_t","esp_idf_hal::sys::uart_select_notif_callback_t","esp_idf_hal::sys::panic_info_dump_fn_t","esp_idf_hal::sys::esp_lcd_panel_io_color_trans_done_cb_t"],["<section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Eq for Option&lt;T&gt;<div class=\"where\">where\n    T: Eq,</div></h3></section>","Eq","esp_idf_hal::sys::__compar_fn_t","esp_idf_hal::sys::shutdown_handler_t","esp_idf_hal::sys::vprintf_like_t","esp_idf_hal::sys::intr_handler_t","esp_idf_hal::sys::esp_cpu_intr_handler_t","esp_idf_hal::sys::esp_deep_sleep_cb_t","esp_idf_hal::sys::esp_deep_sleep_wake_stub_fn_t","esp_idf_hal::sys::TaskFunction_t","esp_idf_hal::sys::multi_heap_walker_cb_t","esp_idf_hal::sys::esp_alloc_failed_hook_t","esp_idf_hal::sys::heap_caps_walker_cb_t","esp_idf_hal::sys::TaskHookFunction_t","esp_idf_hal::sys::StreamBufferCallbackFunction_t","esp_idf_hal::sys::TimerCallbackFunction_t","esp_idf_hal::sys::PendedFunction_t","esp_idf_hal::sys::TlsDeleteCallbackFunction_t","esp_idf_hal::sys::task_wdt_msg_handler","esp_idf_hal::sys::esp_freertos_idle_cb_t","esp_idf_hal::sys::esp_freertos_tick_cb_t","esp_idf_hal::sys::esp_console_cmd_func_t","esp_idf_hal::sys::esp_console_cmd_func_with_context_t","esp_idf_hal::sys::linenoiseCompletionCallback","esp_idf_hal::sys::linenoiseHintsCallback","esp_idf_hal::sys::linenoiseFreeHintsCallback","esp_idf_hal::sys::_sig_func_ptr","esp_idf_hal::sys::sig_t","esp_idf_hal::sys::arg_resetfn","esp_idf_hal::sys::arg_scanfn","esp_idf_hal::sys::arg_checkfn","esp_idf_hal::sys::arg_errorfn","esp_idf_hal::sys::arg_dstr_freefn","esp_idf_hal::sys::arg_cmdfn","esp_idf_hal::sys::arg_comparefn","esp_idf_hal::sys::esp_timer_cb_t","esp_idf_hal::sys::esp_event_handler_t","esp_idf_hal::sys::esp_netif_receive_t","esp_idf_hal::sys::esp_netif_find_predicate_t","esp_idf_hal::sys::esp_netif_callback_fn","esp_idf_hal::sys::wifi_action_rx_cb_t","esp_idf_hal::sys::esp_aes_128_encrypt_t","esp_idf_hal::sys::esp_aes_128_decrypt_t","esp_idf_hal::sys::esp_aes_wrap_t","esp_idf_hal::sys::esp_aes_unwrap_t","esp_idf_hal::sys::esp_hmac_sha256_vector_t","esp_idf_hal::sys::esp_sha256_prf_t","esp_idf_hal::sys::esp_hmac_md5_t","esp_idf_hal::sys::esp_hmac_md5_vector_t","esp_idf_hal::sys::esp_hmac_sha1_t","esp_idf_hal::sys::esp_hmac_sha1_vector_t","esp_idf_hal::sys::esp_sha1_prf_t","esp_idf_hal::sys::esp_sha1_vector_t","esp_idf_hal::sys::esp_pbkdf2_sha1_t","esp_idf_hal::sys::esp_rc4_skip_t","esp_idf_hal::sys::esp_md5_vector_t","esp_idf_hal::sys::esp_aes_encrypt_t","esp_idf_hal::sys::esp_aes_encrypt_init_t","esp_idf_hal::sys::esp_aes_encrypt_deinit_t","esp_idf_hal::sys::esp_aes_decrypt_t","esp_idf_hal::sys::esp_aes_decrypt_init_t","esp_idf_hal::sys::esp_aes_decrypt_deinit_t","esp_idf_hal::sys::esp_omac1_aes_128_t","esp_idf_hal::sys::esp_ccmp_decrypt_t","esp_idf_hal::sys::esp_ccmp_encrypt_t","esp_idf_hal::sys::esp_aes_gmac_t","esp_idf_hal::sys::esp_sha256_vector_t","esp_idf_hal::sys::esp_crc32_le_t","esp_idf_hal::sys::wifi_promiscuous_cb_t","esp_idf_hal::sys::esp_vendor_ie_cb_t","esp_idf_hal::sys::wifi_csi_cb_t","esp_idf_hal::sys::esp_now_recv_cb_t","esp_idf_hal::sys::esp_now_send_cb_t","esp_idf_hal::sys::wifi_netstack_buf_ref_cb_t","esp_idf_hal::sys::wifi_netstack_buf_free_cb_t","esp_idf_hal::sys::wifi_rxcb_t","esp_idf_hal::sys::wifi_mac_time_update_cb_t","esp_idf_hal::sys::wifi_tx_done_cb_t","esp_idf_hal::sys::neighbor_rep_request_cb","esp_idf_hal::sys::transaction_cb_t","esp_idf_hal::sys::gpio_isr_t","esp_idf_hal::sys::dns_found_callback","esp_idf_hal::sys::pbuf_free_custom_fn","esp_idf_hal::sys::netif_init_fn","esp_idf_hal::sys::netif_input_fn","esp_idf_hal::sys::netif_output_fn","esp_idf_hal::sys::netif_output_ip6_fn","esp_idf_hal::sys::netif_linkoutput_fn","esp_idf_hal::sys::netif_status_callback_fn","esp_idf_hal::sys::netif_igmp_mac_filter_fn","esp_idf_hal::sys::netif_mld_mac_filter_fn","esp_idf_hal::sys::netif_ext_callback_fn","esp_idf_hal::sys::init_fn_t","esp_idf_hal::sys::input_fn_t","esp_idf_hal::sys::sntp_sync_time_cb_t","esp_idf_hal::sys::esp_sntp_time_cb_t","esp_idf_hal::sys::ETSTask","esp_idf_hal::sys::ets_idle_cb_t","esp_idf_hal::sys::ETSTimerFunc","esp_idf_hal::sys::ets_isr_t","esp_idf_hal::sys::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_sign_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_key_len_func","esp_idf_hal::sys::mbedtls_x509_crt_ext_cb_t","esp_idf_hal::sys::mbedtls_x509_crt_ca_cb_t","esp_idf_hal::sys::mbedtls_ssl_send_t","esp_idf_hal::sys::mbedtls_ssl_recv_t","esp_idf_hal::sys::mbedtls_ssl_recv_timeout_t","esp_idf_hal::sys::mbedtls_ssl_set_timer_t","esp_idf_hal::sys::mbedtls_ssl_get_timer_t","esp_idf_hal::sys::mbedtls_ssl_cache_get_t","esp_idf_hal::sys::mbedtls_ssl_cache_set_t","esp_idf_hal::sys::mbedtls_ssl_export_keys_t","esp_idf_hal::sys::mbedtls_ssl_hs_cb_t","esp_idf_hal::sys::mbedtls_ssl_ticket_write_t","esp_idf_hal::sys::mbedtls_ssl_ticket_parse_t","esp_idf_hal::sys::mbedtls_ssl_cookie_write_t","esp_idf_hal::sys::mbedtls_ssl_cookie_check_t","esp_idf_hal::sys::mbedtls_entropy_f_source_ptr","esp_idf_hal::sys::http_event_handle_cb","esp_idf_hal::sys::http_client_init_cb_t","esp_idf_hal::sys::connect_func","esp_idf_hal::sys::io_func","esp_idf_hal::sys::io_read_func","esp_idf_hal::sys::trans_func","esp_idf_hal::sys::poll_func","esp_idf_hal::sys::connect_async_func","esp_idf_hal::sys::payload_transfer_func","esp_idf_hal::sys::http_data_cb","esp_idf_hal::sys::http_cb","esp_idf_hal::sys::httpd_free_ctx_fn_t","esp_idf_hal::sys::httpd_open_func_t","esp_idf_hal::sys::httpd_close_func_t","esp_idf_hal::sys::httpd_uri_match_func_t","esp_idf_hal::sys::httpd_err_handler_func_t","esp_idf_hal::sys::httpd_send_func_t","esp_idf_hal::sys::httpd_recv_func_t","esp_idf_hal::sys::httpd_pending_func_t","esp_idf_hal::sys::httpd_work_fn_t","esp_idf_hal::sys::nvs_flash_generate_keys_t","esp_idf_hal::sys::nvs_flash_read_cfg_t","esp_idf_hal::sys::protocomm_req_handler_t","esp_idf_hal::sys::wifi_prov_cb_func_t","esp_idf_hal::sys::adc_continuous_callback_t","esp_idf_hal::sys::gptimer_alarm_cb_t","esp_idf_hal::sys::i2c_master_callback_t","esp_idf_hal::sys::i2c_slave_received_callback_t","esp_idf_hal::sys::i2c_slave_stretch_callback_t","esp_idf_hal::sys::i2s_isr_callback_t","esp_idf_hal::sys::ledc_cb_t","esp_idf_hal::sys::mcpwm_timer_event_cb_t","esp_idf_hal::sys::mcpwm_brake_event_cb_t","esp_idf_hal::sys::mcpwm_fault_event_cb_t","esp_idf_hal::sys::mcpwm_compare_event_cb_t","esp_idf_hal::sys::mcpwm_capture_event_cb_t","esp_idf_hal::sys::rmt_tx_end_fn_t","esp_idf_hal::sys::sample_to_rmt_t","esp_idf_hal::sys::rmt_tx_done_callback_t","esp_idf_hal::sys::rmt_rx_done_callback_t","esp_idf_hal::sys::rmt_encode_simple_cb_t","esp_idf_hal::sys::slave_transaction_cb_t","esp_idf_hal::sys::timer_isr_t","esp_idf_hal::sys::uart_select_notif_callback_t","esp_idf_hal::sys::panic_info_dump_fn_t","esp_idf_hal::sys::esp_lcd_panel_io_color_trans_done_cb_t"],["<section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; StructuralPartialEq for Option&lt;T&gt;</h3></section>","StructuralPartialEq","esp_idf_hal::sys::__compar_fn_t","esp_idf_hal::sys::shutdown_handler_t","esp_idf_hal::sys::vprintf_like_t","esp_idf_hal::sys::intr_handler_t","esp_idf_hal::sys::esp_cpu_intr_handler_t","esp_idf_hal::sys::esp_deep_sleep_cb_t","esp_idf_hal::sys::esp_deep_sleep_wake_stub_fn_t","esp_idf_hal::sys::TaskFunction_t","esp_idf_hal::sys::multi_heap_walker_cb_t","esp_idf_hal::sys::esp_alloc_failed_hook_t","esp_idf_hal::sys::heap_caps_walker_cb_t","esp_idf_hal::sys::TaskHookFunction_t","esp_idf_hal::sys::StreamBufferCallbackFunction_t","esp_idf_hal::sys::TimerCallbackFunction_t","esp_idf_hal::sys::PendedFunction_t","esp_idf_hal::sys::TlsDeleteCallbackFunction_t","esp_idf_hal::sys::task_wdt_msg_handler","esp_idf_hal::sys::esp_freertos_idle_cb_t","esp_idf_hal::sys::esp_freertos_tick_cb_t","esp_idf_hal::sys::esp_console_cmd_func_t","esp_idf_hal::sys::esp_console_cmd_func_with_context_t","esp_idf_hal::sys::linenoiseCompletionCallback","esp_idf_hal::sys::linenoiseHintsCallback","esp_idf_hal::sys::linenoiseFreeHintsCallback","esp_idf_hal::sys::_sig_func_ptr","esp_idf_hal::sys::sig_t","esp_idf_hal::sys::arg_resetfn","esp_idf_hal::sys::arg_scanfn","esp_idf_hal::sys::arg_checkfn","esp_idf_hal::sys::arg_errorfn","esp_idf_hal::sys::arg_dstr_freefn","esp_idf_hal::sys::arg_cmdfn","esp_idf_hal::sys::arg_comparefn","esp_idf_hal::sys::esp_timer_cb_t","esp_idf_hal::sys::esp_event_handler_t","esp_idf_hal::sys::esp_netif_receive_t","esp_idf_hal::sys::esp_netif_find_predicate_t","esp_idf_hal::sys::esp_netif_callback_fn","esp_idf_hal::sys::wifi_action_rx_cb_t","esp_idf_hal::sys::esp_aes_128_encrypt_t","esp_idf_hal::sys::esp_aes_128_decrypt_t","esp_idf_hal::sys::esp_aes_wrap_t","esp_idf_hal::sys::esp_aes_unwrap_t","esp_idf_hal::sys::esp_hmac_sha256_vector_t","esp_idf_hal::sys::esp_sha256_prf_t","esp_idf_hal::sys::esp_hmac_md5_t","esp_idf_hal::sys::esp_hmac_md5_vector_t","esp_idf_hal::sys::esp_hmac_sha1_t","esp_idf_hal::sys::esp_hmac_sha1_vector_t","esp_idf_hal::sys::esp_sha1_prf_t","esp_idf_hal::sys::esp_sha1_vector_t","esp_idf_hal::sys::esp_pbkdf2_sha1_t","esp_idf_hal::sys::esp_rc4_skip_t","esp_idf_hal::sys::esp_md5_vector_t","esp_idf_hal::sys::esp_aes_encrypt_t","esp_idf_hal::sys::esp_aes_encrypt_init_t","esp_idf_hal::sys::esp_aes_encrypt_deinit_t","esp_idf_hal::sys::esp_aes_decrypt_t","esp_idf_hal::sys::esp_aes_decrypt_init_t","esp_idf_hal::sys::esp_aes_decrypt_deinit_t","esp_idf_hal::sys::esp_omac1_aes_128_t","esp_idf_hal::sys::esp_ccmp_decrypt_t","esp_idf_hal::sys::esp_ccmp_encrypt_t","esp_idf_hal::sys::esp_aes_gmac_t","esp_idf_hal::sys::esp_sha256_vector_t","esp_idf_hal::sys::esp_crc32_le_t","esp_idf_hal::sys::wifi_promiscuous_cb_t","esp_idf_hal::sys::esp_vendor_ie_cb_t","esp_idf_hal::sys::wifi_csi_cb_t","esp_idf_hal::sys::esp_now_recv_cb_t","esp_idf_hal::sys::esp_now_send_cb_t","esp_idf_hal::sys::wifi_netstack_buf_ref_cb_t","esp_idf_hal::sys::wifi_netstack_buf_free_cb_t","esp_idf_hal::sys::wifi_rxcb_t","esp_idf_hal::sys::wifi_mac_time_update_cb_t","esp_idf_hal::sys::wifi_tx_done_cb_t","esp_idf_hal::sys::neighbor_rep_request_cb","esp_idf_hal::sys::transaction_cb_t","esp_idf_hal::sys::gpio_isr_t","esp_idf_hal::sys::dns_found_callback","esp_idf_hal::sys::pbuf_free_custom_fn","esp_idf_hal::sys::netif_init_fn","esp_idf_hal::sys::netif_input_fn","esp_idf_hal::sys::netif_output_fn","esp_idf_hal::sys::netif_output_ip6_fn","esp_idf_hal::sys::netif_linkoutput_fn","esp_idf_hal::sys::netif_status_callback_fn","esp_idf_hal::sys::netif_igmp_mac_filter_fn","esp_idf_hal::sys::netif_mld_mac_filter_fn","esp_idf_hal::sys::netif_ext_callback_fn","esp_idf_hal::sys::init_fn_t","esp_idf_hal::sys::input_fn_t","esp_idf_hal::sys::sntp_sync_time_cb_t","esp_idf_hal::sys::esp_sntp_time_cb_t","esp_idf_hal::sys::ETSTask","esp_idf_hal::sys::ets_idle_cb_t","esp_idf_hal::sys::ETSTimerFunc","esp_idf_hal::sys::ets_isr_t","esp_idf_hal::sys::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_sign_func","esp_idf_hal::sys::mbedtls_pk_rsa_alt_key_len_func","esp_idf_hal::sys::mbedtls_x509_crt_ext_cb_t","esp_idf_hal::sys::mbedtls_x509_crt_ca_cb_t","esp_idf_hal::sys::mbedtls_ssl_send_t","esp_idf_hal::sys::mbedtls_ssl_recv_t","esp_idf_hal::sys::mbedtls_ssl_recv_timeout_t","esp_idf_hal::sys::mbedtls_ssl_set_timer_t","esp_idf_hal::sys::mbedtls_ssl_get_timer_t","esp_idf_hal::sys::mbedtls_ssl_cache_get_t","esp_idf_hal::sys::mbedtls_ssl_cache_set_t","esp_idf_hal::sys::mbedtls_ssl_export_keys_t","esp_idf_hal::sys::mbedtls_ssl_hs_cb_t","esp_idf_hal::sys::mbedtls_ssl_ticket_write_t","esp_idf_hal::sys::mbedtls_ssl_ticket_parse_t","esp_idf_hal::sys::mbedtls_ssl_cookie_write_t","esp_idf_hal::sys::mbedtls_ssl_cookie_check_t","esp_idf_hal::sys::mbedtls_entropy_f_source_ptr","esp_idf_hal::sys::http_event_handle_cb","esp_idf_hal::sys::http_client_init_cb_t","esp_idf_hal::sys::connect_func","esp_idf_hal::sys::io_func","esp_idf_hal::sys::io_read_func","esp_idf_hal::sys::trans_func","esp_idf_hal::sys::poll_func","esp_idf_hal::sys::connect_async_func","esp_idf_hal::sys::payload_transfer_func","esp_idf_hal::sys::http_data_cb","esp_idf_hal::sys::http_cb","esp_idf_hal::sys::httpd_free_ctx_fn_t","esp_idf_hal::sys::httpd_open_func_t","esp_idf_hal::sys::httpd_close_func_t","esp_idf_hal::sys::httpd_uri_match_func_t","esp_idf_hal::sys::httpd_err_handler_func_t","esp_idf_hal::sys::httpd_send_func_t","esp_idf_hal::sys::httpd_recv_func_t","esp_idf_hal::sys::httpd_pending_func_t","esp_idf_hal::sys::httpd_work_fn_t","esp_idf_hal::sys::nvs_flash_generate_keys_t","esp_idf_hal::sys::nvs_flash_read_cfg_t","esp_idf_hal::sys::protocomm_req_handler_t","esp_idf_hal::sys::wifi_prov_cb_func_t","esp_idf_hal::sys::adc_continuous_callback_t","esp_idf_hal::sys::gptimer_alarm_cb_t","esp_idf_hal::sys::i2c_master_callback_t","esp_idf_hal::sys::i2c_slave_received_callback_t","esp_idf_hal::sys::i2c_slave_stretch_callback_t","esp_idf_hal::sys::i2s_isr_callback_t","esp_idf_hal::sys::ledc_cb_t","esp_idf_hal::sys::mcpwm_timer_event_cb_t","esp_idf_hal::sys::mcpwm_brake_event_cb_t","esp_idf_hal::sys::mcpwm_fault_event_cb_t","esp_idf_hal::sys::mcpwm_compare_event_cb_t","esp_idf_hal::sys::mcpwm_capture_event_cb_t","esp_idf_hal::sys::rmt_tx_end_fn_t","esp_idf_hal::sys::sample_to_rmt_t","esp_idf_hal::sys::rmt_tx_done_callback_t","esp_idf_hal::sys::rmt_rx_done_callback_t","esp_idf_hal::sys::rmt_encode_simple_cb_t","esp_idf_hal::sys::slave_transaction_cb_t","esp_idf_hal::sys::timer_isr_t","esp_idf_hal::sys::uart_select_notif_callback_t","esp_idf_hal::sys::panic_info_dump_fn_t","esp_idf_hal::sys::esp_lcd_panel_io_color_trans_done_cb_t"]]],["esp_idf_sys",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Clone for Option&lt;T&gt;<div class=\"where\">where\n    T: Clone,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clone</a>(&amp;self) -&gt; Option&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Option&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a>Read more</a></div></details></div></details>","Clone","esp_idf_sys::bindings::__compar_fn_t","esp_idf_sys::bindings::shutdown_handler_t","esp_idf_sys::bindings::vprintf_like_t","esp_idf_sys::bindings::intr_handler_t","esp_idf_sys::bindings::esp_cpu_intr_handler_t","esp_idf_sys::bindings::esp_deep_sleep_cb_t","esp_idf_sys::bindings::esp_deep_sleep_wake_stub_fn_t","esp_idf_sys::bindings::TaskFunction_t","esp_idf_sys::bindings::multi_heap_walker_cb_t","esp_idf_sys::bindings::esp_alloc_failed_hook_t","esp_idf_sys::bindings::heap_caps_walker_cb_t","esp_idf_sys::bindings::TaskHookFunction_t","esp_idf_sys::bindings::StreamBufferCallbackFunction_t","esp_idf_sys::bindings::TimerCallbackFunction_t","esp_idf_sys::bindings::PendedFunction_t","esp_idf_sys::bindings::TlsDeleteCallbackFunction_t","esp_idf_sys::bindings::task_wdt_msg_handler","esp_idf_sys::bindings::esp_freertos_idle_cb_t","esp_idf_sys::bindings::esp_freertos_tick_cb_t","esp_idf_sys::bindings::esp_console_cmd_func_t","esp_idf_sys::bindings::esp_console_cmd_func_with_context_t","esp_idf_sys::bindings::linenoiseCompletionCallback","esp_idf_sys::bindings::linenoiseHintsCallback","esp_idf_sys::bindings::linenoiseFreeHintsCallback","esp_idf_sys::bindings::_sig_func_ptr","esp_idf_sys::bindings::arg_resetfn","esp_idf_sys::bindings::arg_scanfn","esp_idf_sys::bindings::arg_checkfn","esp_idf_sys::bindings::arg_errorfn","esp_idf_sys::bindings::arg_dstr_freefn","esp_idf_sys::bindings::arg_cmdfn","esp_idf_sys::bindings::arg_comparefn","esp_idf_sys::bindings::esp_timer_cb_t","esp_idf_sys::bindings::esp_event_handler_t","esp_idf_sys::bindings::esp_netif_receive_t","esp_idf_sys::bindings::esp_netif_find_predicate_t","esp_idf_sys::bindings::esp_netif_callback_fn","esp_idf_sys::bindings::wifi_action_rx_cb_t","esp_idf_sys::bindings::esp_aes_128_encrypt_t","esp_idf_sys::bindings::esp_aes_128_decrypt_t","esp_idf_sys::bindings::esp_aes_wrap_t","esp_idf_sys::bindings::esp_aes_unwrap_t","esp_idf_sys::bindings::esp_hmac_sha256_vector_t","esp_idf_sys::bindings::esp_sha256_prf_t","esp_idf_sys::bindings::esp_hmac_md5_t","esp_idf_sys::bindings::esp_hmac_md5_vector_t","esp_idf_sys::bindings::esp_hmac_sha1_t","esp_idf_sys::bindings::esp_hmac_sha1_vector_t","esp_idf_sys::bindings::esp_sha1_prf_t","esp_idf_sys::bindings::esp_sha1_vector_t","esp_idf_sys::bindings::esp_pbkdf2_sha1_t","esp_idf_sys::bindings::esp_rc4_skip_t","esp_idf_sys::bindings::esp_md5_vector_t","esp_idf_sys::bindings::esp_aes_encrypt_t","esp_idf_sys::bindings::esp_aes_encrypt_init_t","esp_idf_sys::bindings::esp_aes_encrypt_deinit_t","esp_idf_sys::bindings::esp_aes_decrypt_t","esp_idf_sys::bindings::esp_aes_decrypt_init_t","esp_idf_sys::bindings::esp_aes_decrypt_deinit_t","esp_idf_sys::bindings::esp_omac1_aes_128_t","esp_idf_sys::bindings::esp_ccmp_decrypt_t","esp_idf_sys::bindings::esp_ccmp_encrypt_t","esp_idf_sys::bindings::esp_aes_gmac_t","esp_idf_sys::bindings::esp_sha256_vector_t","esp_idf_sys::bindings::esp_crc32_le_t","esp_idf_sys::bindings::wifi_promiscuous_cb_t","esp_idf_sys::bindings::esp_vendor_ie_cb_t","esp_idf_sys::bindings::wifi_csi_cb_t","esp_idf_sys::bindings::esp_now_recv_cb_t","esp_idf_sys::bindings::esp_now_send_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_ref_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_free_cb_t","esp_idf_sys::bindings::wifi_rxcb_t","esp_idf_sys::bindings::wifi_mac_time_update_cb_t","esp_idf_sys::bindings::wifi_tx_done_cb_t","esp_idf_sys::bindings::neighbor_rep_request_cb","esp_idf_sys::bindings::transaction_cb_t","esp_idf_sys::bindings::gpio_isr_t","esp_idf_sys::bindings::dns_found_callback","esp_idf_sys::bindings::pbuf_free_custom_fn","esp_idf_sys::bindings::netif_init_fn","esp_idf_sys::bindings::netif_input_fn","esp_idf_sys::bindings::netif_output_fn","esp_idf_sys::bindings::netif_output_ip6_fn","esp_idf_sys::bindings::netif_linkoutput_fn","esp_idf_sys::bindings::netif_status_callback_fn","esp_idf_sys::bindings::netif_igmp_mac_filter_fn","esp_idf_sys::bindings::netif_mld_mac_filter_fn","esp_idf_sys::bindings::netif_ext_callback_fn","esp_idf_sys::bindings::init_fn_t","esp_idf_sys::bindings::input_fn_t","esp_idf_sys::bindings::sntp_sync_time_cb_t","esp_idf_sys::bindings::esp_sntp_time_cb_t","esp_idf_sys::bindings::ETSTask","esp_idf_sys::bindings::ets_idle_cb_t","esp_idf_sys::bindings::ETSTimerFunc","esp_idf_sys::bindings::ets_isr_t","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_sign_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_key_len_func","esp_idf_sys::bindings::mbedtls_x509_crt_ext_cb_t","esp_idf_sys::bindings::mbedtls_x509_crt_ca_cb_t","esp_idf_sys::bindings::mbedtls_ssl_send_t","esp_idf_sys::bindings::mbedtls_ssl_recv_t","esp_idf_sys::bindings::mbedtls_ssl_recv_timeout_t","esp_idf_sys::bindings::mbedtls_ssl_set_timer_t","esp_idf_sys::bindings::mbedtls_ssl_get_timer_t","esp_idf_sys::bindings::mbedtls_ssl_cache_get_t","esp_idf_sys::bindings::mbedtls_ssl_cache_set_t","esp_idf_sys::bindings::mbedtls_ssl_export_keys_t","esp_idf_sys::bindings::mbedtls_ssl_hs_cb_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_write_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_parse_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_write_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_check_t","esp_idf_sys::bindings::mbedtls_entropy_f_source_ptr","esp_idf_sys::bindings::http_event_handle_cb","esp_idf_sys::bindings::http_client_init_cb_t","esp_idf_sys::bindings::connect_func","esp_idf_sys::bindings::io_func","esp_idf_sys::bindings::io_read_func","esp_idf_sys::bindings::trans_func","esp_idf_sys::bindings::poll_func","esp_idf_sys::bindings::connect_async_func","esp_idf_sys::bindings::payload_transfer_func","esp_idf_sys::bindings::http_data_cb","esp_idf_sys::bindings::http_cb","esp_idf_sys::bindings::httpd_free_ctx_fn_t","esp_idf_sys::bindings::httpd_open_func_t","esp_idf_sys::bindings::httpd_close_func_t","esp_idf_sys::bindings::httpd_uri_match_func_t","esp_idf_sys::bindings::httpd_err_handler_func_t","esp_idf_sys::bindings::httpd_send_func_t","esp_idf_sys::bindings::httpd_recv_func_t","esp_idf_sys::bindings::httpd_pending_func_t","esp_idf_sys::bindings::httpd_work_fn_t","esp_idf_sys::bindings::nvs_flash_generate_keys_t","esp_idf_sys::bindings::nvs_flash_read_cfg_t","esp_idf_sys::bindings::protocomm_req_handler_t","esp_idf_sys::bindings::wifi_prov_cb_func_t","esp_idf_sys::bindings::adc_continuous_callback_t","esp_idf_sys::bindings::gptimer_alarm_cb_t","esp_idf_sys::bindings::i2c_master_callback_t","esp_idf_sys::bindings::i2c_slave_received_callback_t","esp_idf_sys::bindings::i2c_slave_stretch_callback_t","esp_idf_sys::bindings::i2s_isr_callback_t","esp_idf_sys::bindings::ledc_cb_t","esp_idf_sys::bindings::mcpwm_timer_event_cb_t","esp_idf_sys::bindings::mcpwm_brake_event_cb_t","esp_idf_sys::bindings::mcpwm_fault_event_cb_t","esp_idf_sys::bindings::mcpwm_compare_event_cb_t","esp_idf_sys::bindings::mcpwm_capture_event_cb_t","esp_idf_sys::bindings::rmt_tx_end_fn_t","esp_idf_sys::bindings::sample_to_rmt_t","esp_idf_sys::bindings::rmt_tx_done_callback_t","esp_idf_sys::bindings::rmt_rx_done_callback_t","esp_idf_sys::bindings::rmt_encode_simple_cb_t","esp_idf_sys::bindings::slave_transaction_cb_t","esp_idf_sys::bindings::timer_isr_t","esp_idf_sys::bindings::uart_select_notif_callback_t","esp_idf_sys::bindings::panic_info_dump_fn_t","esp_idf_sys::bindings::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Debug for Option&lt;T&gt;<div class=\"where\">where\n    T: Debug,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">fmt</a>(&amp;self, f: &amp;mut Formatter&lt;'_&gt;) -&gt; Result&lt;(), Error&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a>Read more</a></div></details></div></details>","Debug","esp_idf_sys::bindings::__compar_fn_t","esp_idf_sys::bindings::shutdown_handler_t","esp_idf_sys::bindings::vprintf_like_t","esp_idf_sys::bindings::intr_handler_t","esp_idf_sys::bindings::esp_cpu_intr_handler_t","esp_idf_sys::bindings::esp_deep_sleep_cb_t","esp_idf_sys::bindings::esp_deep_sleep_wake_stub_fn_t","esp_idf_sys::bindings::TaskFunction_t","esp_idf_sys::bindings::multi_heap_walker_cb_t","esp_idf_sys::bindings::esp_alloc_failed_hook_t","esp_idf_sys::bindings::heap_caps_walker_cb_t","esp_idf_sys::bindings::TaskHookFunction_t","esp_idf_sys::bindings::StreamBufferCallbackFunction_t","esp_idf_sys::bindings::TimerCallbackFunction_t","esp_idf_sys::bindings::PendedFunction_t","esp_idf_sys::bindings::TlsDeleteCallbackFunction_t","esp_idf_sys::bindings::task_wdt_msg_handler","esp_idf_sys::bindings::esp_freertos_idle_cb_t","esp_idf_sys::bindings::esp_freertos_tick_cb_t","esp_idf_sys::bindings::esp_console_cmd_func_t","esp_idf_sys::bindings::esp_console_cmd_func_with_context_t","esp_idf_sys::bindings::linenoiseCompletionCallback","esp_idf_sys::bindings::linenoiseHintsCallback","esp_idf_sys::bindings::linenoiseFreeHintsCallback","esp_idf_sys::bindings::_sig_func_ptr","esp_idf_sys::bindings::arg_resetfn","esp_idf_sys::bindings::arg_scanfn","esp_idf_sys::bindings::arg_checkfn","esp_idf_sys::bindings::arg_errorfn","esp_idf_sys::bindings::arg_dstr_freefn","esp_idf_sys::bindings::arg_cmdfn","esp_idf_sys::bindings::arg_comparefn","esp_idf_sys::bindings::esp_timer_cb_t","esp_idf_sys::bindings::esp_event_handler_t","esp_idf_sys::bindings::esp_netif_receive_t","esp_idf_sys::bindings::esp_netif_find_predicate_t","esp_idf_sys::bindings::esp_netif_callback_fn","esp_idf_sys::bindings::wifi_action_rx_cb_t","esp_idf_sys::bindings::esp_aes_128_encrypt_t","esp_idf_sys::bindings::esp_aes_128_decrypt_t","esp_idf_sys::bindings::esp_aes_wrap_t","esp_idf_sys::bindings::esp_aes_unwrap_t","esp_idf_sys::bindings::esp_hmac_sha256_vector_t","esp_idf_sys::bindings::esp_sha256_prf_t","esp_idf_sys::bindings::esp_hmac_md5_t","esp_idf_sys::bindings::esp_hmac_md5_vector_t","esp_idf_sys::bindings::esp_hmac_sha1_t","esp_idf_sys::bindings::esp_hmac_sha1_vector_t","esp_idf_sys::bindings::esp_sha1_prf_t","esp_idf_sys::bindings::esp_sha1_vector_t","esp_idf_sys::bindings::esp_pbkdf2_sha1_t","esp_idf_sys::bindings::esp_rc4_skip_t","esp_idf_sys::bindings::esp_md5_vector_t","esp_idf_sys::bindings::esp_aes_encrypt_t","esp_idf_sys::bindings::esp_aes_encrypt_init_t","esp_idf_sys::bindings::esp_aes_encrypt_deinit_t","esp_idf_sys::bindings::esp_aes_decrypt_t","esp_idf_sys::bindings::esp_aes_decrypt_init_t","esp_idf_sys::bindings::esp_aes_decrypt_deinit_t","esp_idf_sys::bindings::esp_omac1_aes_128_t","esp_idf_sys::bindings::esp_ccmp_decrypt_t","esp_idf_sys::bindings::esp_ccmp_encrypt_t","esp_idf_sys::bindings::esp_aes_gmac_t","esp_idf_sys::bindings::esp_sha256_vector_t","esp_idf_sys::bindings::esp_crc32_le_t","esp_idf_sys::bindings::wifi_promiscuous_cb_t","esp_idf_sys::bindings::esp_vendor_ie_cb_t","esp_idf_sys::bindings::wifi_csi_cb_t","esp_idf_sys::bindings::esp_now_recv_cb_t","esp_idf_sys::bindings::esp_now_send_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_ref_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_free_cb_t","esp_idf_sys::bindings::wifi_rxcb_t","esp_idf_sys::bindings::wifi_mac_time_update_cb_t","esp_idf_sys::bindings::wifi_tx_done_cb_t","esp_idf_sys::bindings::neighbor_rep_request_cb","esp_idf_sys::bindings::transaction_cb_t","esp_idf_sys::bindings::gpio_isr_t","esp_idf_sys::bindings::dns_found_callback","esp_idf_sys::bindings::pbuf_free_custom_fn","esp_idf_sys::bindings::netif_init_fn","esp_idf_sys::bindings::netif_input_fn","esp_idf_sys::bindings::netif_output_fn","esp_idf_sys::bindings::netif_output_ip6_fn","esp_idf_sys::bindings::netif_linkoutput_fn","esp_idf_sys::bindings::netif_status_callback_fn","esp_idf_sys::bindings::netif_igmp_mac_filter_fn","esp_idf_sys::bindings::netif_mld_mac_filter_fn","esp_idf_sys::bindings::netif_ext_callback_fn","esp_idf_sys::bindings::init_fn_t","esp_idf_sys::bindings::input_fn_t","esp_idf_sys::bindings::sntp_sync_time_cb_t","esp_idf_sys::bindings::esp_sntp_time_cb_t","esp_idf_sys::bindings::ETSTask","esp_idf_sys::bindings::ets_idle_cb_t","esp_idf_sys::bindings::ETSTimerFunc","esp_idf_sys::bindings::ets_isr_t","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_sign_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_key_len_func","esp_idf_sys::bindings::mbedtls_x509_crt_ext_cb_t","esp_idf_sys::bindings::mbedtls_x509_crt_ca_cb_t","esp_idf_sys::bindings::mbedtls_ssl_send_t","esp_idf_sys::bindings::mbedtls_ssl_recv_t","esp_idf_sys::bindings::mbedtls_ssl_recv_timeout_t","esp_idf_sys::bindings::mbedtls_ssl_set_timer_t","esp_idf_sys::bindings::mbedtls_ssl_get_timer_t","esp_idf_sys::bindings::mbedtls_ssl_cache_get_t","esp_idf_sys::bindings::mbedtls_ssl_cache_set_t","esp_idf_sys::bindings::mbedtls_ssl_export_keys_t","esp_idf_sys::bindings::mbedtls_ssl_hs_cb_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_write_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_parse_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_write_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_check_t","esp_idf_sys::bindings::mbedtls_entropy_f_source_ptr","esp_idf_sys::bindings::http_event_handle_cb","esp_idf_sys::bindings::http_client_init_cb_t","esp_idf_sys::bindings::connect_func","esp_idf_sys::bindings::io_func","esp_idf_sys::bindings::io_read_func","esp_idf_sys::bindings::trans_func","esp_idf_sys::bindings::poll_func","esp_idf_sys::bindings::connect_async_func","esp_idf_sys::bindings::payload_transfer_func","esp_idf_sys::bindings::http_data_cb","esp_idf_sys::bindings::http_cb","esp_idf_sys::bindings::httpd_free_ctx_fn_t","esp_idf_sys::bindings::httpd_open_func_t","esp_idf_sys::bindings::httpd_close_func_t","esp_idf_sys::bindings::httpd_uri_match_func_t","esp_idf_sys::bindings::httpd_err_handler_func_t","esp_idf_sys::bindings::httpd_send_func_t","esp_idf_sys::bindings::httpd_recv_func_t","esp_idf_sys::bindings::httpd_pending_func_t","esp_idf_sys::bindings::httpd_work_fn_t","esp_idf_sys::bindings::nvs_flash_generate_keys_t","esp_idf_sys::bindings::nvs_flash_read_cfg_t","esp_idf_sys::bindings::protocomm_req_handler_t","esp_idf_sys::bindings::wifi_prov_cb_func_t","esp_idf_sys::bindings::adc_continuous_callback_t","esp_idf_sys::bindings::gptimer_alarm_cb_t","esp_idf_sys::bindings::i2c_master_callback_t","esp_idf_sys::bindings::i2c_slave_received_callback_t","esp_idf_sys::bindings::i2c_slave_stretch_callback_t","esp_idf_sys::bindings::i2s_isr_callback_t","esp_idf_sys::bindings::ledc_cb_t","esp_idf_sys::bindings::mcpwm_timer_event_cb_t","esp_idf_sys::bindings::mcpwm_brake_event_cb_t","esp_idf_sys::bindings::mcpwm_fault_event_cb_t","esp_idf_sys::bindings::mcpwm_compare_event_cb_t","esp_idf_sys::bindings::mcpwm_capture_event_cb_t","esp_idf_sys::bindings::rmt_tx_end_fn_t","esp_idf_sys::bindings::sample_to_rmt_t","esp_idf_sys::bindings::rmt_tx_done_callback_t","esp_idf_sys::bindings::rmt_rx_done_callback_t","esp_idf_sys::bindings::rmt_encode_simple_cb_t","esp_idf_sys::bindings::slave_transaction_cb_t","esp_idf_sys::bindings::timer_isr_t","esp_idf_sys::bindings::uart_select_notif_callback_t","esp_idf_sys::bindings::panic_info_dump_fn_t","esp_idf_sys::bindings::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for Option&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; Option&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns [<code>None</code>][Option::None].</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre></div>\n</div></details></div></details>","Default","esp_idf_sys::bindings::__compar_fn_t","esp_idf_sys::bindings::shutdown_handler_t","esp_idf_sys::bindings::vprintf_like_t","esp_idf_sys::bindings::intr_handler_t","esp_idf_sys::bindings::esp_cpu_intr_handler_t","esp_idf_sys::bindings::esp_deep_sleep_cb_t","esp_idf_sys::bindings::esp_deep_sleep_wake_stub_fn_t","esp_idf_sys::bindings::TaskFunction_t","esp_idf_sys::bindings::multi_heap_walker_cb_t","esp_idf_sys::bindings::esp_alloc_failed_hook_t","esp_idf_sys::bindings::heap_caps_walker_cb_t","esp_idf_sys::bindings::TaskHookFunction_t","esp_idf_sys::bindings::StreamBufferCallbackFunction_t","esp_idf_sys::bindings::TimerCallbackFunction_t","esp_idf_sys::bindings::PendedFunction_t","esp_idf_sys::bindings::TlsDeleteCallbackFunction_t","esp_idf_sys::bindings::task_wdt_msg_handler","esp_idf_sys::bindings::esp_freertos_idle_cb_t","esp_idf_sys::bindings::esp_freertos_tick_cb_t","esp_idf_sys::bindings::esp_console_cmd_func_t","esp_idf_sys::bindings::esp_console_cmd_func_with_context_t","esp_idf_sys::bindings::linenoiseCompletionCallback","esp_idf_sys::bindings::linenoiseHintsCallback","esp_idf_sys::bindings::linenoiseFreeHintsCallback","esp_idf_sys::bindings::_sig_func_ptr","esp_idf_sys::bindings::arg_resetfn","esp_idf_sys::bindings::arg_scanfn","esp_idf_sys::bindings::arg_checkfn","esp_idf_sys::bindings::arg_errorfn","esp_idf_sys::bindings::arg_dstr_freefn","esp_idf_sys::bindings::arg_cmdfn","esp_idf_sys::bindings::arg_comparefn","esp_idf_sys::bindings::esp_timer_cb_t","esp_idf_sys::bindings::esp_event_handler_t","esp_idf_sys::bindings::esp_netif_receive_t","esp_idf_sys::bindings::esp_netif_find_predicate_t","esp_idf_sys::bindings::esp_netif_callback_fn","esp_idf_sys::bindings::wifi_action_rx_cb_t","esp_idf_sys::bindings::esp_aes_128_encrypt_t","esp_idf_sys::bindings::esp_aes_128_decrypt_t","esp_idf_sys::bindings::esp_aes_wrap_t","esp_idf_sys::bindings::esp_aes_unwrap_t","esp_idf_sys::bindings::esp_hmac_sha256_vector_t","esp_idf_sys::bindings::esp_sha256_prf_t","esp_idf_sys::bindings::esp_hmac_md5_t","esp_idf_sys::bindings::esp_hmac_md5_vector_t","esp_idf_sys::bindings::esp_hmac_sha1_t","esp_idf_sys::bindings::esp_hmac_sha1_vector_t","esp_idf_sys::bindings::esp_sha1_prf_t","esp_idf_sys::bindings::esp_sha1_vector_t","esp_idf_sys::bindings::esp_pbkdf2_sha1_t","esp_idf_sys::bindings::esp_rc4_skip_t","esp_idf_sys::bindings::esp_md5_vector_t","esp_idf_sys::bindings::esp_aes_encrypt_t","esp_idf_sys::bindings::esp_aes_encrypt_init_t","esp_idf_sys::bindings::esp_aes_encrypt_deinit_t","esp_idf_sys::bindings::esp_aes_decrypt_t","esp_idf_sys::bindings::esp_aes_decrypt_init_t","esp_idf_sys::bindings::esp_aes_decrypt_deinit_t","esp_idf_sys::bindings::esp_omac1_aes_128_t","esp_idf_sys::bindings::esp_ccmp_decrypt_t","esp_idf_sys::bindings::esp_ccmp_encrypt_t","esp_idf_sys::bindings::esp_aes_gmac_t","esp_idf_sys::bindings::esp_sha256_vector_t","esp_idf_sys::bindings::esp_crc32_le_t","esp_idf_sys::bindings::wifi_promiscuous_cb_t","esp_idf_sys::bindings::esp_vendor_ie_cb_t","esp_idf_sys::bindings::wifi_csi_cb_t","esp_idf_sys::bindings::esp_now_recv_cb_t","esp_idf_sys::bindings::esp_now_send_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_ref_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_free_cb_t","esp_idf_sys::bindings::wifi_rxcb_t","esp_idf_sys::bindings::wifi_mac_time_update_cb_t","esp_idf_sys::bindings::wifi_tx_done_cb_t","esp_idf_sys::bindings::neighbor_rep_request_cb","esp_idf_sys::bindings::transaction_cb_t","esp_idf_sys::bindings::gpio_isr_t","esp_idf_sys::bindings::dns_found_callback","esp_idf_sys::bindings::pbuf_free_custom_fn","esp_idf_sys::bindings::netif_init_fn","esp_idf_sys::bindings::netif_input_fn","esp_idf_sys::bindings::netif_output_fn","esp_idf_sys::bindings::netif_output_ip6_fn","esp_idf_sys::bindings::netif_linkoutput_fn","esp_idf_sys::bindings::netif_status_callback_fn","esp_idf_sys::bindings::netif_igmp_mac_filter_fn","esp_idf_sys::bindings::netif_mld_mac_filter_fn","esp_idf_sys::bindings::netif_ext_callback_fn","esp_idf_sys::bindings::init_fn_t","esp_idf_sys::bindings::input_fn_t","esp_idf_sys::bindings::sntp_sync_time_cb_t","esp_idf_sys::bindings::esp_sntp_time_cb_t","esp_idf_sys::bindings::ETSTask","esp_idf_sys::bindings::ets_idle_cb_t","esp_idf_sys::bindings::ETSTimerFunc","esp_idf_sys::bindings::ets_isr_t","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_sign_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_key_len_func","esp_idf_sys::bindings::mbedtls_x509_crt_ext_cb_t","esp_idf_sys::bindings::mbedtls_x509_crt_ca_cb_t","esp_idf_sys::bindings::mbedtls_ssl_send_t","esp_idf_sys::bindings::mbedtls_ssl_recv_t","esp_idf_sys::bindings::mbedtls_ssl_recv_timeout_t","esp_idf_sys::bindings::mbedtls_ssl_set_timer_t","esp_idf_sys::bindings::mbedtls_ssl_get_timer_t","esp_idf_sys::bindings::mbedtls_ssl_cache_get_t","esp_idf_sys::bindings::mbedtls_ssl_cache_set_t","esp_idf_sys::bindings::mbedtls_ssl_export_keys_t","esp_idf_sys::bindings::mbedtls_ssl_hs_cb_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_write_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_parse_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_write_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_check_t","esp_idf_sys::bindings::mbedtls_entropy_f_source_ptr","esp_idf_sys::bindings::http_event_handle_cb","esp_idf_sys::bindings::http_client_init_cb_t","esp_idf_sys::bindings::connect_func","esp_idf_sys::bindings::io_func","esp_idf_sys::bindings::io_read_func","esp_idf_sys::bindings::trans_func","esp_idf_sys::bindings::poll_func","esp_idf_sys::bindings::connect_async_func","esp_idf_sys::bindings::payload_transfer_func","esp_idf_sys::bindings::http_data_cb","esp_idf_sys::bindings::http_cb","esp_idf_sys::bindings::httpd_free_ctx_fn_t","esp_idf_sys::bindings::httpd_open_func_t","esp_idf_sys::bindings::httpd_close_func_t","esp_idf_sys::bindings::httpd_uri_match_func_t","esp_idf_sys::bindings::httpd_err_handler_func_t","esp_idf_sys::bindings::httpd_send_func_t","esp_idf_sys::bindings::httpd_recv_func_t","esp_idf_sys::bindings::httpd_pending_func_t","esp_idf_sys::bindings::httpd_work_fn_t","esp_idf_sys::bindings::nvs_flash_generate_keys_t","esp_idf_sys::bindings::nvs_flash_read_cfg_t","esp_idf_sys::bindings::protocomm_req_handler_t","esp_idf_sys::bindings::wifi_prov_cb_func_t","esp_idf_sys::bindings::adc_continuous_callback_t","esp_idf_sys::bindings::gptimer_alarm_cb_t","esp_idf_sys::bindings::i2c_master_callback_t","esp_idf_sys::bindings::i2c_slave_received_callback_t","esp_idf_sys::bindings::i2c_slave_stretch_callback_t","esp_idf_sys::bindings::i2s_isr_callback_t","esp_idf_sys::bindings::ledc_cb_t","esp_idf_sys::bindings::mcpwm_timer_event_cb_t","esp_idf_sys::bindings::mcpwm_brake_event_cb_t","esp_idf_sys::bindings::mcpwm_fault_event_cb_t","esp_idf_sys::bindings::mcpwm_compare_event_cb_t","esp_idf_sys::bindings::mcpwm_capture_event_cb_t","esp_idf_sys::bindings::rmt_tx_end_fn_t","esp_idf_sys::bindings::sample_to_rmt_t","esp_idf_sys::bindings::rmt_tx_done_callback_t","esp_idf_sys::bindings::rmt_rx_done_callback_t","esp_idf_sys::bindings::rmt_encode_simple_cb_t","esp_idf_sys::bindings::slave_transaction_cb_t","esp_idf_sys::bindings::timer_isr_t","esp_idf_sys::bindings::uart_select_notif_callback_t","esp_idf_sys::bindings::panic_info_dump_fn_t","esp_idf_sys::bindings::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.12.0\">1.12.0</span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; From&lt;T&gt; for Option&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from</a>(val: T) -&gt; Option&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new [<code>Some</code>].</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre></div>\n</div></details></div></details>","From<T>","esp_idf_sys::bindings::__compar_fn_t","esp_idf_sys::bindings::shutdown_handler_t","esp_idf_sys::bindings::vprintf_like_t","esp_idf_sys::bindings::intr_handler_t","esp_idf_sys::bindings::esp_cpu_intr_handler_t","esp_idf_sys::bindings::esp_deep_sleep_cb_t","esp_idf_sys::bindings::esp_deep_sleep_wake_stub_fn_t","esp_idf_sys::bindings::TaskFunction_t","esp_idf_sys::bindings::multi_heap_walker_cb_t","esp_idf_sys::bindings::esp_alloc_failed_hook_t","esp_idf_sys::bindings::heap_caps_walker_cb_t","esp_idf_sys::bindings::TaskHookFunction_t","esp_idf_sys::bindings::StreamBufferCallbackFunction_t","esp_idf_sys::bindings::TimerCallbackFunction_t","esp_idf_sys::bindings::PendedFunction_t","esp_idf_sys::bindings::TlsDeleteCallbackFunction_t","esp_idf_sys::bindings::task_wdt_msg_handler","esp_idf_sys::bindings::esp_freertos_idle_cb_t","esp_idf_sys::bindings::esp_freertos_tick_cb_t","esp_idf_sys::bindings::esp_console_cmd_func_t","esp_idf_sys::bindings::esp_console_cmd_func_with_context_t","esp_idf_sys::bindings::linenoiseCompletionCallback","esp_idf_sys::bindings::linenoiseHintsCallback","esp_idf_sys::bindings::linenoiseFreeHintsCallback","esp_idf_sys::bindings::_sig_func_ptr","esp_idf_sys::bindings::arg_resetfn","esp_idf_sys::bindings::arg_scanfn","esp_idf_sys::bindings::arg_checkfn","esp_idf_sys::bindings::arg_errorfn","esp_idf_sys::bindings::arg_dstr_freefn","esp_idf_sys::bindings::arg_cmdfn","esp_idf_sys::bindings::arg_comparefn","esp_idf_sys::bindings::esp_timer_cb_t","esp_idf_sys::bindings::esp_event_handler_t","esp_idf_sys::bindings::esp_netif_receive_t","esp_idf_sys::bindings::esp_netif_find_predicate_t","esp_idf_sys::bindings::esp_netif_callback_fn","esp_idf_sys::bindings::wifi_action_rx_cb_t","esp_idf_sys::bindings::esp_aes_128_encrypt_t","esp_idf_sys::bindings::esp_aes_128_decrypt_t","esp_idf_sys::bindings::esp_aes_wrap_t","esp_idf_sys::bindings::esp_aes_unwrap_t","esp_idf_sys::bindings::esp_hmac_sha256_vector_t","esp_idf_sys::bindings::esp_sha256_prf_t","esp_idf_sys::bindings::esp_hmac_md5_t","esp_idf_sys::bindings::esp_hmac_md5_vector_t","esp_idf_sys::bindings::esp_hmac_sha1_t","esp_idf_sys::bindings::esp_hmac_sha1_vector_t","esp_idf_sys::bindings::esp_sha1_prf_t","esp_idf_sys::bindings::esp_sha1_vector_t","esp_idf_sys::bindings::esp_pbkdf2_sha1_t","esp_idf_sys::bindings::esp_rc4_skip_t","esp_idf_sys::bindings::esp_md5_vector_t","esp_idf_sys::bindings::esp_aes_encrypt_t","esp_idf_sys::bindings::esp_aes_encrypt_init_t","esp_idf_sys::bindings::esp_aes_encrypt_deinit_t","esp_idf_sys::bindings::esp_aes_decrypt_t","esp_idf_sys::bindings::esp_aes_decrypt_init_t","esp_idf_sys::bindings::esp_aes_decrypt_deinit_t","esp_idf_sys::bindings::esp_omac1_aes_128_t","esp_idf_sys::bindings::esp_ccmp_decrypt_t","esp_idf_sys::bindings::esp_ccmp_encrypt_t","esp_idf_sys::bindings::esp_aes_gmac_t","esp_idf_sys::bindings::esp_sha256_vector_t","esp_idf_sys::bindings::esp_crc32_le_t","esp_idf_sys::bindings::wifi_promiscuous_cb_t","esp_idf_sys::bindings::esp_vendor_ie_cb_t","esp_idf_sys::bindings::wifi_csi_cb_t","esp_idf_sys::bindings::esp_now_recv_cb_t","esp_idf_sys::bindings::esp_now_send_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_ref_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_free_cb_t","esp_idf_sys::bindings::wifi_rxcb_t","esp_idf_sys::bindings::wifi_mac_time_update_cb_t","esp_idf_sys::bindings::wifi_tx_done_cb_t","esp_idf_sys::bindings::neighbor_rep_request_cb","esp_idf_sys::bindings::transaction_cb_t","esp_idf_sys::bindings::gpio_isr_t","esp_idf_sys::bindings::dns_found_callback","esp_idf_sys::bindings::pbuf_free_custom_fn","esp_idf_sys::bindings::netif_init_fn","esp_idf_sys::bindings::netif_input_fn","esp_idf_sys::bindings::netif_output_fn","esp_idf_sys::bindings::netif_output_ip6_fn","esp_idf_sys::bindings::netif_linkoutput_fn","esp_idf_sys::bindings::netif_status_callback_fn","esp_idf_sys::bindings::netif_igmp_mac_filter_fn","esp_idf_sys::bindings::netif_mld_mac_filter_fn","esp_idf_sys::bindings::netif_ext_callback_fn","esp_idf_sys::bindings::init_fn_t","esp_idf_sys::bindings::input_fn_t","esp_idf_sys::bindings::sntp_sync_time_cb_t","esp_idf_sys::bindings::esp_sntp_time_cb_t","esp_idf_sys::bindings::ETSTask","esp_idf_sys::bindings::ets_idle_cb_t","esp_idf_sys::bindings::ETSTimerFunc","esp_idf_sys::bindings::ets_isr_t","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_sign_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_key_len_func","esp_idf_sys::bindings::mbedtls_x509_crt_ext_cb_t","esp_idf_sys::bindings::mbedtls_x509_crt_ca_cb_t","esp_idf_sys::bindings::mbedtls_ssl_send_t","esp_idf_sys::bindings::mbedtls_ssl_recv_t","esp_idf_sys::bindings::mbedtls_ssl_recv_timeout_t","esp_idf_sys::bindings::mbedtls_ssl_set_timer_t","esp_idf_sys::bindings::mbedtls_ssl_get_timer_t","esp_idf_sys::bindings::mbedtls_ssl_cache_get_t","esp_idf_sys::bindings::mbedtls_ssl_cache_set_t","esp_idf_sys::bindings::mbedtls_ssl_export_keys_t","esp_idf_sys::bindings::mbedtls_ssl_hs_cb_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_write_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_parse_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_write_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_check_t","esp_idf_sys::bindings::mbedtls_entropy_f_source_ptr","esp_idf_sys::bindings::http_event_handle_cb","esp_idf_sys::bindings::http_client_init_cb_t","esp_idf_sys::bindings::connect_func","esp_idf_sys::bindings::io_func","esp_idf_sys::bindings::io_read_func","esp_idf_sys::bindings::trans_func","esp_idf_sys::bindings::poll_func","esp_idf_sys::bindings::connect_async_func","esp_idf_sys::bindings::payload_transfer_func","esp_idf_sys::bindings::http_data_cb","esp_idf_sys::bindings::http_cb","esp_idf_sys::bindings::httpd_free_ctx_fn_t","esp_idf_sys::bindings::httpd_open_func_t","esp_idf_sys::bindings::httpd_close_func_t","esp_idf_sys::bindings::httpd_uri_match_func_t","esp_idf_sys::bindings::httpd_err_handler_func_t","esp_idf_sys::bindings::httpd_send_func_t","esp_idf_sys::bindings::httpd_recv_func_t","esp_idf_sys::bindings::httpd_pending_func_t","esp_idf_sys::bindings::httpd_work_fn_t","esp_idf_sys::bindings::nvs_flash_generate_keys_t","esp_idf_sys::bindings::nvs_flash_read_cfg_t","esp_idf_sys::bindings::protocomm_req_handler_t","esp_idf_sys::bindings::wifi_prov_cb_func_t","esp_idf_sys::bindings::adc_continuous_callback_t","esp_idf_sys::bindings::gptimer_alarm_cb_t","esp_idf_sys::bindings::i2c_master_callback_t","esp_idf_sys::bindings::i2c_slave_received_callback_t","esp_idf_sys::bindings::i2c_slave_stretch_callback_t","esp_idf_sys::bindings::i2s_isr_callback_t","esp_idf_sys::bindings::ledc_cb_t","esp_idf_sys::bindings::mcpwm_timer_event_cb_t","esp_idf_sys::bindings::mcpwm_brake_event_cb_t","esp_idf_sys::bindings::mcpwm_fault_event_cb_t","esp_idf_sys::bindings::mcpwm_compare_event_cb_t","esp_idf_sys::bindings::mcpwm_capture_event_cb_t","esp_idf_sys::bindings::rmt_tx_end_fn_t","esp_idf_sys::bindings::sample_to_rmt_t","esp_idf_sys::bindings::rmt_tx_done_callback_t","esp_idf_sys::bindings::rmt_rx_done_callback_t","esp_idf_sys::bindings::rmt_encode_simple_cb_t","esp_idf_sys::bindings::slave_transaction_cb_t","esp_idf_sys::bindings::timer_isr_t","esp_idf_sys::bindings::uart_select_notif_callback_t","esp_idf_sys::bindings::panic_info_dump_fn_t","esp_idf_sys::bindings::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; FromIterator&lt;Option&lt;A&gt;&gt; for Option&lt;V&gt;<div class=\"where\">where\n    V: FromIterator&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; Option&lt;V&gt;<div class=\"where\">where\n    I: IntoIterator&lt;Item = Option&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the [<code>Iterator</code>]: if it is [<code>None</code>][Option::None],\nno further elements are taken, and the [<code>None</code>][Option::None] is\nreturned. Should no [<code>None</code>][Option::None] occur, a container of type\n<code>V</code> containing the values of each [<code>Option</code>] is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Option<A>>","esp_idf_sys::bindings::__compar_fn_t","esp_idf_sys::bindings::shutdown_handler_t","esp_idf_sys::bindings::vprintf_like_t","esp_idf_sys::bindings::intr_handler_t","esp_idf_sys::bindings::esp_cpu_intr_handler_t","esp_idf_sys::bindings::esp_deep_sleep_cb_t","esp_idf_sys::bindings::esp_deep_sleep_wake_stub_fn_t","esp_idf_sys::bindings::TaskFunction_t","esp_idf_sys::bindings::multi_heap_walker_cb_t","esp_idf_sys::bindings::esp_alloc_failed_hook_t","esp_idf_sys::bindings::heap_caps_walker_cb_t","esp_idf_sys::bindings::TaskHookFunction_t","esp_idf_sys::bindings::StreamBufferCallbackFunction_t","esp_idf_sys::bindings::TimerCallbackFunction_t","esp_idf_sys::bindings::PendedFunction_t","esp_idf_sys::bindings::TlsDeleteCallbackFunction_t","esp_idf_sys::bindings::task_wdt_msg_handler","esp_idf_sys::bindings::esp_freertos_idle_cb_t","esp_idf_sys::bindings::esp_freertos_tick_cb_t","esp_idf_sys::bindings::esp_console_cmd_func_t","esp_idf_sys::bindings::esp_console_cmd_func_with_context_t","esp_idf_sys::bindings::linenoiseCompletionCallback","esp_idf_sys::bindings::linenoiseHintsCallback","esp_idf_sys::bindings::linenoiseFreeHintsCallback","esp_idf_sys::bindings::_sig_func_ptr","esp_idf_sys::bindings::arg_resetfn","esp_idf_sys::bindings::arg_scanfn","esp_idf_sys::bindings::arg_checkfn","esp_idf_sys::bindings::arg_errorfn","esp_idf_sys::bindings::arg_dstr_freefn","esp_idf_sys::bindings::arg_cmdfn","esp_idf_sys::bindings::arg_comparefn","esp_idf_sys::bindings::esp_timer_cb_t","esp_idf_sys::bindings::esp_event_handler_t","esp_idf_sys::bindings::esp_netif_receive_t","esp_idf_sys::bindings::esp_netif_find_predicate_t","esp_idf_sys::bindings::esp_netif_callback_fn","esp_idf_sys::bindings::wifi_action_rx_cb_t","esp_idf_sys::bindings::esp_aes_128_encrypt_t","esp_idf_sys::bindings::esp_aes_128_decrypt_t","esp_idf_sys::bindings::esp_aes_wrap_t","esp_idf_sys::bindings::esp_aes_unwrap_t","esp_idf_sys::bindings::esp_hmac_sha256_vector_t","esp_idf_sys::bindings::esp_sha256_prf_t","esp_idf_sys::bindings::esp_hmac_md5_t","esp_idf_sys::bindings::esp_hmac_md5_vector_t","esp_idf_sys::bindings::esp_hmac_sha1_t","esp_idf_sys::bindings::esp_hmac_sha1_vector_t","esp_idf_sys::bindings::esp_sha1_prf_t","esp_idf_sys::bindings::esp_sha1_vector_t","esp_idf_sys::bindings::esp_pbkdf2_sha1_t","esp_idf_sys::bindings::esp_rc4_skip_t","esp_idf_sys::bindings::esp_md5_vector_t","esp_idf_sys::bindings::esp_aes_encrypt_t","esp_idf_sys::bindings::esp_aes_encrypt_init_t","esp_idf_sys::bindings::esp_aes_encrypt_deinit_t","esp_idf_sys::bindings::esp_aes_decrypt_t","esp_idf_sys::bindings::esp_aes_decrypt_init_t","esp_idf_sys::bindings::esp_aes_decrypt_deinit_t","esp_idf_sys::bindings::esp_omac1_aes_128_t","esp_idf_sys::bindings::esp_ccmp_decrypt_t","esp_idf_sys::bindings::esp_ccmp_encrypt_t","esp_idf_sys::bindings::esp_aes_gmac_t","esp_idf_sys::bindings::esp_sha256_vector_t","esp_idf_sys::bindings::esp_crc32_le_t","esp_idf_sys::bindings::wifi_promiscuous_cb_t","esp_idf_sys::bindings::esp_vendor_ie_cb_t","esp_idf_sys::bindings::wifi_csi_cb_t","esp_idf_sys::bindings::esp_now_recv_cb_t","esp_idf_sys::bindings::esp_now_send_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_ref_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_free_cb_t","esp_idf_sys::bindings::wifi_rxcb_t","esp_idf_sys::bindings::wifi_mac_time_update_cb_t","esp_idf_sys::bindings::wifi_tx_done_cb_t","esp_idf_sys::bindings::neighbor_rep_request_cb","esp_idf_sys::bindings::transaction_cb_t","esp_idf_sys::bindings::gpio_isr_t","esp_idf_sys::bindings::dns_found_callback","esp_idf_sys::bindings::pbuf_free_custom_fn","esp_idf_sys::bindings::netif_init_fn","esp_idf_sys::bindings::netif_input_fn","esp_idf_sys::bindings::netif_output_fn","esp_idf_sys::bindings::netif_output_ip6_fn","esp_idf_sys::bindings::netif_linkoutput_fn","esp_idf_sys::bindings::netif_status_callback_fn","esp_idf_sys::bindings::netif_igmp_mac_filter_fn","esp_idf_sys::bindings::netif_mld_mac_filter_fn","esp_idf_sys::bindings::netif_ext_callback_fn","esp_idf_sys::bindings::init_fn_t","esp_idf_sys::bindings::input_fn_t","esp_idf_sys::bindings::sntp_sync_time_cb_t","esp_idf_sys::bindings::esp_sntp_time_cb_t","esp_idf_sys::bindings::ETSTask","esp_idf_sys::bindings::ets_idle_cb_t","esp_idf_sys::bindings::ETSTimerFunc","esp_idf_sys::bindings::ets_isr_t","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_sign_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_key_len_func","esp_idf_sys::bindings::mbedtls_x509_crt_ext_cb_t","esp_idf_sys::bindings::mbedtls_x509_crt_ca_cb_t","esp_idf_sys::bindings::mbedtls_ssl_send_t","esp_idf_sys::bindings::mbedtls_ssl_recv_t","esp_idf_sys::bindings::mbedtls_ssl_recv_timeout_t","esp_idf_sys::bindings::mbedtls_ssl_set_timer_t","esp_idf_sys::bindings::mbedtls_ssl_get_timer_t","esp_idf_sys::bindings::mbedtls_ssl_cache_get_t","esp_idf_sys::bindings::mbedtls_ssl_cache_set_t","esp_idf_sys::bindings::mbedtls_ssl_export_keys_t","esp_idf_sys::bindings::mbedtls_ssl_hs_cb_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_write_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_parse_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_write_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_check_t","esp_idf_sys::bindings::mbedtls_entropy_f_source_ptr","esp_idf_sys::bindings::http_event_handle_cb","esp_idf_sys::bindings::http_client_init_cb_t","esp_idf_sys::bindings::connect_func","esp_idf_sys::bindings::io_func","esp_idf_sys::bindings::io_read_func","esp_idf_sys::bindings::trans_func","esp_idf_sys::bindings::poll_func","esp_idf_sys::bindings::connect_async_func","esp_idf_sys::bindings::payload_transfer_func","esp_idf_sys::bindings::http_data_cb","esp_idf_sys::bindings::http_cb","esp_idf_sys::bindings::httpd_free_ctx_fn_t","esp_idf_sys::bindings::httpd_open_func_t","esp_idf_sys::bindings::httpd_close_func_t","esp_idf_sys::bindings::httpd_uri_match_func_t","esp_idf_sys::bindings::httpd_err_handler_func_t","esp_idf_sys::bindings::httpd_send_func_t","esp_idf_sys::bindings::httpd_recv_func_t","esp_idf_sys::bindings::httpd_pending_func_t","esp_idf_sys::bindings::httpd_work_fn_t","esp_idf_sys::bindings::nvs_flash_generate_keys_t","esp_idf_sys::bindings::nvs_flash_read_cfg_t","esp_idf_sys::bindings::protocomm_req_handler_t","esp_idf_sys::bindings::wifi_prov_cb_func_t","esp_idf_sys::bindings::adc_continuous_callback_t","esp_idf_sys::bindings::gptimer_alarm_cb_t","esp_idf_sys::bindings::i2c_master_callback_t","esp_idf_sys::bindings::i2c_slave_received_callback_t","esp_idf_sys::bindings::i2c_slave_stretch_callback_t","esp_idf_sys::bindings::i2s_isr_callback_t","esp_idf_sys::bindings::ledc_cb_t","esp_idf_sys::bindings::mcpwm_timer_event_cb_t","esp_idf_sys::bindings::mcpwm_brake_event_cb_t","esp_idf_sys::bindings::mcpwm_fault_event_cb_t","esp_idf_sys::bindings::mcpwm_compare_event_cb_t","esp_idf_sys::bindings::mcpwm_capture_event_cb_t","esp_idf_sys::bindings::rmt_tx_end_fn_t","esp_idf_sys::bindings::sample_to_rmt_t","esp_idf_sys::bindings::rmt_tx_done_callback_t","esp_idf_sys::bindings::rmt_rx_done_callback_t","esp_idf_sys::bindings::rmt_encode_simple_cb_t","esp_idf_sys::bindings::slave_transaction_cb_t","esp_idf_sys::bindings::timer_isr_t","esp_idf_sys::bindings::uart_select_notif_callback_t","esp_idf_sys::bindings::panic_info_dump_fn_t","esp_idf_sys::bindings::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3COption%3CInfallible%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-FromResidual%3COption%3CInfallible%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; FromResidual&lt;Option&lt;Infallible&gt;&gt; for Option&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_residual</a>(residual: Option&lt;Infallible&gt;) -&gt; Option&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a>Read more</a></div></details></div></details>","FromResidual<Option<Infallible>>","esp_idf_sys::bindings::__compar_fn_t","esp_idf_sys::bindings::shutdown_handler_t","esp_idf_sys::bindings::vprintf_like_t","esp_idf_sys::bindings::intr_handler_t","esp_idf_sys::bindings::esp_cpu_intr_handler_t","esp_idf_sys::bindings::esp_deep_sleep_cb_t","esp_idf_sys::bindings::esp_deep_sleep_wake_stub_fn_t","esp_idf_sys::bindings::TaskFunction_t","esp_idf_sys::bindings::multi_heap_walker_cb_t","esp_idf_sys::bindings::esp_alloc_failed_hook_t","esp_idf_sys::bindings::heap_caps_walker_cb_t","esp_idf_sys::bindings::TaskHookFunction_t","esp_idf_sys::bindings::StreamBufferCallbackFunction_t","esp_idf_sys::bindings::TimerCallbackFunction_t","esp_idf_sys::bindings::PendedFunction_t","esp_idf_sys::bindings::TlsDeleteCallbackFunction_t","esp_idf_sys::bindings::task_wdt_msg_handler","esp_idf_sys::bindings::esp_freertos_idle_cb_t","esp_idf_sys::bindings::esp_freertos_tick_cb_t","esp_idf_sys::bindings::esp_console_cmd_func_t","esp_idf_sys::bindings::esp_console_cmd_func_with_context_t","esp_idf_sys::bindings::linenoiseCompletionCallback","esp_idf_sys::bindings::linenoiseHintsCallback","esp_idf_sys::bindings::linenoiseFreeHintsCallback","esp_idf_sys::bindings::_sig_func_ptr","esp_idf_sys::bindings::arg_resetfn","esp_idf_sys::bindings::arg_scanfn","esp_idf_sys::bindings::arg_checkfn","esp_idf_sys::bindings::arg_errorfn","esp_idf_sys::bindings::arg_dstr_freefn","esp_idf_sys::bindings::arg_cmdfn","esp_idf_sys::bindings::arg_comparefn","esp_idf_sys::bindings::esp_timer_cb_t","esp_idf_sys::bindings::esp_event_handler_t","esp_idf_sys::bindings::esp_netif_receive_t","esp_idf_sys::bindings::esp_netif_find_predicate_t","esp_idf_sys::bindings::esp_netif_callback_fn","esp_idf_sys::bindings::wifi_action_rx_cb_t","esp_idf_sys::bindings::esp_aes_128_encrypt_t","esp_idf_sys::bindings::esp_aes_128_decrypt_t","esp_idf_sys::bindings::esp_aes_wrap_t","esp_idf_sys::bindings::esp_aes_unwrap_t","esp_idf_sys::bindings::esp_hmac_sha256_vector_t","esp_idf_sys::bindings::esp_sha256_prf_t","esp_idf_sys::bindings::esp_hmac_md5_t","esp_idf_sys::bindings::esp_hmac_md5_vector_t","esp_idf_sys::bindings::esp_hmac_sha1_t","esp_idf_sys::bindings::esp_hmac_sha1_vector_t","esp_idf_sys::bindings::esp_sha1_prf_t","esp_idf_sys::bindings::esp_sha1_vector_t","esp_idf_sys::bindings::esp_pbkdf2_sha1_t","esp_idf_sys::bindings::esp_rc4_skip_t","esp_idf_sys::bindings::esp_md5_vector_t","esp_idf_sys::bindings::esp_aes_encrypt_t","esp_idf_sys::bindings::esp_aes_encrypt_init_t","esp_idf_sys::bindings::esp_aes_encrypt_deinit_t","esp_idf_sys::bindings::esp_aes_decrypt_t","esp_idf_sys::bindings::esp_aes_decrypt_init_t","esp_idf_sys::bindings::esp_aes_decrypt_deinit_t","esp_idf_sys::bindings::esp_omac1_aes_128_t","esp_idf_sys::bindings::esp_ccmp_decrypt_t","esp_idf_sys::bindings::esp_ccmp_encrypt_t","esp_idf_sys::bindings::esp_aes_gmac_t","esp_idf_sys::bindings::esp_sha256_vector_t","esp_idf_sys::bindings::esp_crc32_le_t","esp_idf_sys::bindings::wifi_promiscuous_cb_t","esp_idf_sys::bindings::esp_vendor_ie_cb_t","esp_idf_sys::bindings::wifi_csi_cb_t","esp_idf_sys::bindings::esp_now_recv_cb_t","esp_idf_sys::bindings::esp_now_send_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_ref_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_free_cb_t","esp_idf_sys::bindings::wifi_rxcb_t","esp_idf_sys::bindings::wifi_mac_time_update_cb_t","esp_idf_sys::bindings::wifi_tx_done_cb_t","esp_idf_sys::bindings::neighbor_rep_request_cb","esp_idf_sys::bindings::transaction_cb_t","esp_idf_sys::bindings::gpio_isr_t","esp_idf_sys::bindings::dns_found_callback","esp_idf_sys::bindings::pbuf_free_custom_fn","esp_idf_sys::bindings::netif_init_fn","esp_idf_sys::bindings::netif_input_fn","esp_idf_sys::bindings::netif_output_fn","esp_idf_sys::bindings::netif_output_ip6_fn","esp_idf_sys::bindings::netif_linkoutput_fn","esp_idf_sys::bindings::netif_status_callback_fn","esp_idf_sys::bindings::netif_igmp_mac_filter_fn","esp_idf_sys::bindings::netif_mld_mac_filter_fn","esp_idf_sys::bindings::netif_ext_callback_fn","esp_idf_sys::bindings::init_fn_t","esp_idf_sys::bindings::input_fn_t","esp_idf_sys::bindings::sntp_sync_time_cb_t","esp_idf_sys::bindings::esp_sntp_time_cb_t","esp_idf_sys::bindings::ETSTask","esp_idf_sys::bindings::ets_idle_cb_t","esp_idf_sys::bindings::ETSTimerFunc","esp_idf_sys::bindings::ets_isr_t","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_sign_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_key_len_func","esp_idf_sys::bindings::mbedtls_x509_crt_ext_cb_t","esp_idf_sys::bindings::mbedtls_x509_crt_ca_cb_t","esp_idf_sys::bindings::mbedtls_ssl_send_t","esp_idf_sys::bindings::mbedtls_ssl_recv_t","esp_idf_sys::bindings::mbedtls_ssl_recv_timeout_t","esp_idf_sys::bindings::mbedtls_ssl_set_timer_t","esp_idf_sys::bindings::mbedtls_ssl_get_timer_t","esp_idf_sys::bindings::mbedtls_ssl_cache_get_t","esp_idf_sys::bindings::mbedtls_ssl_cache_set_t","esp_idf_sys::bindings::mbedtls_ssl_export_keys_t","esp_idf_sys::bindings::mbedtls_ssl_hs_cb_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_write_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_parse_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_write_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_check_t","esp_idf_sys::bindings::mbedtls_entropy_f_source_ptr","esp_idf_sys::bindings::http_event_handle_cb","esp_idf_sys::bindings::http_client_init_cb_t","esp_idf_sys::bindings::connect_func","esp_idf_sys::bindings::io_func","esp_idf_sys::bindings::io_read_func","esp_idf_sys::bindings::trans_func","esp_idf_sys::bindings::poll_func","esp_idf_sys::bindings::connect_async_func","esp_idf_sys::bindings::payload_transfer_func","esp_idf_sys::bindings::http_data_cb","esp_idf_sys::bindings::http_cb","esp_idf_sys::bindings::httpd_free_ctx_fn_t","esp_idf_sys::bindings::httpd_open_func_t","esp_idf_sys::bindings::httpd_close_func_t","esp_idf_sys::bindings::httpd_uri_match_func_t","esp_idf_sys::bindings::httpd_err_handler_func_t","esp_idf_sys::bindings::httpd_send_func_t","esp_idf_sys::bindings::httpd_recv_func_t","esp_idf_sys::bindings::httpd_pending_func_t","esp_idf_sys::bindings::httpd_work_fn_t","esp_idf_sys::bindings::nvs_flash_generate_keys_t","esp_idf_sys::bindings::nvs_flash_read_cfg_t","esp_idf_sys::bindings::protocomm_req_handler_t","esp_idf_sys::bindings::wifi_prov_cb_func_t","esp_idf_sys::bindings::adc_continuous_callback_t","esp_idf_sys::bindings::gptimer_alarm_cb_t","esp_idf_sys::bindings::i2c_master_callback_t","esp_idf_sys::bindings::i2c_slave_received_callback_t","esp_idf_sys::bindings::i2c_slave_stretch_callback_t","esp_idf_sys::bindings::i2s_isr_callback_t","esp_idf_sys::bindings::ledc_cb_t","esp_idf_sys::bindings::mcpwm_timer_event_cb_t","esp_idf_sys::bindings::mcpwm_brake_event_cb_t","esp_idf_sys::bindings::mcpwm_fault_event_cb_t","esp_idf_sys::bindings::mcpwm_compare_event_cb_t","esp_idf_sys::bindings::mcpwm_capture_event_cb_t","esp_idf_sys::bindings::rmt_tx_end_fn_t","esp_idf_sys::bindings::sample_to_rmt_t","esp_idf_sys::bindings::rmt_tx_done_callback_t","esp_idf_sys::bindings::rmt_rx_done_callback_t","esp_idf_sys::bindings::rmt_encode_simple_cb_t","esp_idf_sys::bindings::slave_transaction_cb_t","esp_idf_sys::bindings::timer_isr_t","esp_idf_sys::bindings::uart_select_notif_callback_t","esp_idf_sys::bindings::panic_info_dump_fn_t","esp_idf_sys::bindings::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; FromResidual&lt;Yeet&lt;()&gt;&gt; for Option&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_residual</a>(_: Yeet&lt;()&gt;) -&gt; Option&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a>Read more</a></div></details></div></details>","FromResidual<Yeet<()>>","esp_idf_sys::bindings::__compar_fn_t","esp_idf_sys::bindings::shutdown_handler_t","esp_idf_sys::bindings::vprintf_like_t","esp_idf_sys::bindings::intr_handler_t","esp_idf_sys::bindings::esp_cpu_intr_handler_t","esp_idf_sys::bindings::esp_deep_sleep_cb_t","esp_idf_sys::bindings::esp_deep_sleep_wake_stub_fn_t","esp_idf_sys::bindings::TaskFunction_t","esp_idf_sys::bindings::multi_heap_walker_cb_t","esp_idf_sys::bindings::esp_alloc_failed_hook_t","esp_idf_sys::bindings::heap_caps_walker_cb_t","esp_idf_sys::bindings::TaskHookFunction_t","esp_idf_sys::bindings::StreamBufferCallbackFunction_t","esp_idf_sys::bindings::TimerCallbackFunction_t","esp_idf_sys::bindings::PendedFunction_t","esp_idf_sys::bindings::TlsDeleteCallbackFunction_t","esp_idf_sys::bindings::task_wdt_msg_handler","esp_idf_sys::bindings::esp_freertos_idle_cb_t","esp_idf_sys::bindings::esp_freertos_tick_cb_t","esp_idf_sys::bindings::esp_console_cmd_func_t","esp_idf_sys::bindings::esp_console_cmd_func_with_context_t","esp_idf_sys::bindings::linenoiseCompletionCallback","esp_idf_sys::bindings::linenoiseHintsCallback","esp_idf_sys::bindings::linenoiseFreeHintsCallback","esp_idf_sys::bindings::_sig_func_ptr","esp_idf_sys::bindings::arg_resetfn","esp_idf_sys::bindings::arg_scanfn","esp_idf_sys::bindings::arg_checkfn","esp_idf_sys::bindings::arg_errorfn","esp_idf_sys::bindings::arg_dstr_freefn","esp_idf_sys::bindings::arg_cmdfn","esp_idf_sys::bindings::arg_comparefn","esp_idf_sys::bindings::esp_timer_cb_t","esp_idf_sys::bindings::esp_event_handler_t","esp_idf_sys::bindings::esp_netif_receive_t","esp_idf_sys::bindings::esp_netif_find_predicate_t","esp_idf_sys::bindings::esp_netif_callback_fn","esp_idf_sys::bindings::wifi_action_rx_cb_t","esp_idf_sys::bindings::esp_aes_128_encrypt_t","esp_idf_sys::bindings::esp_aes_128_decrypt_t","esp_idf_sys::bindings::esp_aes_wrap_t","esp_idf_sys::bindings::esp_aes_unwrap_t","esp_idf_sys::bindings::esp_hmac_sha256_vector_t","esp_idf_sys::bindings::esp_sha256_prf_t","esp_idf_sys::bindings::esp_hmac_md5_t","esp_idf_sys::bindings::esp_hmac_md5_vector_t","esp_idf_sys::bindings::esp_hmac_sha1_t","esp_idf_sys::bindings::esp_hmac_sha1_vector_t","esp_idf_sys::bindings::esp_sha1_prf_t","esp_idf_sys::bindings::esp_sha1_vector_t","esp_idf_sys::bindings::esp_pbkdf2_sha1_t","esp_idf_sys::bindings::esp_rc4_skip_t","esp_idf_sys::bindings::esp_md5_vector_t","esp_idf_sys::bindings::esp_aes_encrypt_t","esp_idf_sys::bindings::esp_aes_encrypt_init_t","esp_idf_sys::bindings::esp_aes_encrypt_deinit_t","esp_idf_sys::bindings::esp_aes_decrypt_t","esp_idf_sys::bindings::esp_aes_decrypt_init_t","esp_idf_sys::bindings::esp_aes_decrypt_deinit_t","esp_idf_sys::bindings::esp_omac1_aes_128_t","esp_idf_sys::bindings::esp_ccmp_decrypt_t","esp_idf_sys::bindings::esp_ccmp_encrypt_t","esp_idf_sys::bindings::esp_aes_gmac_t","esp_idf_sys::bindings::esp_sha256_vector_t","esp_idf_sys::bindings::esp_crc32_le_t","esp_idf_sys::bindings::wifi_promiscuous_cb_t","esp_idf_sys::bindings::esp_vendor_ie_cb_t","esp_idf_sys::bindings::wifi_csi_cb_t","esp_idf_sys::bindings::esp_now_recv_cb_t","esp_idf_sys::bindings::esp_now_send_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_ref_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_free_cb_t","esp_idf_sys::bindings::wifi_rxcb_t","esp_idf_sys::bindings::wifi_mac_time_update_cb_t","esp_idf_sys::bindings::wifi_tx_done_cb_t","esp_idf_sys::bindings::neighbor_rep_request_cb","esp_idf_sys::bindings::transaction_cb_t","esp_idf_sys::bindings::gpio_isr_t","esp_idf_sys::bindings::dns_found_callback","esp_idf_sys::bindings::pbuf_free_custom_fn","esp_idf_sys::bindings::netif_init_fn","esp_idf_sys::bindings::netif_input_fn","esp_idf_sys::bindings::netif_output_fn","esp_idf_sys::bindings::netif_output_ip6_fn","esp_idf_sys::bindings::netif_linkoutput_fn","esp_idf_sys::bindings::netif_status_callback_fn","esp_idf_sys::bindings::netif_igmp_mac_filter_fn","esp_idf_sys::bindings::netif_mld_mac_filter_fn","esp_idf_sys::bindings::netif_ext_callback_fn","esp_idf_sys::bindings::init_fn_t","esp_idf_sys::bindings::input_fn_t","esp_idf_sys::bindings::sntp_sync_time_cb_t","esp_idf_sys::bindings::esp_sntp_time_cb_t","esp_idf_sys::bindings::ETSTask","esp_idf_sys::bindings::ets_idle_cb_t","esp_idf_sys::bindings::ETSTimerFunc","esp_idf_sys::bindings::ets_isr_t","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_sign_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_key_len_func","esp_idf_sys::bindings::mbedtls_x509_crt_ext_cb_t","esp_idf_sys::bindings::mbedtls_x509_crt_ca_cb_t","esp_idf_sys::bindings::mbedtls_ssl_send_t","esp_idf_sys::bindings::mbedtls_ssl_recv_t","esp_idf_sys::bindings::mbedtls_ssl_recv_timeout_t","esp_idf_sys::bindings::mbedtls_ssl_set_timer_t","esp_idf_sys::bindings::mbedtls_ssl_get_timer_t","esp_idf_sys::bindings::mbedtls_ssl_cache_get_t","esp_idf_sys::bindings::mbedtls_ssl_cache_set_t","esp_idf_sys::bindings::mbedtls_ssl_export_keys_t","esp_idf_sys::bindings::mbedtls_ssl_hs_cb_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_write_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_parse_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_write_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_check_t","esp_idf_sys::bindings::mbedtls_entropy_f_source_ptr","esp_idf_sys::bindings::http_event_handle_cb","esp_idf_sys::bindings::http_client_init_cb_t","esp_idf_sys::bindings::connect_func","esp_idf_sys::bindings::io_func","esp_idf_sys::bindings::io_read_func","esp_idf_sys::bindings::trans_func","esp_idf_sys::bindings::poll_func","esp_idf_sys::bindings::connect_async_func","esp_idf_sys::bindings::payload_transfer_func","esp_idf_sys::bindings::http_data_cb","esp_idf_sys::bindings::http_cb","esp_idf_sys::bindings::httpd_free_ctx_fn_t","esp_idf_sys::bindings::httpd_open_func_t","esp_idf_sys::bindings::httpd_close_func_t","esp_idf_sys::bindings::httpd_uri_match_func_t","esp_idf_sys::bindings::httpd_err_handler_func_t","esp_idf_sys::bindings::httpd_send_func_t","esp_idf_sys::bindings::httpd_recv_func_t","esp_idf_sys::bindings::httpd_pending_func_t","esp_idf_sys::bindings::httpd_work_fn_t","esp_idf_sys::bindings::nvs_flash_generate_keys_t","esp_idf_sys::bindings::nvs_flash_read_cfg_t","esp_idf_sys::bindings::protocomm_req_handler_t","esp_idf_sys::bindings::wifi_prov_cb_func_t","esp_idf_sys::bindings::adc_continuous_callback_t","esp_idf_sys::bindings::gptimer_alarm_cb_t","esp_idf_sys::bindings::i2c_master_callback_t","esp_idf_sys::bindings::i2c_slave_received_callback_t","esp_idf_sys::bindings::i2c_slave_stretch_callback_t","esp_idf_sys::bindings::i2s_isr_callback_t","esp_idf_sys::bindings::ledc_cb_t","esp_idf_sys::bindings::mcpwm_timer_event_cb_t","esp_idf_sys::bindings::mcpwm_brake_event_cb_t","esp_idf_sys::bindings::mcpwm_fault_event_cb_t","esp_idf_sys::bindings::mcpwm_compare_event_cb_t","esp_idf_sys::bindings::mcpwm_capture_event_cb_t","esp_idf_sys::bindings::rmt_tx_end_fn_t","esp_idf_sys::bindings::sample_to_rmt_t","esp_idf_sys::bindings::rmt_tx_done_callback_t","esp_idf_sys::bindings::rmt_rx_done_callback_t","esp_idf_sys::bindings::rmt_encode_simple_cb_t","esp_idf_sys::bindings::slave_transaction_cb_t","esp_idf_sys::bindings::timer_isr_t","esp_idf_sys::bindings::uart_select_notif_callback_t","esp_idf_sys::bindings::panic_info_dump_fn_t","esp_idf_sys::bindings::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Hash for Option&lt;T&gt;<div class=\"where\">where\n    T: Hash,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: &amp;mut __H)<div class=\"where\">where\n    __H: Hasher,</div></h4></section></summary><div class='docblock'>Feeds this value into the given [<code>Hasher</code>]. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.3.0\">1.3.0</span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: &amp;mut H)<div class=\"where\">where\n    H: Hasher,\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given [<code>Hasher</code>]. <a>Read more</a></div></details></div></details>","Hash","esp_idf_sys::bindings::__compar_fn_t","esp_idf_sys::bindings::shutdown_handler_t","esp_idf_sys::bindings::vprintf_like_t","esp_idf_sys::bindings::intr_handler_t","esp_idf_sys::bindings::esp_cpu_intr_handler_t","esp_idf_sys::bindings::esp_deep_sleep_cb_t","esp_idf_sys::bindings::esp_deep_sleep_wake_stub_fn_t","esp_idf_sys::bindings::TaskFunction_t","esp_idf_sys::bindings::multi_heap_walker_cb_t","esp_idf_sys::bindings::esp_alloc_failed_hook_t","esp_idf_sys::bindings::heap_caps_walker_cb_t","esp_idf_sys::bindings::TaskHookFunction_t","esp_idf_sys::bindings::StreamBufferCallbackFunction_t","esp_idf_sys::bindings::TimerCallbackFunction_t","esp_idf_sys::bindings::PendedFunction_t","esp_idf_sys::bindings::TlsDeleteCallbackFunction_t","esp_idf_sys::bindings::task_wdt_msg_handler","esp_idf_sys::bindings::esp_freertos_idle_cb_t","esp_idf_sys::bindings::esp_freertos_tick_cb_t","esp_idf_sys::bindings::esp_console_cmd_func_t","esp_idf_sys::bindings::esp_console_cmd_func_with_context_t","esp_idf_sys::bindings::linenoiseCompletionCallback","esp_idf_sys::bindings::linenoiseHintsCallback","esp_idf_sys::bindings::linenoiseFreeHintsCallback","esp_idf_sys::bindings::_sig_func_ptr","esp_idf_sys::bindings::arg_resetfn","esp_idf_sys::bindings::arg_scanfn","esp_idf_sys::bindings::arg_checkfn","esp_idf_sys::bindings::arg_errorfn","esp_idf_sys::bindings::arg_dstr_freefn","esp_idf_sys::bindings::arg_cmdfn","esp_idf_sys::bindings::arg_comparefn","esp_idf_sys::bindings::esp_timer_cb_t","esp_idf_sys::bindings::esp_event_handler_t","esp_idf_sys::bindings::esp_netif_receive_t","esp_idf_sys::bindings::esp_netif_find_predicate_t","esp_idf_sys::bindings::esp_netif_callback_fn","esp_idf_sys::bindings::wifi_action_rx_cb_t","esp_idf_sys::bindings::esp_aes_128_encrypt_t","esp_idf_sys::bindings::esp_aes_128_decrypt_t","esp_idf_sys::bindings::esp_aes_wrap_t","esp_idf_sys::bindings::esp_aes_unwrap_t","esp_idf_sys::bindings::esp_hmac_sha256_vector_t","esp_idf_sys::bindings::esp_sha256_prf_t","esp_idf_sys::bindings::esp_hmac_md5_t","esp_idf_sys::bindings::esp_hmac_md5_vector_t","esp_idf_sys::bindings::esp_hmac_sha1_t","esp_idf_sys::bindings::esp_hmac_sha1_vector_t","esp_idf_sys::bindings::esp_sha1_prf_t","esp_idf_sys::bindings::esp_sha1_vector_t","esp_idf_sys::bindings::esp_pbkdf2_sha1_t","esp_idf_sys::bindings::esp_rc4_skip_t","esp_idf_sys::bindings::esp_md5_vector_t","esp_idf_sys::bindings::esp_aes_encrypt_t","esp_idf_sys::bindings::esp_aes_encrypt_init_t","esp_idf_sys::bindings::esp_aes_encrypt_deinit_t","esp_idf_sys::bindings::esp_aes_decrypt_t","esp_idf_sys::bindings::esp_aes_decrypt_init_t","esp_idf_sys::bindings::esp_aes_decrypt_deinit_t","esp_idf_sys::bindings::esp_omac1_aes_128_t","esp_idf_sys::bindings::esp_ccmp_decrypt_t","esp_idf_sys::bindings::esp_ccmp_encrypt_t","esp_idf_sys::bindings::esp_aes_gmac_t","esp_idf_sys::bindings::esp_sha256_vector_t","esp_idf_sys::bindings::esp_crc32_le_t","esp_idf_sys::bindings::wifi_promiscuous_cb_t","esp_idf_sys::bindings::esp_vendor_ie_cb_t","esp_idf_sys::bindings::wifi_csi_cb_t","esp_idf_sys::bindings::esp_now_recv_cb_t","esp_idf_sys::bindings::esp_now_send_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_ref_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_free_cb_t","esp_idf_sys::bindings::wifi_rxcb_t","esp_idf_sys::bindings::wifi_mac_time_update_cb_t","esp_idf_sys::bindings::wifi_tx_done_cb_t","esp_idf_sys::bindings::neighbor_rep_request_cb","esp_idf_sys::bindings::transaction_cb_t","esp_idf_sys::bindings::gpio_isr_t","esp_idf_sys::bindings::dns_found_callback","esp_idf_sys::bindings::pbuf_free_custom_fn","esp_idf_sys::bindings::netif_init_fn","esp_idf_sys::bindings::netif_input_fn","esp_idf_sys::bindings::netif_output_fn","esp_idf_sys::bindings::netif_output_ip6_fn","esp_idf_sys::bindings::netif_linkoutput_fn","esp_idf_sys::bindings::netif_status_callback_fn","esp_idf_sys::bindings::netif_igmp_mac_filter_fn","esp_idf_sys::bindings::netif_mld_mac_filter_fn","esp_idf_sys::bindings::netif_ext_callback_fn","esp_idf_sys::bindings::init_fn_t","esp_idf_sys::bindings::input_fn_t","esp_idf_sys::bindings::sntp_sync_time_cb_t","esp_idf_sys::bindings::esp_sntp_time_cb_t","esp_idf_sys::bindings::ETSTask","esp_idf_sys::bindings::ets_idle_cb_t","esp_idf_sys::bindings::ETSTimerFunc","esp_idf_sys::bindings::ets_isr_t","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_sign_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_key_len_func","esp_idf_sys::bindings::mbedtls_x509_crt_ext_cb_t","esp_idf_sys::bindings::mbedtls_x509_crt_ca_cb_t","esp_idf_sys::bindings::mbedtls_ssl_send_t","esp_idf_sys::bindings::mbedtls_ssl_recv_t","esp_idf_sys::bindings::mbedtls_ssl_recv_timeout_t","esp_idf_sys::bindings::mbedtls_ssl_set_timer_t","esp_idf_sys::bindings::mbedtls_ssl_get_timer_t","esp_idf_sys::bindings::mbedtls_ssl_cache_get_t","esp_idf_sys::bindings::mbedtls_ssl_cache_set_t","esp_idf_sys::bindings::mbedtls_ssl_export_keys_t","esp_idf_sys::bindings::mbedtls_ssl_hs_cb_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_write_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_parse_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_write_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_check_t","esp_idf_sys::bindings::mbedtls_entropy_f_source_ptr","esp_idf_sys::bindings::http_event_handle_cb","esp_idf_sys::bindings::http_client_init_cb_t","esp_idf_sys::bindings::connect_func","esp_idf_sys::bindings::io_func","esp_idf_sys::bindings::io_read_func","esp_idf_sys::bindings::trans_func","esp_idf_sys::bindings::poll_func","esp_idf_sys::bindings::connect_async_func","esp_idf_sys::bindings::payload_transfer_func","esp_idf_sys::bindings::http_data_cb","esp_idf_sys::bindings::http_cb","esp_idf_sys::bindings::httpd_free_ctx_fn_t","esp_idf_sys::bindings::httpd_open_func_t","esp_idf_sys::bindings::httpd_close_func_t","esp_idf_sys::bindings::httpd_uri_match_func_t","esp_idf_sys::bindings::httpd_err_handler_func_t","esp_idf_sys::bindings::httpd_send_func_t","esp_idf_sys::bindings::httpd_recv_func_t","esp_idf_sys::bindings::httpd_pending_func_t","esp_idf_sys::bindings::httpd_work_fn_t","esp_idf_sys::bindings::nvs_flash_generate_keys_t","esp_idf_sys::bindings::nvs_flash_read_cfg_t","esp_idf_sys::bindings::protocomm_req_handler_t","esp_idf_sys::bindings::wifi_prov_cb_func_t","esp_idf_sys::bindings::adc_continuous_callback_t","esp_idf_sys::bindings::gptimer_alarm_cb_t","esp_idf_sys::bindings::i2c_master_callback_t","esp_idf_sys::bindings::i2c_slave_received_callback_t","esp_idf_sys::bindings::i2c_slave_stretch_callback_t","esp_idf_sys::bindings::i2s_isr_callback_t","esp_idf_sys::bindings::ledc_cb_t","esp_idf_sys::bindings::mcpwm_timer_event_cb_t","esp_idf_sys::bindings::mcpwm_brake_event_cb_t","esp_idf_sys::bindings::mcpwm_fault_event_cb_t","esp_idf_sys::bindings::mcpwm_compare_event_cb_t","esp_idf_sys::bindings::mcpwm_capture_event_cb_t","esp_idf_sys::bindings::rmt_tx_end_fn_t","esp_idf_sys::bindings::sample_to_rmt_t","esp_idf_sys::bindings::rmt_tx_done_callback_t","esp_idf_sys::bindings::rmt_rx_done_callback_t","esp_idf_sys::bindings::rmt_encode_simple_cb_t","esp_idf_sys::bindings::slave_transaction_cb_t","esp_idf_sys::bindings::timer_isr_t","esp_idf_sys::bindings::uart_select_notif_callback_t","esp_idf_sys::bindings::panic_info_dump_fn_t","esp_idf_sys::bindings::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; IntoIterator for Option&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_iter</a>(self) -&gt; IntoIter&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">IntoIter</a> = IntoIter&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","esp_idf_sys::bindings::__compar_fn_t","esp_idf_sys::bindings::shutdown_handler_t","esp_idf_sys::bindings::vprintf_like_t","esp_idf_sys::bindings::intr_handler_t","esp_idf_sys::bindings::esp_cpu_intr_handler_t","esp_idf_sys::bindings::esp_deep_sleep_cb_t","esp_idf_sys::bindings::esp_deep_sleep_wake_stub_fn_t","esp_idf_sys::bindings::TaskFunction_t","esp_idf_sys::bindings::multi_heap_walker_cb_t","esp_idf_sys::bindings::esp_alloc_failed_hook_t","esp_idf_sys::bindings::heap_caps_walker_cb_t","esp_idf_sys::bindings::TaskHookFunction_t","esp_idf_sys::bindings::StreamBufferCallbackFunction_t","esp_idf_sys::bindings::TimerCallbackFunction_t","esp_idf_sys::bindings::PendedFunction_t","esp_idf_sys::bindings::TlsDeleteCallbackFunction_t","esp_idf_sys::bindings::task_wdt_msg_handler","esp_idf_sys::bindings::esp_freertos_idle_cb_t","esp_idf_sys::bindings::esp_freertos_tick_cb_t","esp_idf_sys::bindings::esp_console_cmd_func_t","esp_idf_sys::bindings::esp_console_cmd_func_with_context_t","esp_idf_sys::bindings::linenoiseCompletionCallback","esp_idf_sys::bindings::linenoiseHintsCallback","esp_idf_sys::bindings::linenoiseFreeHintsCallback","esp_idf_sys::bindings::_sig_func_ptr","esp_idf_sys::bindings::arg_resetfn","esp_idf_sys::bindings::arg_scanfn","esp_idf_sys::bindings::arg_checkfn","esp_idf_sys::bindings::arg_errorfn","esp_idf_sys::bindings::arg_dstr_freefn","esp_idf_sys::bindings::arg_cmdfn","esp_idf_sys::bindings::arg_comparefn","esp_idf_sys::bindings::esp_timer_cb_t","esp_idf_sys::bindings::esp_event_handler_t","esp_idf_sys::bindings::esp_netif_receive_t","esp_idf_sys::bindings::esp_netif_find_predicate_t","esp_idf_sys::bindings::esp_netif_callback_fn","esp_idf_sys::bindings::wifi_action_rx_cb_t","esp_idf_sys::bindings::esp_aes_128_encrypt_t","esp_idf_sys::bindings::esp_aes_128_decrypt_t","esp_idf_sys::bindings::esp_aes_wrap_t","esp_idf_sys::bindings::esp_aes_unwrap_t","esp_idf_sys::bindings::esp_hmac_sha256_vector_t","esp_idf_sys::bindings::esp_sha256_prf_t","esp_idf_sys::bindings::esp_hmac_md5_t","esp_idf_sys::bindings::esp_hmac_md5_vector_t","esp_idf_sys::bindings::esp_hmac_sha1_t","esp_idf_sys::bindings::esp_hmac_sha1_vector_t","esp_idf_sys::bindings::esp_sha1_prf_t","esp_idf_sys::bindings::esp_sha1_vector_t","esp_idf_sys::bindings::esp_pbkdf2_sha1_t","esp_idf_sys::bindings::esp_rc4_skip_t","esp_idf_sys::bindings::esp_md5_vector_t","esp_idf_sys::bindings::esp_aes_encrypt_t","esp_idf_sys::bindings::esp_aes_encrypt_init_t","esp_idf_sys::bindings::esp_aes_encrypt_deinit_t","esp_idf_sys::bindings::esp_aes_decrypt_t","esp_idf_sys::bindings::esp_aes_decrypt_init_t","esp_idf_sys::bindings::esp_aes_decrypt_deinit_t","esp_idf_sys::bindings::esp_omac1_aes_128_t","esp_idf_sys::bindings::esp_ccmp_decrypt_t","esp_idf_sys::bindings::esp_ccmp_encrypt_t","esp_idf_sys::bindings::esp_aes_gmac_t","esp_idf_sys::bindings::esp_sha256_vector_t","esp_idf_sys::bindings::esp_crc32_le_t","esp_idf_sys::bindings::wifi_promiscuous_cb_t","esp_idf_sys::bindings::esp_vendor_ie_cb_t","esp_idf_sys::bindings::wifi_csi_cb_t","esp_idf_sys::bindings::esp_now_recv_cb_t","esp_idf_sys::bindings::esp_now_send_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_ref_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_free_cb_t","esp_idf_sys::bindings::wifi_rxcb_t","esp_idf_sys::bindings::wifi_mac_time_update_cb_t","esp_idf_sys::bindings::wifi_tx_done_cb_t","esp_idf_sys::bindings::neighbor_rep_request_cb","esp_idf_sys::bindings::transaction_cb_t","esp_idf_sys::bindings::gpio_isr_t","esp_idf_sys::bindings::dns_found_callback","esp_idf_sys::bindings::pbuf_free_custom_fn","esp_idf_sys::bindings::netif_init_fn","esp_idf_sys::bindings::netif_input_fn","esp_idf_sys::bindings::netif_output_fn","esp_idf_sys::bindings::netif_output_ip6_fn","esp_idf_sys::bindings::netif_linkoutput_fn","esp_idf_sys::bindings::netif_status_callback_fn","esp_idf_sys::bindings::netif_igmp_mac_filter_fn","esp_idf_sys::bindings::netif_mld_mac_filter_fn","esp_idf_sys::bindings::netif_ext_callback_fn","esp_idf_sys::bindings::init_fn_t","esp_idf_sys::bindings::input_fn_t","esp_idf_sys::bindings::sntp_sync_time_cb_t","esp_idf_sys::bindings::esp_sntp_time_cb_t","esp_idf_sys::bindings::ETSTask","esp_idf_sys::bindings::ets_idle_cb_t","esp_idf_sys::bindings::ETSTimerFunc","esp_idf_sys::bindings::ets_isr_t","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_sign_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_key_len_func","esp_idf_sys::bindings::mbedtls_x509_crt_ext_cb_t","esp_idf_sys::bindings::mbedtls_x509_crt_ca_cb_t","esp_idf_sys::bindings::mbedtls_ssl_send_t","esp_idf_sys::bindings::mbedtls_ssl_recv_t","esp_idf_sys::bindings::mbedtls_ssl_recv_timeout_t","esp_idf_sys::bindings::mbedtls_ssl_set_timer_t","esp_idf_sys::bindings::mbedtls_ssl_get_timer_t","esp_idf_sys::bindings::mbedtls_ssl_cache_get_t","esp_idf_sys::bindings::mbedtls_ssl_cache_set_t","esp_idf_sys::bindings::mbedtls_ssl_export_keys_t","esp_idf_sys::bindings::mbedtls_ssl_hs_cb_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_write_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_parse_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_write_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_check_t","esp_idf_sys::bindings::mbedtls_entropy_f_source_ptr","esp_idf_sys::bindings::http_event_handle_cb","esp_idf_sys::bindings::http_client_init_cb_t","esp_idf_sys::bindings::connect_func","esp_idf_sys::bindings::io_func","esp_idf_sys::bindings::io_read_func","esp_idf_sys::bindings::trans_func","esp_idf_sys::bindings::poll_func","esp_idf_sys::bindings::connect_async_func","esp_idf_sys::bindings::payload_transfer_func","esp_idf_sys::bindings::http_data_cb","esp_idf_sys::bindings::http_cb","esp_idf_sys::bindings::httpd_free_ctx_fn_t","esp_idf_sys::bindings::httpd_open_func_t","esp_idf_sys::bindings::httpd_close_func_t","esp_idf_sys::bindings::httpd_uri_match_func_t","esp_idf_sys::bindings::httpd_err_handler_func_t","esp_idf_sys::bindings::httpd_send_func_t","esp_idf_sys::bindings::httpd_recv_func_t","esp_idf_sys::bindings::httpd_pending_func_t","esp_idf_sys::bindings::httpd_work_fn_t","esp_idf_sys::bindings::nvs_flash_generate_keys_t","esp_idf_sys::bindings::nvs_flash_read_cfg_t","esp_idf_sys::bindings::protocomm_req_handler_t","esp_idf_sys::bindings::wifi_prov_cb_func_t","esp_idf_sys::bindings::adc_continuous_callback_t","esp_idf_sys::bindings::gptimer_alarm_cb_t","esp_idf_sys::bindings::i2c_master_callback_t","esp_idf_sys::bindings::i2c_slave_received_callback_t","esp_idf_sys::bindings::i2c_slave_stretch_callback_t","esp_idf_sys::bindings::i2s_isr_callback_t","esp_idf_sys::bindings::ledc_cb_t","esp_idf_sys::bindings::mcpwm_timer_event_cb_t","esp_idf_sys::bindings::mcpwm_brake_event_cb_t","esp_idf_sys::bindings::mcpwm_fault_event_cb_t","esp_idf_sys::bindings::mcpwm_compare_event_cb_t","esp_idf_sys::bindings::mcpwm_capture_event_cb_t","esp_idf_sys::bindings::rmt_tx_end_fn_t","esp_idf_sys::bindings::sample_to_rmt_t","esp_idf_sys::bindings::rmt_tx_done_callback_t","esp_idf_sys::bindings::rmt_rx_done_callback_t","esp_idf_sys::bindings::rmt_encode_simple_cb_t","esp_idf_sys::bindings::slave_transaction_cb_t","esp_idf_sys::bindings::timer_isr_t","esp_idf_sys::bindings::uart_select_notif_callback_t","esp_idf_sys::bindings::panic_info_dump_fn_t","esp_idf_sys::bindings::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Option&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">is_some</a>(&amp;self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a [<code>Some</code>] value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.70.0\">1.70.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">is_some_and</a>(self, f: impl FnOnce(T) -&gt; bool) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a [<code>Some</code>] and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">is_none</a>(&amp;self) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a [<code>None</code>] value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none_or\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.82.0\">1.82.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">is_none_or</a>(self, f: impl FnOnce(T) -&gt; bool) -&gt; bool</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a [<code>None</code>] or the value inside of it matches a predicate.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none_or(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none_or(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none_or(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">as_ref</a>(&amp;self) -&gt; Option&lt;&amp;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;[usize]&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0, const since 1.83.0\">1.0.0 (const: 1.83.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">as_mut</a>(&amp;mut self) -&gt; Option&lt;&amp;mut T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.33.0, const since 1.84.0\">1.33.0 (const: 1.84.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">as_pin_ref</a>(self: Pin&lt;&amp;Option&lt;T&gt;&gt;) -&gt; Option&lt;Pin&lt;&amp;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>[Pin]&lt;<a href=\"reference\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;[Pin]&lt;<a href=\"reference\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.33.0, const since 1.84.0\">1.33.0 (const: 1.84.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">as_pin_mut</a>(self: Pin&lt;&amp;mut Option&lt;T&gt;&gt;) -&gt; Option&lt;Pin&lt;&amp;mut T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>[Pin]&lt;<a href=\"reference\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;[Pin]&lt;<a href=\"reference\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.75.0, const since 1.84.0\">1.75.0 (const: 1.84.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;[T]</h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.75.0, const since 1.84.0\">1.75.0 (const: 1.84.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut [T]</h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0, const since 1.83.0\">1.0.0 (const: 1.83.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">expect</a>(self, msg: &amp;str) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained [<code>Some</code>] value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is a [<code>None</code>] with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a class=\"doc-anchor\" href=\"#recommended-message-style\">§</a>Recommended Message Style</h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0, const since 1.83.0\">1.0.0 (const: 1.83.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained [<code>Some</code>] value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nPanics are meant for unrecoverable errors, and\n<a href=\"https://doc.rust-lang.org/book/ch09-01-unrecoverable-errors-with-panic.html\">may abort the entire program</a>.</p>\n<p>Instead, prefer to use pattern matching and handle the [<code>None</code>]\ncase explicitly, or call <a href=\"Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"Option::unwrap_or_default\"><code>unwrap_or_default</code></a>. In functions returning <code>Option</code>, you can use\n<a href=\"https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html#where-the--operator-can-be-used\">the <code>?</code> (try) operator</a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the self value equals [<code>None</code>].</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained [<code>Some</code>] value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: FnOnce() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained [<code>Some</code>] value or computes it from a closure.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: Default,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained [<code>Some</code>] value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if [<code>Some</code>], returns the contained\nvalue, otherwise if [<code>None</code>], returns the <a href=\"Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.58.0, const since 1.83.0\">1.58.0 (const: 1.83.0)</span><h4 class=\"code-header\">pub const unsafe fn <a class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained [<code>Some</code>] value, consuming the <code>self</code> value,\nwithout checking that the value is not [<code>None</code>].</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method on [<code>None</code>] is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; Option&lt;U&gt;<div class=\"where\">where\n    F: FnOnce(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;[usize]&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.76.0\">1.76.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; Option&lt;T&gt;<div class=\"where\">where\n    F: FnOnce(&amp;T),</div></h4></section></summary><div class=\"docblock\"><p>Calls a function with a reference to the contained value if [<code>Some</code>].</p>\n<p>Returns the original option.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>list = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"comment\">// prints \"got: 2\"\n</span><span class=\"kw\">let </span>x = list\n    .get(<span class=\"number\">1</span>)\n    .inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>))\n    .expect(<span class=\"string\">\"list should be long enough\"</span>);\n\n<span class=\"comment\">// prints nothing\n</span>list.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: FnOnce(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: FnOnce() -&gt; U,\n    F: FnOnce(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a class=\"doc-anchor\" href=\"#basic-examples\">§</a>Basic examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n<h5 id=\"handling-a-result-based-fallback\"><a class=\"doc-anchor\" href=\"#handling-a-result-based-fallback\">§</a>Handling a Result-based fallback</h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with [<code>Result&lt;T, E&gt;</code>] is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; Result&lt;T, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a [<code>Result&lt;T, E&gt;</code>], mapping <a href=\"Some\"><code>Some(v)</code></a> to\n<a href=\"Ok\"><code>Ok(v)</code></a> and [<code>None</code>] to <a href=\"Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; Result&lt;T, E&gt;<div class=\"where\">where\n    F: FnOnce() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a [<code>Result&lt;T, E&gt;</code>], mapping <a href=\"Some\"><code>Some(v)</code></a> to\n<a href=\"Ok\"><code>Ok(v)</code></a> and [<code>None</code>] to <a href=\"Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.40.0\">1.40.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">as_deref</a>(&amp;self) -&gt; Option&lt;&amp;&lt;T as Deref&gt;::Target&gt;<div class=\"where\">where\n    T: Deref,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via [<code>Deref</code>].</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.40.0\">1.40.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; Option&lt;&amp;mut &lt;T as Deref&gt;::Target&gt;<div class=\"where\">where\n    T: DerefMut,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s [<code>Deref::Target</code>] type.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">iter</a>(&amp;self) -&gt; Iter&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; IterMut&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">and</a>&lt;U&gt;(self, optb: Option&lt;U&gt;) -&gt; Option&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Returns [<code>None</code>] if the option is [<code>None</code>], otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; Option&lt;U&gt;<div class=\"where\">where\n    F: FnOnce(T) -&gt; Option&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns [<code>None</code>] if the option is [<code>None</code>], otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Often used to chain fallible operations that may return [<code>None</code>].</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.27.0\">1.27.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; Option&lt;T&gt;<div class=\"where\">where\n    P: FnOnce(&amp;T) -&gt; bool,</div></h4></section></summary><div class=\"docblock\"><p>Returns [<code>None</code>] if the option is [<code>None</code>], otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li>[<code>None</code>] if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to [<code>Iterator::filter()</code>]. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">or</a>(self, optb: Option&lt;T&gt;) -&gt; Option&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; Option&lt;T&gt;<div class=\"where\">where\n    F: FnOnce() -&gt; Option&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.37.0\">1.37.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">xor</a>(self, optb: Option&lt;T&gt;) -&gt; Option&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns [<code>Some</code>] if exactly one of <code>self</code>, <code>optb</code> is [<code>Some</code>], otherwise returns [<code>None</code>].</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0\">1.53.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; &amp;mut T</h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also [<code>Option::get_or_insert</code>], which doesn’t update the value if\nthe option already contains [<code>Some</code>].</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.20.0\">1.20.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; &amp;mut T</h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is [<code>None</code>], then\nreturns a mutable reference to the contained value.</p>\n<p>See also [<code>Option::insert</code>], which updates the value even if\nthe option already contains [<code>Some</code>].</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_default\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.83.0\">1.83.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; &amp;mut T<div class=\"where\">where\n    T: Default,</div></h4></section></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is [<code>None</code>], then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.20.0\">1.20.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; &amp;mut T<div class=\"where\">where\n    F: FnOnce() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is [<code>None</code>],\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0, const since 1.83.0\">1.0.0 (const: 1.83.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">take</a>(&amp;mut self) -&gt; Option&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a [<code>None</code>] in its place.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_if\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.80.0\">1.80.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; Option&lt;T&gt;<div class=\"where\">where\n    P: FnOnce(&amp;mut T) -&gt; bool,</div></h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to [<code>Option::take</code>] but conditional.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.31.0, const since 1.83.0\">1.31.0 (const: 1.83.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; Option&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a [<code>Some</code>] in its place without deinitializing either one.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.46.0\">1.46.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">zip</a>&lt;U&gt;(self, other: Option&lt;U&gt;) -&gt; Option&lt;(T, U)&gt;</h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_with\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: Option&lt;U&gt;, f: F) -&gt; Option&lt;R&gt;<div class=\"where\">where\n    F: FnOnce(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"esp_idf_sys::bindings::__compar_fn_t","esp_idf_sys::bindings::shutdown_handler_t","esp_idf_sys::bindings::vprintf_like_t","esp_idf_sys::bindings::intr_handler_t","esp_idf_sys::bindings::esp_cpu_intr_handler_t","esp_idf_sys::bindings::esp_deep_sleep_cb_t","esp_idf_sys::bindings::esp_deep_sleep_wake_stub_fn_t","esp_idf_sys::bindings::TaskFunction_t","esp_idf_sys::bindings::multi_heap_walker_cb_t","esp_idf_sys::bindings::esp_alloc_failed_hook_t","esp_idf_sys::bindings::heap_caps_walker_cb_t","esp_idf_sys::bindings::TaskHookFunction_t","esp_idf_sys::bindings::StreamBufferCallbackFunction_t","esp_idf_sys::bindings::TimerCallbackFunction_t","esp_idf_sys::bindings::PendedFunction_t","esp_idf_sys::bindings::TlsDeleteCallbackFunction_t","esp_idf_sys::bindings::task_wdt_msg_handler","esp_idf_sys::bindings::esp_freertos_idle_cb_t","esp_idf_sys::bindings::esp_freertos_tick_cb_t","esp_idf_sys::bindings::esp_console_cmd_func_t","esp_idf_sys::bindings::esp_console_cmd_func_with_context_t","esp_idf_sys::bindings::linenoiseCompletionCallback","esp_idf_sys::bindings::linenoiseHintsCallback","esp_idf_sys::bindings::linenoiseFreeHintsCallback","esp_idf_sys::bindings::_sig_func_ptr","esp_idf_sys::bindings::arg_resetfn","esp_idf_sys::bindings::arg_scanfn","esp_idf_sys::bindings::arg_checkfn","esp_idf_sys::bindings::arg_errorfn","esp_idf_sys::bindings::arg_dstr_freefn","esp_idf_sys::bindings::arg_cmdfn","esp_idf_sys::bindings::arg_comparefn","esp_idf_sys::bindings::esp_timer_cb_t","esp_idf_sys::bindings::esp_event_handler_t","esp_idf_sys::bindings::esp_netif_receive_t","esp_idf_sys::bindings::esp_netif_find_predicate_t","esp_idf_sys::bindings::esp_netif_callback_fn","esp_idf_sys::bindings::wifi_action_rx_cb_t","esp_idf_sys::bindings::esp_aes_128_encrypt_t","esp_idf_sys::bindings::esp_aes_128_decrypt_t","esp_idf_sys::bindings::esp_aes_wrap_t","esp_idf_sys::bindings::esp_aes_unwrap_t","esp_idf_sys::bindings::esp_hmac_sha256_vector_t","esp_idf_sys::bindings::esp_sha256_prf_t","esp_idf_sys::bindings::esp_hmac_md5_t","esp_idf_sys::bindings::esp_hmac_md5_vector_t","esp_idf_sys::bindings::esp_hmac_sha1_t","esp_idf_sys::bindings::esp_hmac_sha1_vector_t","esp_idf_sys::bindings::esp_sha1_prf_t","esp_idf_sys::bindings::esp_sha1_vector_t","esp_idf_sys::bindings::esp_pbkdf2_sha1_t","esp_idf_sys::bindings::esp_rc4_skip_t","esp_idf_sys::bindings::esp_md5_vector_t","esp_idf_sys::bindings::esp_aes_encrypt_t","esp_idf_sys::bindings::esp_aes_encrypt_init_t","esp_idf_sys::bindings::esp_aes_encrypt_deinit_t","esp_idf_sys::bindings::esp_aes_decrypt_t","esp_idf_sys::bindings::esp_aes_decrypt_init_t","esp_idf_sys::bindings::esp_aes_decrypt_deinit_t","esp_idf_sys::bindings::esp_omac1_aes_128_t","esp_idf_sys::bindings::esp_ccmp_decrypt_t","esp_idf_sys::bindings::esp_ccmp_encrypt_t","esp_idf_sys::bindings::esp_aes_gmac_t","esp_idf_sys::bindings::esp_sha256_vector_t","esp_idf_sys::bindings::esp_crc32_le_t","esp_idf_sys::bindings::wifi_promiscuous_cb_t","esp_idf_sys::bindings::esp_vendor_ie_cb_t","esp_idf_sys::bindings::wifi_csi_cb_t","esp_idf_sys::bindings::esp_now_recv_cb_t","esp_idf_sys::bindings::esp_now_send_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_ref_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_free_cb_t","esp_idf_sys::bindings::wifi_rxcb_t","esp_idf_sys::bindings::wifi_mac_time_update_cb_t","esp_idf_sys::bindings::wifi_tx_done_cb_t","esp_idf_sys::bindings::neighbor_rep_request_cb","esp_idf_sys::bindings::transaction_cb_t","esp_idf_sys::bindings::gpio_isr_t","esp_idf_sys::bindings::dns_found_callback","esp_idf_sys::bindings::pbuf_free_custom_fn","esp_idf_sys::bindings::netif_init_fn","esp_idf_sys::bindings::netif_input_fn","esp_idf_sys::bindings::netif_output_fn","esp_idf_sys::bindings::netif_output_ip6_fn","esp_idf_sys::bindings::netif_linkoutput_fn","esp_idf_sys::bindings::netif_status_callback_fn","esp_idf_sys::bindings::netif_igmp_mac_filter_fn","esp_idf_sys::bindings::netif_mld_mac_filter_fn","esp_idf_sys::bindings::netif_ext_callback_fn","esp_idf_sys::bindings::init_fn_t","esp_idf_sys::bindings::input_fn_t","esp_idf_sys::bindings::sntp_sync_time_cb_t","esp_idf_sys::bindings::esp_sntp_time_cb_t","esp_idf_sys::bindings::ETSTask","esp_idf_sys::bindings::ets_idle_cb_t","esp_idf_sys::bindings::ETSTimerFunc","esp_idf_sys::bindings::ets_isr_t","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_sign_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_key_len_func","esp_idf_sys::bindings::mbedtls_x509_crt_ext_cb_t","esp_idf_sys::bindings::mbedtls_x509_crt_ca_cb_t","esp_idf_sys::bindings::mbedtls_ssl_send_t","esp_idf_sys::bindings::mbedtls_ssl_recv_t","esp_idf_sys::bindings::mbedtls_ssl_recv_timeout_t","esp_idf_sys::bindings::mbedtls_ssl_set_timer_t","esp_idf_sys::bindings::mbedtls_ssl_get_timer_t","esp_idf_sys::bindings::mbedtls_ssl_cache_get_t","esp_idf_sys::bindings::mbedtls_ssl_cache_set_t","esp_idf_sys::bindings::mbedtls_ssl_export_keys_t","esp_idf_sys::bindings::mbedtls_ssl_hs_cb_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_write_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_parse_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_write_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_check_t","esp_idf_sys::bindings::mbedtls_entropy_f_source_ptr","esp_idf_sys::bindings::http_event_handle_cb","esp_idf_sys::bindings::http_client_init_cb_t","esp_idf_sys::bindings::connect_func","esp_idf_sys::bindings::io_func","esp_idf_sys::bindings::io_read_func","esp_idf_sys::bindings::trans_func","esp_idf_sys::bindings::poll_func","esp_idf_sys::bindings::connect_async_func","esp_idf_sys::bindings::payload_transfer_func","esp_idf_sys::bindings::http_data_cb","esp_idf_sys::bindings::http_cb","esp_idf_sys::bindings::httpd_free_ctx_fn_t","esp_idf_sys::bindings::httpd_open_func_t","esp_idf_sys::bindings::httpd_close_func_t","esp_idf_sys::bindings::httpd_uri_match_func_t","esp_idf_sys::bindings::httpd_err_handler_func_t","esp_idf_sys::bindings::httpd_send_func_t","esp_idf_sys::bindings::httpd_recv_func_t","esp_idf_sys::bindings::httpd_pending_func_t","esp_idf_sys::bindings::httpd_work_fn_t","esp_idf_sys::bindings::nvs_flash_generate_keys_t","esp_idf_sys::bindings::nvs_flash_read_cfg_t","esp_idf_sys::bindings::protocomm_req_handler_t","esp_idf_sys::bindings::wifi_prov_cb_func_t","esp_idf_sys::bindings::adc_continuous_callback_t","esp_idf_sys::bindings::gptimer_alarm_cb_t","esp_idf_sys::bindings::i2c_master_callback_t","esp_idf_sys::bindings::i2c_slave_received_callback_t","esp_idf_sys::bindings::i2c_slave_stretch_callback_t","esp_idf_sys::bindings::i2s_isr_callback_t","esp_idf_sys::bindings::ledc_cb_t","esp_idf_sys::bindings::mcpwm_timer_event_cb_t","esp_idf_sys::bindings::mcpwm_brake_event_cb_t","esp_idf_sys::bindings::mcpwm_fault_event_cb_t","esp_idf_sys::bindings::mcpwm_compare_event_cb_t","esp_idf_sys::bindings::mcpwm_capture_event_cb_t","esp_idf_sys::bindings::rmt_tx_end_fn_t","esp_idf_sys::bindings::sample_to_rmt_t","esp_idf_sys::bindings::rmt_tx_done_callback_t","esp_idf_sys::bindings::rmt_rx_done_callback_t","esp_idf_sys::bindings::rmt_encode_simple_cb_t","esp_idf_sys::bindings::slave_transaction_cb_t","esp_idf_sys::bindings::timer_isr_t","esp_idf_sys::bindings::uart_select_notif_callback_t","esp_idf_sys::bindings::panic_info_dump_fn_t","esp_idf_sys::bindings::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Ord for Option&lt;T&gt;<div class=\"where\">where\n    T: Ord,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">cmp</a>(&amp;self, other: &amp;Option&lt;T&gt;) -&gt; Ordering</h4></section></summary><div class='docblock'>This method returns an [<code>Ordering</code>] between <code>self</code> and <code>other</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.21.0\">1.21.0</span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.21.0\">1.21.0</span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.50.0\">1.50.0</span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a>Read more</a></div></details></div></details>","Ord","esp_idf_sys::bindings::__compar_fn_t","esp_idf_sys::bindings::shutdown_handler_t","esp_idf_sys::bindings::vprintf_like_t","esp_idf_sys::bindings::intr_handler_t","esp_idf_sys::bindings::esp_cpu_intr_handler_t","esp_idf_sys::bindings::esp_deep_sleep_cb_t","esp_idf_sys::bindings::esp_deep_sleep_wake_stub_fn_t","esp_idf_sys::bindings::TaskFunction_t","esp_idf_sys::bindings::multi_heap_walker_cb_t","esp_idf_sys::bindings::esp_alloc_failed_hook_t","esp_idf_sys::bindings::heap_caps_walker_cb_t","esp_idf_sys::bindings::TaskHookFunction_t","esp_idf_sys::bindings::StreamBufferCallbackFunction_t","esp_idf_sys::bindings::TimerCallbackFunction_t","esp_idf_sys::bindings::PendedFunction_t","esp_idf_sys::bindings::TlsDeleteCallbackFunction_t","esp_idf_sys::bindings::task_wdt_msg_handler","esp_idf_sys::bindings::esp_freertos_idle_cb_t","esp_idf_sys::bindings::esp_freertos_tick_cb_t","esp_idf_sys::bindings::esp_console_cmd_func_t","esp_idf_sys::bindings::esp_console_cmd_func_with_context_t","esp_idf_sys::bindings::linenoiseCompletionCallback","esp_idf_sys::bindings::linenoiseHintsCallback","esp_idf_sys::bindings::linenoiseFreeHintsCallback","esp_idf_sys::bindings::_sig_func_ptr","esp_idf_sys::bindings::arg_resetfn","esp_idf_sys::bindings::arg_scanfn","esp_idf_sys::bindings::arg_checkfn","esp_idf_sys::bindings::arg_errorfn","esp_idf_sys::bindings::arg_dstr_freefn","esp_idf_sys::bindings::arg_cmdfn","esp_idf_sys::bindings::arg_comparefn","esp_idf_sys::bindings::esp_timer_cb_t","esp_idf_sys::bindings::esp_event_handler_t","esp_idf_sys::bindings::esp_netif_receive_t","esp_idf_sys::bindings::esp_netif_find_predicate_t","esp_idf_sys::bindings::esp_netif_callback_fn","esp_idf_sys::bindings::wifi_action_rx_cb_t","esp_idf_sys::bindings::esp_aes_128_encrypt_t","esp_idf_sys::bindings::esp_aes_128_decrypt_t","esp_idf_sys::bindings::esp_aes_wrap_t","esp_idf_sys::bindings::esp_aes_unwrap_t","esp_idf_sys::bindings::esp_hmac_sha256_vector_t","esp_idf_sys::bindings::esp_sha256_prf_t","esp_idf_sys::bindings::esp_hmac_md5_t","esp_idf_sys::bindings::esp_hmac_md5_vector_t","esp_idf_sys::bindings::esp_hmac_sha1_t","esp_idf_sys::bindings::esp_hmac_sha1_vector_t","esp_idf_sys::bindings::esp_sha1_prf_t","esp_idf_sys::bindings::esp_sha1_vector_t","esp_idf_sys::bindings::esp_pbkdf2_sha1_t","esp_idf_sys::bindings::esp_rc4_skip_t","esp_idf_sys::bindings::esp_md5_vector_t","esp_idf_sys::bindings::esp_aes_encrypt_t","esp_idf_sys::bindings::esp_aes_encrypt_init_t","esp_idf_sys::bindings::esp_aes_encrypt_deinit_t","esp_idf_sys::bindings::esp_aes_decrypt_t","esp_idf_sys::bindings::esp_aes_decrypt_init_t","esp_idf_sys::bindings::esp_aes_decrypt_deinit_t","esp_idf_sys::bindings::esp_omac1_aes_128_t","esp_idf_sys::bindings::esp_ccmp_decrypt_t","esp_idf_sys::bindings::esp_ccmp_encrypt_t","esp_idf_sys::bindings::esp_aes_gmac_t","esp_idf_sys::bindings::esp_sha256_vector_t","esp_idf_sys::bindings::esp_crc32_le_t","esp_idf_sys::bindings::wifi_promiscuous_cb_t","esp_idf_sys::bindings::esp_vendor_ie_cb_t","esp_idf_sys::bindings::wifi_csi_cb_t","esp_idf_sys::bindings::esp_now_recv_cb_t","esp_idf_sys::bindings::esp_now_send_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_ref_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_free_cb_t","esp_idf_sys::bindings::wifi_rxcb_t","esp_idf_sys::bindings::wifi_mac_time_update_cb_t","esp_idf_sys::bindings::wifi_tx_done_cb_t","esp_idf_sys::bindings::neighbor_rep_request_cb","esp_idf_sys::bindings::transaction_cb_t","esp_idf_sys::bindings::gpio_isr_t","esp_idf_sys::bindings::dns_found_callback","esp_idf_sys::bindings::pbuf_free_custom_fn","esp_idf_sys::bindings::netif_init_fn","esp_idf_sys::bindings::netif_input_fn","esp_idf_sys::bindings::netif_output_fn","esp_idf_sys::bindings::netif_output_ip6_fn","esp_idf_sys::bindings::netif_linkoutput_fn","esp_idf_sys::bindings::netif_status_callback_fn","esp_idf_sys::bindings::netif_igmp_mac_filter_fn","esp_idf_sys::bindings::netif_mld_mac_filter_fn","esp_idf_sys::bindings::netif_ext_callback_fn","esp_idf_sys::bindings::init_fn_t","esp_idf_sys::bindings::input_fn_t","esp_idf_sys::bindings::sntp_sync_time_cb_t","esp_idf_sys::bindings::esp_sntp_time_cb_t","esp_idf_sys::bindings::ETSTask","esp_idf_sys::bindings::ets_idle_cb_t","esp_idf_sys::bindings::ETSTimerFunc","esp_idf_sys::bindings::ets_isr_t","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_sign_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_key_len_func","esp_idf_sys::bindings::mbedtls_x509_crt_ext_cb_t","esp_idf_sys::bindings::mbedtls_x509_crt_ca_cb_t","esp_idf_sys::bindings::mbedtls_ssl_send_t","esp_idf_sys::bindings::mbedtls_ssl_recv_t","esp_idf_sys::bindings::mbedtls_ssl_recv_timeout_t","esp_idf_sys::bindings::mbedtls_ssl_set_timer_t","esp_idf_sys::bindings::mbedtls_ssl_get_timer_t","esp_idf_sys::bindings::mbedtls_ssl_cache_get_t","esp_idf_sys::bindings::mbedtls_ssl_cache_set_t","esp_idf_sys::bindings::mbedtls_ssl_export_keys_t","esp_idf_sys::bindings::mbedtls_ssl_hs_cb_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_write_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_parse_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_write_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_check_t","esp_idf_sys::bindings::mbedtls_entropy_f_source_ptr","esp_idf_sys::bindings::http_event_handle_cb","esp_idf_sys::bindings::http_client_init_cb_t","esp_idf_sys::bindings::connect_func","esp_idf_sys::bindings::io_func","esp_idf_sys::bindings::io_read_func","esp_idf_sys::bindings::trans_func","esp_idf_sys::bindings::poll_func","esp_idf_sys::bindings::connect_async_func","esp_idf_sys::bindings::payload_transfer_func","esp_idf_sys::bindings::http_data_cb","esp_idf_sys::bindings::http_cb","esp_idf_sys::bindings::httpd_free_ctx_fn_t","esp_idf_sys::bindings::httpd_open_func_t","esp_idf_sys::bindings::httpd_close_func_t","esp_idf_sys::bindings::httpd_uri_match_func_t","esp_idf_sys::bindings::httpd_err_handler_func_t","esp_idf_sys::bindings::httpd_send_func_t","esp_idf_sys::bindings::httpd_recv_func_t","esp_idf_sys::bindings::httpd_pending_func_t","esp_idf_sys::bindings::httpd_work_fn_t","esp_idf_sys::bindings::nvs_flash_generate_keys_t","esp_idf_sys::bindings::nvs_flash_read_cfg_t","esp_idf_sys::bindings::protocomm_req_handler_t","esp_idf_sys::bindings::wifi_prov_cb_func_t","esp_idf_sys::bindings::adc_continuous_callback_t","esp_idf_sys::bindings::gptimer_alarm_cb_t","esp_idf_sys::bindings::i2c_master_callback_t","esp_idf_sys::bindings::i2c_slave_received_callback_t","esp_idf_sys::bindings::i2c_slave_stretch_callback_t","esp_idf_sys::bindings::i2s_isr_callback_t","esp_idf_sys::bindings::ledc_cb_t","esp_idf_sys::bindings::mcpwm_timer_event_cb_t","esp_idf_sys::bindings::mcpwm_brake_event_cb_t","esp_idf_sys::bindings::mcpwm_fault_event_cb_t","esp_idf_sys::bindings::mcpwm_compare_event_cb_t","esp_idf_sys::bindings::mcpwm_capture_event_cb_t","esp_idf_sys::bindings::rmt_tx_end_fn_t","esp_idf_sys::bindings::sample_to_rmt_t","esp_idf_sys::bindings::rmt_tx_done_callback_t","esp_idf_sys::bindings::rmt_rx_done_callback_t","esp_idf_sys::bindings::rmt_encode_simple_cb_t","esp_idf_sys::bindings::slave_transaction_cb_t","esp_idf_sys::bindings::timer_isr_t","esp_idf_sys::bindings::uart_select_notif_callback_t","esp_idf_sys::bindings::panic_info_dump_fn_t","esp_idf_sys::bindings::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; PartialEq for Option&lt;T&gt;<div class=\"where\">where\n    T: PartialEq,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">eq</a>(&amp;self, other: &amp;Option&lt;T&gt;) -&gt; bool</h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ne</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","esp_idf_sys::bindings::__compar_fn_t","esp_idf_sys::bindings::shutdown_handler_t","esp_idf_sys::bindings::vprintf_like_t","esp_idf_sys::bindings::intr_handler_t","esp_idf_sys::bindings::esp_cpu_intr_handler_t","esp_idf_sys::bindings::esp_deep_sleep_cb_t","esp_idf_sys::bindings::esp_deep_sleep_wake_stub_fn_t","esp_idf_sys::bindings::TaskFunction_t","esp_idf_sys::bindings::multi_heap_walker_cb_t","esp_idf_sys::bindings::esp_alloc_failed_hook_t","esp_idf_sys::bindings::heap_caps_walker_cb_t","esp_idf_sys::bindings::TaskHookFunction_t","esp_idf_sys::bindings::StreamBufferCallbackFunction_t","esp_idf_sys::bindings::TimerCallbackFunction_t","esp_idf_sys::bindings::PendedFunction_t","esp_idf_sys::bindings::TlsDeleteCallbackFunction_t","esp_idf_sys::bindings::task_wdt_msg_handler","esp_idf_sys::bindings::esp_freertos_idle_cb_t","esp_idf_sys::bindings::esp_freertos_tick_cb_t","esp_idf_sys::bindings::esp_console_cmd_func_t","esp_idf_sys::bindings::esp_console_cmd_func_with_context_t","esp_idf_sys::bindings::linenoiseCompletionCallback","esp_idf_sys::bindings::linenoiseHintsCallback","esp_idf_sys::bindings::linenoiseFreeHintsCallback","esp_idf_sys::bindings::_sig_func_ptr","esp_idf_sys::bindings::arg_resetfn","esp_idf_sys::bindings::arg_scanfn","esp_idf_sys::bindings::arg_checkfn","esp_idf_sys::bindings::arg_errorfn","esp_idf_sys::bindings::arg_dstr_freefn","esp_idf_sys::bindings::arg_cmdfn","esp_idf_sys::bindings::arg_comparefn","esp_idf_sys::bindings::esp_timer_cb_t","esp_idf_sys::bindings::esp_event_handler_t","esp_idf_sys::bindings::esp_netif_receive_t","esp_idf_sys::bindings::esp_netif_find_predicate_t","esp_idf_sys::bindings::esp_netif_callback_fn","esp_idf_sys::bindings::wifi_action_rx_cb_t","esp_idf_sys::bindings::esp_aes_128_encrypt_t","esp_idf_sys::bindings::esp_aes_128_decrypt_t","esp_idf_sys::bindings::esp_aes_wrap_t","esp_idf_sys::bindings::esp_aes_unwrap_t","esp_idf_sys::bindings::esp_hmac_sha256_vector_t","esp_idf_sys::bindings::esp_sha256_prf_t","esp_idf_sys::bindings::esp_hmac_md5_t","esp_idf_sys::bindings::esp_hmac_md5_vector_t","esp_idf_sys::bindings::esp_hmac_sha1_t","esp_idf_sys::bindings::esp_hmac_sha1_vector_t","esp_idf_sys::bindings::esp_sha1_prf_t","esp_idf_sys::bindings::esp_sha1_vector_t","esp_idf_sys::bindings::esp_pbkdf2_sha1_t","esp_idf_sys::bindings::esp_rc4_skip_t","esp_idf_sys::bindings::esp_md5_vector_t","esp_idf_sys::bindings::esp_aes_encrypt_t","esp_idf_sys::bindings::esp_aes_encrypt_init_t","esp_idf_sys::bindings::esp_aes_encrypt_deinit_t","esp_idf_sys::bindings::esp_aes_decrypt_t","esp_idf_sys::bindings::esp_aes_decrypt_init_t","esp_idf_sys::bindings::esp_aes_decrypt_deinit_t","esp_idf_sys::bindings::esp_omac1_aes_128_t","esp_idf_sys::bindings::esp_ccmp_decrypt_t","esp_idf_sys::bindings::esp_ccmp_encrypt_t","esp_idf_sys::bindings::esp_aes_gmac_t","esp_idf_sys::bindings::esp_sha256_vector_t","esp_idf_sys::bindings::esp_crc32_le_t","esp_idf_sys::bindings::wifi_promiscuous_cb_t","esp_idf_sys::bindings::esp_vendor_ie_cb_t","esp_idf_sys::bindings::wifi_csi_cb_t","esp_idf_sys::bindings::esp_now_recv_cb_t","esp_idf_sys::bindings::esp_now_send_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_ref_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_free_cb_t","esp_idf_sys::bindings::wifi_rxcb_t","esp_idf_sys::bindings::wifi_mac_time_update_cb_t","esp_idf_sys::bindings::wifi_tx_done_cb_t","esp_idf_sys::bindings::neighbor_rep_request_cb","esp_idf_sys::bindings::transaction_cb_t","esp_idf_sys::bindings::gpio_isr_t","esp_idf_sys::bindings::dns_found_callback","esp_idf_sys::bindings::pbuf_free_custom_fn","esp_idf_sys::bindings::netif_init_fn","esp_idf_sys::bindings::netif_input_fn","esp_idf_sys::bindings::netif_output_fn","esp_idf_sys::bindings::netif_output_ip6_fn","esp_idf_sys::bindings::netif_linkoutput_fn","esp_idf_sys::bindings::netif_status_callback_fn","esp_idf_sys::bindings::netif_igmp_mac_filter_fn","esp_idf_sys::bindings::netif_mld_mac_filter_fn","esp_idf_sys::bindings::netif_ext_callback_fn","esp_idf_sys::bindings::init_fn_t","esp_idf_sys::bindings::input_fn_t","esp_idf_sys::bindings::sntp_sync_time_cb_t","esp_idf_sys::bindings::esp_sntp_time_cb_t","esp_idf_sys::bindings::ETSTask","esp_idf_sys::bindings::ets_idle_cb_t","esp_idf_sys::bindings::ETSTimerFunc","esp_idf_sys::bindings::ets_isr_t","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_sign_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_key_len_func","esp_idf_sys::bindings::mbedtls_x509_crt_ext_cb_t","esp_idf_sys::bindings::mbedtls_x509_crt_ca_cb_t","esp_idf_sys::bindings::mbedtls_ssl_send_t","esp_idf_sys::bindings::mbedtls_ssl_recv_t","esp_idf_sys::bindings::mbedtls_ssl_recv_timeout_t","esp_idf_sys::bindings::mbedtls_ssl_set_timer_t","esp_idf_sys::bindings::mbedtls_ssl_get_timer_t","esp_idf_sys::bindings::mbedtls_ssl_cache_get_t","esp_idf_sys::bindings::mbedtls_ssl_cache_set_t","esp_idf_sys::bindings::mbedtls_ssl_export_keys_t","esp_idf_sys::bindings::mbedtls_ssl_hs_cb_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_write_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_parse_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_write_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_check_t","esp_idf_sys::bindings::mbedtls_entropy_f_source_ptr","esp_idf_sys::bindings::http_event_handle_cb","esp_idf_sys::bindings::http_client_init_cb_t","esp_idf_sys::bindings::connect_func","esp_idf_sys::bindings::io_func","esp_idf_sys::bindings::io_read_func","esp_idf_sys::bindings::trans_func","esp_idf_sys::bindings::poll_func","esp_idf_sys::bindings::connect_async_func","esp_idf_sys::bindings::payload_transfer_func","esp_idf_sys::bindings::http_data_cb","esp_idf_sys::bindings::http_cb","esp_idf_sys::bindings::httpd_free_ctx_fn_t","esp_idf_sys::bindings::httpd_open_func_t","esp_idf_sys::bindings::httpd_close_func_t","esp_idf_sys::bindings::httpd_uri_match_func_t","esp_idf_sys::bindings::httpd_err_handler_func_t","esp_idf_sys::bindings::httpd_send_func_t","esp_idf_sys::bindings::httpd_recv_func_t","esp_idf_sys::bindings::httpd_pending_func_t","esp_idf_sys::bindings::httpd_work_fn_t","esp_idf_sys::bindings::nvs_flash_generate_keys_t","esp_idf_sys::bindings::nvs_flash_read_cfg_t","esp_idf_sys::bindings::protocomm_req_handler_t","esp_idf_sys::bindings::wifi_prov_cb_func_t","esp_idf_sys::bindings::adc_continuous_callback_t","esp_idf_sys::bindings::gptimer_alarm_cb_t","esp_idf_sys::bindings::i2c_master_callback_t","esp_idf_sys::bindings::i2c_slave_received_callback_t","esp_idf_sys::bindings::i2c_slave_stretch_callback_t","esp_idf_sys::bindings::i2s_isr_callback_t","esp_idf_sys::bindings::ledc_cb_t","esp_idf_sys::bindings::mcpwm_timer_event_cb_t","esp_idf_sys::bindings::mcpwm_brake_event_cb_t","esp_idf_sys::bindings::mcpwm_fault_event_cb_t","esp_idf_sys::bindings::mcpwm_compare_event_cb_t","esp_idf_sys::bindings::mcpwm_capture_event_cb_t","esp_idf_sys::bindings::rmt_tx_end_fn_t","esp_idf_sys::bindings::sample_to_rmt_t","esp_idf_sys::bindings::rmt_tx_done_callback_t","esp_idf_sys::bindings::rmt_rx_done_callback_t","esp_idf_sys::bindings::rmt_encode_simple_cb_t","esp_idf_sys::bindings::slave_transaction_cb_t","esp_idf_sys::bindings::timer_isr_t","esp_idf_sys::bindings::uart_select_notif_callback_t","esp_idf_sys::bindings::panic_info_dump_fn_t","esp_idf_sys::bindings::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; PartialOrd for Option&lt;T&gt;<div class=\"where\">where\n    T: PartialOrd,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;Option&lt;T&gt;) -&gt; Option&lt;Ordering&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lt</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">le</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">gt</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ge</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a>Read more</a></div></details></div></details>","PartialOrd","esp_idf_sys::bindings::__compar_fn_t","esp_idf_sys::bindings::shutdown_handler_t","esp_idf_sys::bindings::vprintf_like_t","esp_idf_sys::bindings::intr_handler_t","esp_idf_sys::bindings::esp_cpu_intr_handler_t","esp_idf_sys::bindings::esp_deep_sleep_cb_t","esp_idf_sys::bindings::esp_deep_sleep_wake_stub_fn_t","esp_idf_sys::bindings::TaskFunction_t","esp_idf_sys::bindings::multi_heap_walker_cb_t","esp_idf_sys::bindings::esp_alloc_failed_hook_t","esp_idf_sys::bindings::heap_caps_walker_cb_t","esp_idf_sys::bindings::TaskHookFunction_t","esp_idf_sys::bindings::StreamBufferCallbackFunction_t","esp_idf_sys::bindings::TimerCallbackFunction_t","esp_idf_sys::bindings::PendedFunction_t","esp_idf_sys::bindings::TlsDeleteCallbackFunction_t","esp_idf_sys::bindings::task_wdt_msg_handler","esp_idf_sys::bindings::esp_freertos_idle_cb_t","esp_idf_sys::bindings::esp_freertos_tick_cb_t","esp_idf_sys::bindings::esp_console_cmd_func_t","esp_idf_sys::bindings::esp_console_cmd_func_with_context_t","esp_idf_sys::bindings::linenoiseCompletionCallback","esp_idf_sys::bindings::linenoiseHintsCallback","esp_idf_sys::bindings::linenoiseFreeHintsCallback","esp_idf_sys::bindings::_sig_func_ptr","esp_idf_sys::bindings::arg_resetfn","esp_idf_sys::bindings::arg_scanfn","esp_idf_sys::bindings::arg_checkfn","esp_idf_sys::bindings::arg_errorfn","esp_idf_sys::bindings::arg_dstr_freefn","esp_idf_sys::bindings::arg_cmdfn","esp_idf_sys::bindings::arg_comparefn","esp_idf_sys::bindings::esp_timer_cb_t","esp_idf_sys::bindings::esp_event_handler_t","esp_idf_sys::bindings::esp_netif_receive_t","esp_idf_sys::bindings::esp_netif_find_predicate_t","esp_idf_sys::bindings::esp_netif_callback_fn","esp_idf_sys::bindings::wifi_action_rx_cb_t","esp_idf_sys::bindings::esp_aes_128_encrypt_t","esp_idf_sys::bindings::esp_aes_128_decrypt_t","esp_idf_sys::bindings::esp_aes_wrap_t","esp_idf_sys::bindings::esp_aes_unwrap_t","esp_idf_sys::bindings::esp_hmac_sha256_vector_t","esp_idf_sys::bindings::esp_sha256_prf_t","esp_idf_sys::bindings::esp_hmac_md5_t","esp_idf_sys::bindings::esp_hmac_md5_vector_t","esp_idf_sys::bindings::esp_hmac_sha1_t","esp_idf_sys::bindings::esp_hmac_sha1_vector_t","esp_idf_sys::bindings::esp_sha1_prf_t","esp_idf_sys::bindings::esp_sha1_vector_t","esp_idf_sys::bindings::esp_pbkdf2_sha1_t","esp_idf_sys::bindings::esp_rc4_skip_t","esp_idf_sys::bindings::esp_md5_vector_t","esp_idf_sys::bindings::esp_aes_encrypt_t","esp_idf_sys::bindings::esp_aes_encrypt_init_t","esp_idf_sys::bindings::esp_aes_encrypt_deinit_t","esp_idf_sys::bindings::esp_aes_decrypt_t","esp_idf_sys::bindings::esp_aes_decrypt_init_t","esp_idf_sys::bindings::esp_aes_decrypt_deinit_t","esp_idf_sys::bindings::esp_omac1_aes_128_t","esp_idf_sys::bindings::esp_ccmp_decrypt_t","esp_idf_sys::bindings::esp_ccmp_encrypt_t","esp_idf_sys::bindings::esp_aes_gmac_t","esp_idf_sys::bindings::esp_sha256_vector_t","esp_idf_sys::bindings::esp_crc32_le_t","esp_idf_sys::bindings::wifi_promiscuous_cb_t","esp_idf_sys::bindings::esp_vendor_ie_cb_t","esp_idf_sys::bindings::wifi_csi_cb_t","esp_idf_sys::bindings::esp_now_recv_cb_t","esp_idf_sys::bindings::esp_now_send_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_ref_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_free_cb_t","esp_idf_sys::bindings::wifi_rxcb_t","esp_idf_sys::bindings::wifi_mac_time_update_cb_t","esp_idf_sys::bindings::wifi_tx_done_cb_t","esp_idf_sys::bindings::neighbor_rep_request_cb","esp_idf_sys::bindings::transaction_cb_t","esp_idf_sys::bindings::gpio_isr_t","esp_idf_sys::bindings::dns_found_callback","esp_idf_sys::bindings::pbuf_free_custom_fn","esp_idf_sys::bindings::netif_init_fn","esp_idf_sys::bindings::netif_input_fn","esp_idf_sys::bindings::netif_output_fn","esp_idf_sys::bindings::netif_output_ip6_fn","esp_idf_sys::bindings::netif_linkoutput_fn","esp_idf_sys::bindings::netif_status_callback_fn","esp_idf_sys::bindings::netif_igmp_mac_filter_fn","esp_idf_sys::bindings::netif_mld_mac_filter_fn","esp_idf_sys::bindings::netif_ext_callback_fn","esp_idf_sys::bindings::init_fn_t","esp_idf_sys::bindings::input_fn_t","esp_idf_sys::bindings::sntp_sync_time_cb_t","esp_idf_sys::bindings::esp_sntp_time_cb_t","esp_idf_sys::bindings::ETSTask","esp_idf_sys::bindings::ets_idle_cb_t","esp_idf_sys::bindings::ETSTimerFunc","esp_idf_sys::bindings::ets_isr_t","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_sign_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_key_len_func","esp_idf_sys::bindings::mbedtls_x509_crt_ext_cb_t","esp_idf_sys::bindings::mbedtls_x509_crt_ca_cb_t","esp_idf_sys::bindings::mbedtls_ssl_send_t","esp_idf_sys::bindings::mbedtls_ssl_recv_t","esp_idf_sys::bindings::mbedtls_ssl_recv_timeout_t","esp_idf_sys::bindings::mbedtls_ssl_set_timer_t","esp_idf_sys::bindings::mbedtls_ssl_get_timer_t","esp_idf_sys::bindings::mbedtls_ssl_cache_get_t","esp_idf_sys::bindings::mbedtls_ssl_cache_set_t","esp_idf_sys::bindings::mbedtls_ssl_export_keys_t","esp_idf_sys::bindings::mbedtls_ssl_hs_cb_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_write_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_parse_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_write_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_check_t","esp_idf_sys::bindings::mbedtls_entropy_f_source_ptr","esp_idf_sys::bindings::http_event_handle_cb","esp_idf_sys::bindings::http_client_init_cb_t","esp_idf_sys::bindings::connect_func","esp_idf_sys::bindings::io_func","esp_idf_sys::bindings::io_read_func","esp_idf_sys::bindings::trans_func","esp_idf_sys::bindings::poll_func","esp_idf_sys::bindings::connect_async_func","esp_idf_sys::bindings::payload_transfer_func","esp_idf_sys::bindings::http_data_cb","esp_idf_sys::bindings::http_cb","esp_idf_sys::bindings::httpd_free_ctx_fn_t","esp_idf_sys::bindings::httpd_open_func_t","esp_idf_sys::bindings::httpd_close_func_t","esp_idf_sys::bindings::httpd_uri_match_func_t","esp_idf_sys::bindings::httpd_err_handler_func_t","esp_idf_sys::bindings::httpd_send_func_t","esp_idf_sys::bindings::httpd_recv_func_t","esp_idf_sys::bindings::httpd_pending_func_t","esp_idf_sys::bindings::httpd_work_fn_t","esp_idf_sys::bindings::nvs_flash_generate_keys_t","esp_idf_sys::bindings::nvs_flash_read_cfg_t","esp_idf_sys::bindings::protocomm_req_handler_t","esp_idf_sys::bindings::wifi_prov_cb_func_t","esp_idf_sys::bindings::adc_continuous_callback_t","esp_idf_sys::bindings::gptimer_alarm_cb_t","esp_idf_sys::bindings::i2c_master_callback_t","esp_idf_sys::bindings::i2c_slave_received_callback_t","esp_idf_sys::bindings::i2c_slave_stretch_callback_t","esp_idf_sys::bindings::i2s_isr_callback_t","esp_idf_sys::bindings::ledc_cb_t","esp_idf_sys::bindings::mcpwm_timer_event_cb_t","esp_idf_sys::bindings::mcpwm_brake_event_cb_t","esp_idf_sys::bindings::mcpwm_fault_event_cb_t","esp_idf_sys::bindings::mcpwm_compare_event_cb_t","esp_idf_sys::bindings::mcpwm_capture_event_cb_t","esp_idf_sys::bindings::rmt_tx_end_fn_t","esp_idf_sys::bindings::sample_to_rmt_t","esp_idf_sys::bindings::rmt_tx_done_callback_t","esp_idf_sys::bindings::rmt_rx_done_callback_t","esp_idf_sys::bindings::rmt_encode_simple_cb_t","esp_idf_sys::bindings::slave_transaction_cb_t","esp_idf_sys::bindings::timer_isr_t","esp_idf_sys::bindings::uart_select_notif_callback_t","esp_idf_sys::bindings::panic_info_dump_fn_t","esp_idf_sys::bindings::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.37.0\">1.37.0</span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; Product&lt;Option&lt;U&gt;&gt; for Option&lt;T&gt;<div class=\"where\">where\n    T: Product&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; Option&lt;T&gt;<div class=\"where\">where\n    I: Iterator&lt;Item = Option&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the [<code>Iterator</code>]: if it is a [<code>None</code>], no further\nelements are taken, and the [<code>None</code>] is returned. Should no [<code>None</code>]\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Product<Option<U>>","esp_idf_sys::bindings::__compar_fn_t","esp_idf_sys::bindings::shutdown_handler_t","esp_idf_sys::bindings::vprintf_like_t","esp_idf_sys::bindings::intr_handler_t","esp_idf_sys::bindings::esp_cpu_intr_handler_t","esp_idf_sys::bindings::esp_deep_sleep_cb_t","esp_idf_sys::bindings::esp_deep_sleep_wake_stub_fn_t","esp_idf_sys::bindings::TaskFunction_t","esp_idf_sys::bindings::multi_heap_walker_cb_t","esp_idf_sys::bindings::esp_alloc_failed_hook_t","esp_idf_sys::bindings::heap_caps_walker_cb_t","esp_idf_sys::bindings::TaskHookFunction_t","esp_idf_sys::bindings::StreamBufferCallbackFunction_t","esp_idf_sys::bindings::TimerCallbackFunction_t","esp_idf_sys::bindings::PendedFunction_t","esp_idf_sys::bindings::TlsDeleteCallbackFunction_t","esp_idf_sys::bindings::task_wdt_msg_handler","esp_idf_sys::bindings::esp_freertos_idle_cb_t","esp_idf_sys::bindings::esp_freertos_tick_cb_t","esp_idf_sys::bindings::esp_console_cmd_func_t","esp_idf_sys::bindings::esp_console_cmd_func_with_context_t","esp_idf_sys::bindings::linenoiseCompletionCallback","esp_idf_sys::bindings::linenoiseHintsCallback","esp_idf_sys::bindings::linenoiseFreeHintsCallback","esp_idf_sys::bindings::_sig_func_ptr","esp_idf_sys::bindings::arg_resetfn","esp_idf_sys::bindings::arg_scanfn","esp_idf_sys::bindings::arg_checkfn","esp_idf_sys::bindings::arg_errorfn","esp_idf_sys::bindings::arg_dstr_freefn","esp_idf_sys::bindings::arg_cmdfn","esp_idf_sys::bindings::arg_comparefn","esp_idf_sys::bindings::esp_timer_cb_t","esp_idf_sys::bindings::esp_event_handler_t","esp_idf_sys::bindings::esp_netif_receive_t","esp_idf_sys::bindings::esp_netif_find_predicate_t","esp_idf_sys::bindings::esp_netif_callback_fn","esp_idf_sys::bindings::wifi_action_rx_cb_t","esp_idf_sys::bindings::esp_aes_128_encrypt_t","esp_idf_sys::bindings::esp_aes_128_decrypt_t","esp_idf_sys::bindings::esp_aes_wrap_t","esp_idf_sys::bindings::esp_aes_unwrap_t","esp_idf_sys::bindings::esp_hmac_sha256_vector_t","esp_idf_sys::bindings::esp_sha256_prf_t","esp_idf_sys::bindings::esp_hmac_md5_t","esp_idf_sys::bindings::esp_hmac_md5_vector_t","esp_idf_sys::bindings::esp_hmac_sha1_t","esp_idf_sys::bindings::esp_hmac_sha1_vector_t","esp_idf_sys::bindings::esp_sha1_prf_t","esp_idf_sys::bindings::esp_sha1_vector_t","esp_idf_sys::bindings::esp_pbkdf2_sha1_t","esp_idf_sys::bindings::esp_rc4_skip_t","esp_idf_sys::bindings::esp_md5_vector_t","esp_idf_sys::bindings::esp_aes_encrypt_t","esp_idf_sys::bindings::esp_aes_encrypt_init_t","esp_idf_sys::bindings::esp_aes_encrypt_deinit_t","esp_idf_sys::bindings::esp_aes_decrypt_t","esp_idf_sys::bindings::esp_aes_decrypt_init_t","esp_idf_sys::bindings::esp_aes_decrypt_deinit_t","esp_idf_sys::bindings::esp_omac1_aes_128_t","esp_idf_sys::bindings::esp_ccmp_decrypt_t","esp_idf_sys::bindings::esp_ccmp_encrypt_t","esp_idf_sys::bindings::esp_aes_gmac_t","esp_idf_sys::bindings::esp_sha256_vector_t","esp_idf_sys::bindings::esp_crc32_le_t","esp_idf_sys::bindings::wifi_promiscuous_cb_t","esp_idf_sys::bindings::esp_vendor_ie_cb_t","esp_idf_sys::bindings::wifi_csi_cb_t","esp_idf_sys::bindings::esp_now_recv_cb_t","esp_idf_sys::bindings::esp_now_send_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_ref_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_free_cb_t","esp_idf_sys::bindings::wifi_rxcb_t","esp_idf_sys::bindings::wifi_mac_time_update_cb_t","esp_idf_sys::bindings::wifi_tx_done_cb_t","esp_idf_sys::bindings::neighbor_rep_request_cb","esp_idf_sys::bindings::transaction_cb_t","esp_idf_sys::bindings::gpio_isr_t","esp_idf_sys::bindings::dns_found_callback","esp_idf_sys::bindings::pbuf_free_custom_fn","esp_idf_sys::bindings::netif_init_fn","esp_idf_sys::bindings::netif_input_fn","esp_idf_sys::bindings::netif_output_fn","esp_idf_sys::bindings::netif_output_ip6_fn","esp_idf_sys::bindings::netif_linkoutput_fn","esp_idf_sys::bindings::netif_status_callback_fn","esp_idf_sys::bindings::netif_igmp_mac_filter_fn","esp_idf_sys::bindings::netif_mld_mac_filter_fn","esp_idf_sys::bindings::netif_ext_callback_fn","esp_idf_sys::bindings::init_fn_t","esp_idf_sys::bindings::input_fn_t","esp_idf_sys::bindings::sntp_sync_time_cb_t","esp_idf_sys::bindings::esp_sntp_time_cb_t","esp_idf_sys::bindings::ETSTask","esp_idf_sys::bindings::ets_idle_cb_t","esp_idf_sys::bindings::ETSTimerFunc","esp_idf_sys::bindings::ets_isr_t","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_sign_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_key_len_func","esp_idf_sys::bindings::mbedtls_x509_crt_ext_cb_t","esp_idf_sys::bindings::mbedtls_x509_crt_ca_cb_t","esp_idf_sys::bindings::mbedtls_ssl_send_t","esp_idf_sys::bindings::mbedtls_ssl_recv_t","esp_idf_sys::bindings::mbedtls_ssl_recv_timeout_t","esp_idf_sys::bindings::mbedtls_ssl_set_timer_t","esp_idf_sys::bindings::mbedtls_ssl_get_timer_t","esp_idf_sys::bindings::mbedtls_ssl_cache_get_t","esp_idf_sys::bindings::mbedtls_ssl_cache_set_t","esp_idf_sys::bindings::mbedtls_ssl_export_keys_t","esp_idf_sys::bindings::mbedtls_ssl_hs_cb_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_write_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_parse_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_write_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_check_t","esp_idf_sys::bindings::mbedtls_entropy_f_source_ptr","esp_idf_sys::bindings::http_event_handle_cb","esp_idf_sys::bindings::http_client_init_cb_t","esp_idf_sys::bindings::connect_func","esp_idf_sys::bindings::io_func","esp_idf_sys::bindings::io_read_func","esp_idf_sys::bindings::trans_func","esp_idf_sys::bindings::poll_func","esp_idf_sys::bindings::connect_async_func","esp_idf_sys::bindings::payload_transfer_func","esp_idf_sys::bindings::http_data_cb","esp_idf_sys::bindings::http_cb","esp_idf_sys::bindings::httpd_free_ctx_fn_t","esp_idf_sys::bindings::httpd_open_func_t","esp_idf_sys::bindings::httpd_close_func_t","esp_idf_sys::bindings::httpd_uri_match_func_t","esp_idf_sys::bindings::httpd_err_handler_func_t","esp_idf_sys::bindings::httpd_send_func_t","esp_idf_sys::bindings::httpd_recv_func_t","esp_idf_sys::bindings::httpd_pending_func_t","esp_idf_sys::bindings::httpd_work_fn_t","esp_idf_sys::bindings::nvs_flash_generate_keys_t","esp_idf_sys::bindings::nvs_flash_read_cfg_t","esp_idf_sys::bindings::protocomm_req_handler_t","esp_idf_sys::bindings::wifi_prov_cb_func_t","esp_idf_sys::bindings::adc_continuous_callback_t","esp_idf_sys::bindings::gptimer_alarm_cb_t","esp_idf_sys::bindings::i2c_master_callback_t","esp_idf_sys::bindings::i2c_slave_received_callback_t","esp_idf_sys::bindings::i2c_slave_stretch_callback_t","esp_idf_sys::bindings::i2s_isr_callback_t","esp_idf_sys::bindings::ledc_cb_t","esp_idf_sys::bindings::mcpwm_timer_event_cb_t","esp_idf_sys::bindings::mcpwm_brake_event_cb_t","esp_idf_sys::bindings::mcpwm_fault_event_cb_t","esp_idf_sys::bindings::mcpwm_compare_event_cb_t","esp_idf_sys::bindings::mcpwm_capture_event_cb_t","esp_idf_sys::bindings::rmt_tx_end_fn_t","esp_idf_sys::bindings::sample_to_rmt_t","esp_idf_sys::bindings::rmt_tx_done_callback_t","esp_idf_sys::bindings::rmt_rx_done_callback_t","esp_idf_sys::bindings::rmt_encode_simple_cb_t","esp_idf_sys::bindings::slave_transaction_cb_t","esp_idf_sys::bindings::timer_isr_t","esp_idf_sys::bindings::uart_select_notif_callback_t","esp_idf_sys::bindings::panic_info_dump_fn_t","esp_idf_sys::bindings::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.37.0\">1.37.0</span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; Sum&lt;Option&lt;U&gt;&gt; for Option&lt;T&gt;<div class=\"where\">where\n    T: Sum&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; Option&lt;T&gt;<div class=\"where\">where\n    I: Iterator&lt;Item = Option&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the [<code>Iterator</code>]: if it is a [<code>None</code>], no further\nelements are taken, and the [<code>None</code>] is returned. Should no [<code>None</code>]\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Sum<Option<U>>","esp_idf_sys::bindings::__compar_fn_t","esp_idf_sys::bindings::shutdown_handler_t","esp_idf_sys::bindings::vprintf_like_t","esp_idf_sys::bindings::intr_handler_t","esp_idf_sys::bindings::esp_cpu_intr_handler_t","esp_idf_sys::bindings::esp_deep_sleep_cb_t","esp_idf_sys::bindings::esp_deep_sleep_wake_stub_fn_t","esp_idf_sys::bindings::TaskFunction_t","esp_idf_sys::bindings::multi_heap_walker_cb_t","esp_idf_sys::bindings::esp_alloc_failed_hook_t","esp_idf_sys::bindings::heap_caps_walker_cb_t","esp_idf_sys::bindings::TaskHookFunction_t","esp_idf_sys::bindings::StreamBufferCallbackFunction_t","esp_idf_sys::bindings::TimerCallbackFunction_t","esp_idf_sys::bindings::PendedFunction_t","esp_idf_sys::bindings::TlsDeleteCallbackFunction_t","esp_idf_sys::bindings::task_wdt_msg_handler","esp_idf_sys::bindings::esp_freertos_idle_cb_t","esp_idf_sys::bindings::esp_freertos_tick_cb_t","esp_idf_sys::bindings::esp_console_cmd_func_t","esp_idf_sys::bindings::esp_console_cmd_func_with_context_t","esp_idf_sys::bindings::linenoiseCompletionCallback","esp_idf_sys::bindings::linenoiseHintsCallback","esp_idf_sys::bindings::linenoiseFreeHintsCallback","esp_idf_sys::bindings::_sig_func_ptr","esp_idf_sys::bindings::arg_resetfn","esp_idf_sys::bindings::arg_scanfn","esp_idf_sys::bindings::arg_checkfn","esp_idf_sys::bindings::arg_errorfn","esp_idf_sys::bindings::arg_dstr_freefn","esp_idf_sys::bindings::arg_cmdfn","esp_idf_sys::bindings::arg_comparefn","esp_idf_sys::bindings::esp_timer_cb_t","esp_idf_sys::bindings::esp_event_handler_t","esp_idf_sys::bindings::esp_netif_receive_t","esp_idf_sys::bindings::esp_netif_find_predicate_t","esp_idf_sys::bindings::esp_netif_callback_fn","esp_idf_sys::bindings::wifi_action_rx_cb_t","esp_idf_sys::bindings::esp_aes_128_encrypt_t","esp_idf_sys::bindings::esp_aes_128_decrypt_t","esp_idf_sys::bindings::esp_aes_wrap_t","esp_idf_sys::bindings::esp_aes_unwrap_t","esp_idf_sys::bindings::esp_hmac_sha256_vector_t","esp_idf_sys::bindings::esp_sha256_prf_t","esp_idf_sys::bindings::esp_hmac_md5_t","esp_idf_sys::bindings::esp_hmac_md5_vector_t","esp_idf_sys::bindings::esp_hmac_sha1_t","esp_idf_sys::bindings::esp_hmac_sha1_vector_t","esp_idf_sys::bindings::esp_sha1_prf_t","esp_idf_sys::bindings::esp_sha1_vector_t","esp_idf_sys::bindings::esp_pbkdf2_sha1_t","esp_idf_sys::bindings::esp_rc4_skip_t","esp_idf_sys::bindings::esp_md5_vector_t","esp_idf_sys::bindings::esp_aes_encrypt_t","esp_idf_sys::bindings::esp_aes_encrypt_init_t","esp_idf_sys::bindings::esp_aes_encrypt_deinit_t","esp_idf_sys::bindings::esp_aes_decrypt_t","esp_idf_sys::bindings::esp_aes_decrypt_init_t","esp_idf_sys::bindings::esp_aes_decrypt_deinit_t","esp_idf_sys::bindings::esp_omac1_aes_128_t","esp_idf_sys::bindings::esp_ccmp_decrypt_t","esp_idf_sys::bindings::esp_ccmp_encrypt_t","esp_idf_sys::bindings::esp_aes_gmac_t","esp_idf_sys::bindings::esp_sha256_vector_t","esp_idf_sys::bindings::esp_crc32_le_t","esp_idf_sys::bindings::wifi_promiscuous_cb_t","esp_idf_sys::bindings::esp_vendor_ie_cb_t","esp_idf_sys::bindings::wifi_csi_cb_t","esp_idf_sys::bindings::esp_now_recv_cb_t","esp_idf_sys::bindings::esp_now_send_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_ref_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_free_cb_t","esp_idf_sys::bindings::wifi_rxcb_t","esp_idf_sys::bindings::wifi_mac_time_update_cb_t","esp_idf_sys::bindings::wifi_tx_done_cb_t","esp_idf_sys::bindings::neighbor_rep_request_cb","esp_idf_sys::bindings::transaction_cb_t","esp_idf_sys::bindings::gpio_isr_t","esp_idf_sys::bindings::dns_found_callback","esp_idf_sys::bindings::pbuf_free_custom_fn","esp_idf_sys::bindings::netif_init_fn","esp_idf_sys::bindings::netif_input_fn","esp_idf_sys::bindings::netif_output_fn","esp_idf_sys::bindings::netif_output_ip6_fn","esp_idf_sys::bindings::netif_linkoutput_fn","esp_idf_sys::bindings::netif_status_callback_fn","esp_idf_sys::bindings::netif_igmp_mac_filter_fn","esp_idf_sys::bindings::netif_mld_mac_filter_fn","esp_idf_sys::bindings::netif_ext_callback_fn","esp_idf_sys::bindings::init_fn_t","esp_idf_sys::bindings::input_fn_t","esp_idf_sys::bindings::sntp_sync_time_cb_t","esp_idf_sys::bindings::esp_sntp_time_cb_t","esp_idf_sys::bindings::ETSTask","esp_idf_sys::bindings::ets_idle_cb_t","esp_idf_sys::bindings::ETSTimerFunc","esp_idf_sys::bindings::ets_isr_t","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_sign_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_key_len_func","esp_idf_sys::bindings::mbedtls_x509_crt_ext_cb_t","esp_idf_sys::bindings::mbedtls_x509_crt_ca_cb_t","esp_idf_sys::bindings::mbedtls_ssl_send_t","esp_idf_sys::bindings::mbedtls_ssl_recv_t","esp_idf_sys::bindings::mbedtls_ssl_recv_timeout_t","esp_idf_sys::bindings::mbedtls_ssl_set_timer_t","esp_idf_sys::bindings::mbedtls_ssl_get_timer_t","esp_idf_sys::bindings::mbedtls_ssl_cache_get_t","esp_idf_sys::bindings::mbedtls_ssl_cache_set_t","esp_idf_sys::bindings::mbedtls_ssl_export_keys_t","esp_idf_sys::bindings::mbedtls_ssl_hs_cb_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_write_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_parse_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_write_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_check_t","esp_idf_sys::bindings::mbedtls_entropy_f_source_ptr","esp_idf_sys::bindings::http_event_handle_cb","esp_idf_sys::bindings::http_client_init_cb_t","esp_idf_sys::bindings::connect_func","esp_idf_sys::bindings::io_func","esp_idf_sys::bindings::io_read_func","esp_idf_sys::bindings::trans_func","esp_idf_sys::bindings::poll_func","esp_idf_sys::bindings::connect_async_func","esp_idf_sys::bindings::payload_transfer_func","esp_idf_sys::bindings::http_data_cb","esp_idf_sys::bindings::http_cb","esp_idf_sys::bindings::httpd_free_ctx_fn_t","esp_idf_sys::bindings::httpd_open_func_t","esp_idf_sys::bindings::httpd_close_func_t","esp_idf_sys::bindings::httpd_uri_match_func_t","esp_idf_sys::bindings::httpd_err_handler_func_t","esp_idf_sys::bindings::httpd_send_func_t","esp_idf_sys::bindings::httpd_recv_func_t","esp_idf_sys::bindings::httpd_pending_func_t","esp_idf_sys::bindings::httpd_work_fn_t","esp_idf_sys::bindings::nvs_flash_generate_keys_t","esp_idf_sys::bindings::nvs_flash_read_cfg_t","esp_idf_sys::bindings::protocomm_req_handler_t","esp_idf_sys::bindings::wifi_prov_cb_func_t","esp_idf_sys::bindings::adc_continuous_callback_t","esp_idf_sys::bindings::gptimer_alarm_cb_t","esp_idf_sys::bindings::i2c_master_callback_t","esp_idf_sys::bindings::i2c_slave_received_callback_t","esp_idf_sys::bindings::i2c_slave_stretch_callback_t","esp_idf_sys::bindings::i2s_isr_callback_t","esp_idf_sys::bindings::ledc_cb_t","esp_idf_sys::bindings::mcpwm_timer_event_cb_t","esp_idf_sys::bindings::mcpwm_brake_event_cb_t","esp_idf_sys::bindings::mcpwm_fault_event_cb_t","esp_idf_sys::bindings::mcpwm_compare_event_cb_t","esp_idf_sys::bindings::mcpwm_capture_event_cb_t","esp_idf_sys::bindings::rmt_tx_end_fn_t","esp_idf_sys::bindings::sample_to_rmt_t","esp_idf_sys::bindings::rmt_tx_done_callback_t","esp_idf_sys::bindings::rmt_rx_done_callback_t","esp_idf_sys::bindings::rmt_encode_simple_cb_t","esp_idf_sys::bindings::slave_transaction_cb_t","esp_idf_sys::bindings::timer_isr_t","esp_idf_sys::bindings::uart_select_notif_callback_t","esp_idf_sys::bindings::panic_info_dump_fn_t","esp_idf_sys::bindings::esp_lcd_panel_io_color_trans_done_cb_t"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Try for Option&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Residual</a> = Option&lt;Infallible&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value passed to [<code>FromResidual::from_residual</code>]\nas part of <code>?</code> when short-circuiting. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_output</a>(output: &lt;Option&lt;T&gt; as Try&gt;::Output) -&gt; Option&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">branch</a>(\n    self,\n) -&gt; ControlFlow&lt;&lt;Option&lt;T&gt; as Try&gt;::Residual, &lt;Option&lt;T&gt; as Try&gt;::Output&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned [<code>ControlFlow::Continue</code>])\nor propagate a value back to the caller\n(because this returned [<code>ControlFlow::Break</code>]). <a>Read more</a></div></details></div></details>","Try","esp_idf_sys::bindings::__compar_fn_t","esp_idf_sys::bindings::shutdown_handler_t","esp_idf_sys::bindings::vprintf_like_t","esp_idf_sys::bindings::intr_handler_t","esp_idf_sys::bindings::esp_cpu_intr_handler_t","esp_idf_sys::bindings::esp_deep_sleep_cb_t","esp_idf_sys::bindings::esp_deep_sleep_wake_stub_fn_t","esp_idf_sys::bindings::TaskFunction_t","esp_idf_sys::bindings::multi_heap_walker_cb_t","esp_idf_sys::bindings::esp_alloc_failed_hook_t","esp_idf_sys::bindings::heap_caps_walker_cb_t","esp_idf_sys::bindings::TaskHookFunction_t","esp_idf_sys::bindings::StreamBufferCallbackFunction_t","esp_idf_sys::bindings::TimerCallbackFunction_t","esp_idf_sys::bindings::PendedFunction_t","esp_idf_sys::bindings::TlsDeleteCallbackFunction_t","esp_idf_sys::bindings::task_wdt_msg_handler","esp_idf_sys::bindings::esp_freertos_idle_cb_t","esp_idf_sys::bindings::esp_freertos_tick_cb_t","esp_idf_sys::bindings::esp_console_cmd_func_t","esp_idf_sys::bindings::esp_console_cmd_func_with_context_t","esp_idf_sys::bindings::linenoiseCompletionCallback","esp_idf_sys::bindings::linenoiseHintsCallback","esp_idf_sys::bindings::linenoiseFreeHintsCallback","esp_idf_sys::bindings::_sig_func_ptr","esp_idf_sys::bindings::arg_resetfn","esp_idf_sys::bindings::arg_scanfn","esp_idf_sys::bindings::arg_checkfn","esp_idf_sys::bindings::arg_errorfn","esp_idf_sys::bindings::arg_dstr_freefn","esp_idf_sys::bindings::arg_cmdfn","esp_idf_sys::bindings::arg_comparefn","esp_idf_sys::bindings::esp_timer_cb_t","esp_idf_sys::bindings::esp_event_handler_t","esp_idf_sys::bindings::esp_netif_receive_t","esp_idf_sys::bindings::esp_netif_find_predicate_t","esp_idf_sys::bindings::esp_netif_callback_fn","esp_idf_sys::bindings::wifi_action_rx_cb_t","esp_idf_sys::bindings::esp_aes_128_encrypt_t","esp_idf_sys::bindings::esp_aes_128_decrypt_t","esp_idf_sys::bindings::esp_aes_wrap_t","esp_idf_sys::bindings::esp_aes_unwrap_t","esp_idf_sys::bindings::esp_hmac_sha256_vector_t","esp_idf_sys::bindings::esp_sha256_prf_t","esp_idf_sys::bindings::esp_hmac_md5_t","esp_idf_sys::bindings::esp_hmac_md5_vector_t","esp_idf_sys::bindings::esp_hmac_sha1_t","esp_idf_sys::bindings::esp_hmac_sha1_vector_t","esp_idf_sys::bindings::esp_sha1_prf_t","esp_idf_sys::bindings::esp_sha1_vector_t","esp_idf_sys::bindings::esp_pbkdf2_sha1_t","esp_idf_sys::bindings::esp_rc4_skip_t","esp_idf_sys::bindings::esp_md5_vector_t","esp_idf_sys::bindings::esp_aes_encrypt_t","esp_idf_sys::bindings::esp_aes_encrypt_init_t","esp_idf_sys::bindings::esp_aes_encrypt_deinit_t","esp_idf_sys::bindings::esp_aes_decrypt_t","esp_idf_sys::bindings::esp_aes_decrypt_init_t","esp_idf_sys::bindings::esp_aes_decrypt_deinit_t","esp_idf_sys::bindings::esp_omac1_aes_128_t","esp_idf_sys::bindings::esp_ccmp_decrypt_t","esp_idf_sys::bindings::esp_ccmp_encrypt_t","esp_idf_sys::bindings::esp_aes_gmac_t","esp_idf_sys::bindings::esp_sha256_vector_t","esp_idf_sys::bindings::esp_crc32_le_t","esp_idf_sys::bindings::wifi_promiscuous_cb_t","esp_idf_sys::bindings::esp_vendor_ie_cb_t","esp_idf_sys::bindings::wifi_csi_cb_t","esp_idf_sys::bindings::esp_now_recv_cb_t","esp_idf_sys::bindings::esp_now_send_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_ref_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_free_cb_t","esp_idf_sys::bindings::wifi_rxcb_t","esp_idf_sys::bindings::wifi_mac_time_update_cb_t","esp_idf_sys::bindings::wifi_tx_done_cb_t","esp_idf_sys::bindings::neighbor_rep_request_cb","esp_idf_sys::bindings::transaction_cb_t","esp_idf_sys::bindings::gpio_isr_t","esp_idf_sys::bindings::dns_found_callback","esp_idf_sys::bindings::pbuf_free_custom_fn","esp_idf_sys::bindings::netif_init_fn","esp_idf_sys::bindings::netif_input_fn","esp_idf_sys::bindings::netif_output_fn","esp_idf_sys::bindings::netif_output_ip6_fn","esp_idf_sys::bindings::netif_linkoutput_fn","esp_idf_sys::bindings::netif_status_callback_fn","esp_idf_sys::bindings::netif_igmp_mac_filter_fn","esp_idf_sys::bindings::netif_mld_mac_filter_fn","esp_idf_sys::bindings::netif_ext_callback_fn","esp_idf_sys::bindings::init_fn_t","esp_idf_sys::bindings::input_fn_t","esp_idf_sys::bindings::sntp_sync_time_cb_t","esp_idf_sys::bindings::esp_sntp_time_cb_t","esp_idf_sys::bindings::ETSTask","esp_idf_sys::bindings::ets_idle_cb_t","esp_idf_sys::bindings::ETSTimerFunc","esp_idf_sys::bindings::ets_isr_t","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_sign_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_key_len_func","esp_idf_sys::bindings::mbedtls_x509_crt_ext_cb_t","esp_idf_sys::bindings::mbedtls_x509_crt_ca_cb_t","esp_idf_sys::bindings::mbedtls_ssl_send_t","esp_idf_sys::bindings::mbedtls_ssl_recv_t","esp_idf_sys::bindings::mbedtls_ssl_recv_timeout_t","esp_idf_sys::bindings::mbedtls_ssl_set_timer_t","esp_idf_sys::bindings::mbedtls_ssl_get_timer_t","esp_idf_sys::bindings::mbedtls_ssl_cache_get_t","esp_idf_sys::bindings::mbedtls_ssl_cache_set_t","esp_idf_sys::bindings::mbedtls_ssl_export_keys_t","esp_idf_sys::bindings::mbedtls_ssl_hs_cb_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_write_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_parse_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_write_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_check_t","esp_idf_sys::bindings::mbedtls_entropy_f_source_ptr","esp_idf_sys::bindings::http_event_handle_cb","esp_idf_sys::bindings::http_client_init_cb_t","esp_idf_sys::bindings::connect_func","esp_idf_sys::bindings::io_func","esp_idf_sys::bindings::io_read_func","esp_idf_sys::bindings::trans_func","esp_idf_sys::bindings::poll_func","esp_idf_sys::bindings::connect_async_func","esp_idf_sys::bindings::payload_transfer_func","esp_idf_sys::bindings::http_data_cb","esp_idf_sys::bindings::http_cb","esp_idf_sys::bindings::httpd_free_ctx_fn_t","esp_idf_sys::bindings::httpd_open_func_t","esp_idf_sys::bindings::httpd_close_func_t","esp_idf_sys::bindings::httpd_uri_match_func_t","esp_idf_sys::bindings::httpd_err_handler_func_t","esp_idf_sys::bindings::httpd_send_func_t","esp_idf_sys::bindings::httpd_recv_func_t","esp_idf_sys::bindings::httpd_pending_func_t","esp_idf_sys::bindings::httpd_work_fn_t","esp_idf_sys::bindings::nvs_flash_generate_keys_t","esp_idf_sys::bindings::nvs_flash_read_cfg_t","esp_idf_sys::bindings::protocomm_req_handler_t","esp_idf_sys::bindings::wifi_prov_cb_func_t","esp_idf_sys::bindings::adc_continuous_callback_t","esp_idf_sys::bindings::gptimer_alarm_cb_t","esp_idf_sys::bindings::i2c_master_callback_t","esp_idf_sys::bindings::i2c_slave_received_callback_t","esp_idf_sys::bindings::i2c_slave_stretch_callback_t","esp_idf_sys::bindings::i2s_isr_callback_t","esp_idf_sys::bindings::ledc_cb_t","esp_idf_sys::bindings::mcpwm_timer_event_cb_t","esp_idf_sys::bindings::mcpwm_brake_event_cb_t","esp_idf_sys::bindings::mcpwm_fault_event_cb_t","esp_idf_sys::bindings::mcpwm_compare_event_cb_t","esp_idf_sys::bindings::mcpwm_capture_event_cb_t","esp_idf_sys::bindings::rmt_tx_end_fn_t","esp_idf_sys::bindings::sample_to_rmt_t","esp_idf_sys::bindings::rmt_tx_done_callback_t","esp_idf_sys::bindings::rmt_rx_done_callback_t","esp_idf_sys::bindings::rmt_encode_simple_cb_t","esp_idf_sys::bindings::slave_transaction_cb_t","esp_idf_sys::bindings::timer_isr_t","esp_idf_sys::bindings::uart_select_notif_callback_t","esp_idf_sys::bindings::panic_info_dump_fn_t","esp_idf_sys::bindings::esp_lcd_panel_io_color_trans_done_cb_t"],["<section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Copy for Option&lt;T&gt;<div class=\"where\">where\n    T: Copy,</div></h3></section>","Copy","esp_idf_sys::bindings::__compar_fn_t","esp_idf_sys::bindings::shutdown_handler_t","esp_idf_sys::bindings::vprintf_like_t","esp_idf_sys::bindings::intr_handler_t","esp_idf_sys::bindings::esp_cpu_intr_handler_t","esp_idf_sys::bindings::esp_deep_sleep_cb_t","esp_idf_sys::bindings::esp_deep_sleep_wake_stub_fn_t","esp_idf_sys::bindings::TaskFunction_t","esp_idf_sys::bindings::multi_heap_walker_cb_t","esp_idf_sys::bindings::esp_alloc_failed_hook_t","esp_idf_sys::bindings::heap_caps_walker_cb_t","esp_idf_sys::bindings::TaskHookFunction_t","esp_idf_sys::bindings::StreamBufferCallbackFunction_t","esp_idf_sys::bindings::TimerCallbackFunction_t","esp_idf_sys::bindings::PendedFunction_t","esp_idf_sys::bindings::TlsDeleteCallbackFunction_t","esp_idf_sys::bindings::task_wdt_msg_handler","esp_idf_sys::bindings::esp_freertos_idle_cb_t","esp_idf_sys::bindings::esp_freertos_tick_cb_t","esp_idf_sys::bindings::esp_console_cmd_func_t","esp_idf_sys::bindings::esp_console_cmd_func_with_context_t","esp_idf_sys::bindings::linenoiseCompletionCallback","esp_idf_sys::bindings::linenoiseHintsCallback","esp_idf_sys::bindings::linenoiseFreeHintsCallback","esp_idf_sys::bindings::_sig_func_ptr","esp_idf_sys::bindings::arg_resetfn","esp_idf_sys::bindings::arg_scanfn","esp_idf_sys::bindings::arg_checkfn","esp_idf_sys::bindings::arg_errorfn","esp_idf_sys::bindings::arg_dstr_freefn","esp_idf_sys::bindings::arg_cmdfn","esp_idf_sys::bindings::arg_comparefn","esp_idf_sys::bindings::esp_timer_cb_t","esp_idf_sys::bindings::esp_event_handler_t","esp_idf_sys::bindings::esp_netif_receive_t","esp_idf_sys::bindings::esp_netif_find_predicate_t","esp_idf_sys::bindings::esp_netif_callback_fn","esp_idf_sys::bindings::wifi_action_rx_cb_t","esp_idf_sys::bindings::esp_aes_128_encrypt_t","esp_idf_sys::bindings::esp_aes_128_decrypt_t","esp_idf_sys::bindings::esp_aes_wrap_t","esp_idf_sys::bindings::esp_aes_unwrap_t","esp_idf_sys::bindings::esp_hmac_sha256_vector_t","esp_idf_sys::bindings::esp_sha256_prf_t","esp_idf_sys::bindings::esp_hmac_md5_t","esp_idf_sys::bindings::esp_hmac_md5_vector_t","esp_idf_sys::bindings::esp_hmac_sha1_t","esp_idf_sys::bindings::esp_hmac_sha1_vector_t","esp_idf_sys::bindings::esp_sha1_prf_t","esp_idf_sys::bindings::esp_sha1_vector_t","esp_idf_sys::bindings::esp_pbkdf2_sha1_t","esp_idf_sys::bindings::esp_rc4_skip_t","esp_idf_sys::bindings::esp_md5_vector_t","esp_idf_sys::bindings::esp_aes_encrypt_t","esp_idf_sys::bindings::esp_aes_encrypt_init_t","esp_idf_sys::bindings::esp_aes_encrypt_deinit_t","esp_idf_sys::bindings::esp_aes_decrypt_t","esp_idf_sys::bindings::esp_aes_decrypt_init_t","esp_idf_sys::bindings::esp_aes_decrypt_deinit_t","esp_idf_sys::bindings::esp_omac1_aes_128_t","esp_idf_sys::bindings::esp_ccmp_decrypt_t","esp_idf_sys::bindings::esp_ccmp_encrypt_t","esp_idf_sys::bindings::esp_aes_gmac_t","esp_idf_sys::bindings::esp_sha256_vector_t","esp_idf_sys::bindings::esp_crc32_le_t","esp_idf_sys::bindings::wifi_promiscuous_cb_t","esp_idf_sys::bindings::esp_vendor_ie_cb_t","esp_idf_sys::bindings::wifi_csi_cb_t","esp_idf_sys::bindings::esp_now_recv_cb_t","esp_idf_sys::bindings::esp_now_send_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_ref_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_free_cb_t","esp_idf_sys::bindings::wifi_rxcb_t","esp_idf_sys::bindings::wifi_mac_time_update_cb_t","esp_idf_sys::bindings::wifi_tx_done_cb_t","esp_idf_sys::bindings::neighbor_rep_request_cb","esp_idf_sys::bindings::transaction_cb_t","esp_idf_sys::bindings::gpio_isr_t","esp_idf_sys::bindings::dns_found_callback","esp_idf_sys::bindings::pbuf_free_custom_fn","esp_idf_sys::bindings::netif_init_fn","esp_idf_sys::bindings::netif_input_fn","esp_idf_sys::bindings::netif_output_fn","esp_idf_sys::bindings::netif_output_ip6_fn","esp_idf_sys::bindings::netif_linkoutput_fn","esp_idf_sys::bindings::netif_status_callback_fn","esp_idf_sys::bindings::netif_igmp_mac_filter_fn","esp_idf_sys::bindings::netif_mld_mac_filter_fn","esp_idf_sys::bindings::netif_ext_callback_fn","esp_idf_sys::bindings::init_fn_t","esp_idf_sys::bindings::input_fn_t","esp_idf_sys::bindings::sntp_sync_time_cb_t","esp_idf_sys::bindings::esp_sntp_time_cb_t","esp_idf_sys::bindings::ETSTask","esp_idf_sys::bindings::ets_idle_cb_t","esp_idf_sys::bindings::ETSTimerFunc","esp_idf_sys::bindings::ets_isr_t","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_sign_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_key_len_func","esp_idf_sys::bindings::mbedtls_x509_crt_ext_cb_t","esp_idf_sys::bindings::mbedtls_x509_crt_ca_cb_t","esp_idf_sys::bindings::mbedtls_ssl_send_t","esp_idf_sys::bindings::mbedtls_ssl_recv_t","esp_idf_sys::bindings::mbedtls_ssl_recv_timeout_t","esp_idf_sys::bindings::mbedtls_ssl_set_timer_t","esp_idf_sys::bindings::mbedtls_ssl_get_timer_t","esp_idf_sys::bindings::mbedtls_ssl_cache_get_t","esp_idf_sys::bindings::mbedtls_ssl_cache_set_t","esp_idf_sys::bindings::mbedtls_ssl_export_keys_t","esp_idf_sys::bindings::mbedtls_ssl_hs_cb_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_write_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_parse_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_write_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_check_t","esp_idf_sys::bindings::mbedtls_entropy_f_source_ptr","esp_idf_sys::bindings::http_event_handle_cb","esp_idf_sys::bindings::http_client_init_cb_t","esp_idf_sys::bindings::connect_func","esp_idf_sys::bindings::io_func","esp_idf_sys::bindings::io_read_func","esp_idf_sys::bindings::trans_func","esp_idf_sys::bindings::poll_func","esp_idf_sys::bindings::connect_async_func","esp_idf_sys::bindings::payload_transfer_func","esp_idf_sys::bindings::http_data_cb","esp_idf_sys::bindings::http_cb","esp_idf_sys::bindings::httpd_free_ctx_fn_t","esp_idf_sys::bindings::httpd_open_func_t","esp_idf_sys::bindings::httpd_close_func_t","esp_idf_sys::bindings::httpd_uri_match_func_t","esp_idf_sys::bindings::httpd_err_handler_func_t","esp_idf_sys::bindings::httpd_send_func_t","esp_idf_sys::bindings::httpd_recv_func_t","esp_idf_sys::bindings::httpd_pending_func_t","esp_idf_sys::bindings::httpd_work_fn_t","esp_idf_sys::bindings::nvs_flash_generate_keys_t","esp_idf_sys::bindings::nvs_flash_read_cfg_t","esp_idf_sys::bindings::protocomm_req_handler_t","esp_idf_sys::bindings::wifi_prov_cb_func_t","esp_idf_sys::bindings::adc_continuous_callback_t","esp_idf_sys::bindings::gptimer_alarm_cb_t","esp_idf_sys::bindings::i2c_master_callback_t","esp_idf_sys::bindings::i2c_slave_received_callback_t","esp_idf_sys::bindings::i2c_slave_stretch_callback_t","esp_idf_sys::bindings::i2s_isr_callback_t","esp_idf_sys::bindings::ledc_cb_t","esp_idf_sys::bindings::mcpwm_timer_event_cb_t","esp_idf_sys::bindings::mcpwm_brake_event_cb_t","esp_idf_sys::bindings::mcpwm_fault_event_cb_t","esp_idf_sys::bindings::mcpwm_compare_event_cb_t","esp_idf_sys::bindings::mcpwm_capture_event_cb_t","esp_idf_sys::bindings::rmt_tx_end_fn_t","esp_idf_sys::bindings::sample_to_rmt_t","esp_idf_sys::bindings::rmt_tx_done_callback_t","esp_idf_sys::bindings::rmt_rx_done_callback_t","esp_idf_sys::bindings::rmt_encode_simple_cb_t","esp_idf_sys::bindings::slave_transaction_cb_t","esp_idf_sys::bindings::timer_isr_t","esp_idf_sys::bindings::uart_select_notif_callback_t","esp_idf_sys::bindings::panic_info_dump_fn_t","esp_idf_sys::bindings::esp_lcd_panel_io_color_trans_done_cb_t"],["<section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Eq for Option&lt;T&gt;<div class=\"where\">where\n    T: Eq,</div></h3></section>","Eq","esp_idf_sys::bindings::__compar_fn_t","esp_idf_sys::bindings::shutdown_handler_t","esp_idf_sys::bindings::vprintf_like_t","esp_idf_sys::bindings::intr_handler_t","esp_idf_sys::bindings::esp_cpu_intr_handler_t","esp_idf_sys::bindings::esp_deep_sleep_cb_t","esp_idf_sys::bindings::esp_deep_sleep_wake_stub_fn_t","esp_idf_sys::bindings::TaskFunction_t","esp_idf_sys::bindings::multi_heap_walker_cb_t","esp_idf_sys::bindings::esp_alloc_failed_hook_t","esp_idf_sys::bindings::heap_caps_walker_cb_t","esp_idf_sys::bindings::TaskHookFunction_t","esp_idf_sys::bindings::StreamBufferCallbackFunction_t","esp_idf_sys::bindings::TimerCallbackFunction_t","esp_idf_sys::bindings::PendedFunction_t","esp_idf_sys::bindings::TlsDeleteCallbackFunction_t","esp_idf_sys::bindings::task_wdt_msg_handler","esp_idf_sys::bindings::esp_freertos_idle_cb_t","esp_idf_sys::bindings::esp_freertos_tick_cb_t","esp_idf_sys::bindings::esp_console_cmd_func_t","esp_idf_sys::bindings::esp_console_cmd_func_with_context_t","esp_idf_sys::bindings::linenoiseCompletionCallback","esp_idf_sys::bindings::linenoiseHintsCallback","esp_idf_sys::bindings::linenoiseFreeHintsCallback","esp_idf_sys::bindings::_sig_func_ptr","esp_idf_sys::bindings::arg_resetfn","esp_idf_sys::bindings::arg_scanfn","esp_idf_sys::bindings::arg_checkfn","esp_idf_sys::bindings::arg_errorfn","esp_idf_sys::bindings::arg_dstr_freefn","esp_idf_sys::bindings::arg_cmdfn","esp_idf_sys::bindings::arg_comparefn","esp_idf_sys::bindings::esp_timer_cb_t","esp_idf_sys::bindings::esp_event_handler_t","esp_idf_sys::bindings::esp_netif_receive_t","esp_idf_sys::bindings::esp_netif_find_predicate_t","esp_idf_sys::bindings::esp_netif_callback_fn","esp_idf_sys::bindings::wifi_action_rx_cb_t","esp_idf_sys::bindings::esp_aes_128_encrypt_t","esp_idf_sys::bindings::esp_aes_128_decrypt_t","esp_idf_sys::bindings::esp_aes_wrap_t","esp_idf_sys::bindings::esp_aes_unwrap_t","esp_idf_sys::bindings::esp_hmac_sha256_vector_t","esp_idf_sys::bindings::esp_sha256_prf_t","esp_idf_sys::bindings::esp_hmac_md5_t","esp_idf_sys::bindings::esp_hmac_md5_vector_t","esp_idf_sys::bindings::esp_hmac_sha1_t","esp_idf_sys::bindings::esp_hmac_sha1_vector_t","esp_idf_sys::bindings::esp_sha1_prf_t","esp_idf_sys::bindings::esp_sha1_vector_t","esp_idf_sys::bindings::esp_pbkdf2_sha1_t","esp_idf_sys::bindings::esp_rc4_skip_t","esp_idf_sys::bindings::esp_md5_vector_t","esp_idf_sys::bindings::esp_aes_encrypt_t","esp_idf_sys::bindings::esp_aes_encrypt_init_t","esp_idf_sys::bindings::esp_aes_encrypt_deinit_t","esp_idf_sys::bindings::esp_aes_decrypt_t","esp_idf_sys::bindings::esp_aes_decrypt_init_t","esp_idf_sys::bindings::esp_aes_decrypt_deinit_t","esp_idf_sys::bindings::esp_omac1_aes_128_t","esp_idf_sys::bindings::esp_ccmp_decrypt_t","esp_idf_sys::bindings::esp_ccmp_encrypt_t","esp_idf_sys::bindings::esp_aes_gmac_t","esp_idf_sys::bindings::esp_sha256_vector_t","esp_idf_sys::bindings::esp_crc32_le_t","esp_idf_sys::bindings::wifi_promiscuous_cb_t","esp_idf_sys::bindings::esp_vendor_ie_cb_t","esp_idf_sys::bindings::wifi_csi_cb_t","esp_idf_sys::bindings::esp_now_recv_cb_t","esp_idf_sys::bindings::esp_now_send_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_ref_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_free_cb_t","esp_idf_sys::bindings::wifi_rxcb_t","esp_idf_sys::bindings::wifi_mac_time_update_cb_t","esp_idf_sys::bindings::wifi_tx_done_cb_t","esp_idf_sys::bindings::neighbor_rep_request_cb","esp_idf_sys::bindings::transaction_cb_t","esp_idf_sys::bindings::gpio_isr_t","esp_idf_sys::bindings::dns_found_callback","esp_idf_sys::bindings::pbuf_free_custom_fn","esp_idf_sys::bindings::netif_init_fn","esp_idf_sys::bindings::netif_input_fn","esp_idf_sys::bindings::netif_output_fn","esp_idf_sys::bindings::netif_output_ip6_fn","esp_idf_sys::bindings::netif_linkoutput_fn","esp_idf_sys::bindings::netif_status_callback_fn","esp_idf_sys::bindings::netif_igmp_mac_filter_fn","esp_idf_sys::bindings::netif_mld_mac_filter_fn","esp_idf_sys::bindings::netif_ext_callback_fn","esp_idf_sys::bindings::init_fn_t","esp_idf_sys::bindings::input_fn_t","esp_idf_sys::bindings::sntp_sync_time_cb_t","esp_idf_sys::bindings::esp_sntp_time_cb_t","esp_idf_sys::bindings::ETSTask","esp_idf_sys::bindings::ets_idle_cb_t","esp_idf_sys::bindings::ETSTimerFunc","esp_idf_sys::bindings::ets_isr_t","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_sign_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_key_len_func","esp_idf_sys::bindings::mbedtls_x509_crt_ext_cb_t","esp_idf_sys::bindings::mbedtls_x509_crt_ca_cb_t","esp_idf_sys::bindings::mbedtls_ssl_send_t","esp_idf_sys::bindings::mbedtls_ssl_recv_t","esp_idf_sys::bindings::mbedtls_ssl_recv_timeout_t","esp_idf_sys::bindings::mbedtls_ssl_set_timer_t","esp_idf_sys::bindings::mbedtls_ssl_get_timer_t","esp_idf_sys::bindings::mbedtls_ssl_cache_get_t","esp_idf_sys::bindings::mbedtls_ssl_cache_set_t","esp_idf_sys::bindings::mbedtls_ssl_export_keys_t","esp_idf_sys::bindings::mbedtls_ssl_hs_cb_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_write_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_parse_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_write_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_check_t","esp_idf_sys::bindings::mbedtls_entropy_f_source_ptr","esp_idf_sys::bindings::http_event_handle_cb","esp_idf_sys::bindings::http_client_init_cb_t","esp_idf_sys::bindings::connect_func","esp_idf_sys::bindings::io_func","esp_idf_sys::bindings::io_read_func","esp_idf_sys::bindings::trans_func","esp_idf_sys::bindings::poll_func","esp_idf_sys::bindings::connect_async_func","esp_idf_sys::bindings::payload_transfer_func","esp_idf_sys::bindings::http_data_cb","esp_idf_sys::bindings::http_cb","esp_idf_sys::bindings::httpd_free_ctx_fn_t","esp_idf_sys::bindings::httpd_open_func_t","esp_idf_sys::bindings::httpd_close_func_t","esp_idf_sys::bindings::httpd_uri_match_func_t","esp_idf_sys::bindings::httpd_err_handler_func_t","esp_idf_sys::bindings::httpd_send_func_t","esp_idf_sys::bindings::httpd_recv_func_t","esp_idf_sys::bindings::httpd_pending_func_t","esp_idf_sys::bindings::httpd_work_fn_t","esp_idf_sys::bindings::nvs_flash_generate_keys_t","esp_idf_sys::bindings::nvs_flash_read_cfg_t","esp_idf_sys::bindings::protocomm_req_handler_t","esp_idf_sys::bindings::wifi_prov_cb_func_t","esp_idf_sys::bindings::adc_continuous_callback_t","esp_idf_sys::bindings::gptimer_alarm_cb_t","esp_idf_sys::bindings::i2c_master_callback_t","esp_idf_sys::bindings::i2c_slave_received_callback_t","esp_idf_sys::bindings::i2c_slave_stretch_callback_t","esp_idf_sys::bindings::i2s_isr_callback_t","esp_idf_sys::bindings::ledc_cb_t","esp_idf_sys::bindings::mcpwm_timer_event_cb_t","esp_idf_sys::bindings::mcpwm_brake_event_cb_t","esp_idf_sys::bindings::mcpwm_fault_event_cb_t","esp_idf_sys::bindings::mcpwm_compare_event_cb_t","esp_idf_sys::bindings::mcpwm_capture_event_cb_t","esp_idf_sys::bindings::rmt_tx_end_fn_t","esp_idf_sys::bindings::sample_to_rmt_t","esp_idf_sys::bindings::rmt_tx_done_callback_t","esp_idf_sys::bindings::rmt_rx_done_callback_t","esp_idf_sys::bindings::rmt_encode_simple_cb_t","esp_idf_sys::bindings::slave_transaction_cb_t","esp_idf_sys::bindings::timer_isr_t","esp_idf_sys::bindings::uart_select_notif_callback_t","esp_idf_sys::bindings::panic_info_dump_fn_t","esp_idf_sys::bindings::esp_lcd_panel_io_color_trans_done_cb_t"],["<section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; StructuralPartialEq for Option&lt;T&gt;</h3></section>","StructuralPartialEq","esp_idf_sys::bindings::__compar_fn_t","esp_idf_sys::bindings::shutdown_handler_t","esp_idf_sys::bindings::vprintf_like_t","esp_idf_sys::bindings::intr_handler_t","esp_idf_sys::bindings::esp_cpu_intr_handler_t","esp_idf_sys::bindings::esp_deep_sleep_cb_t","esp_idf_sys::bindings::esp_deep_sleep_wake_stub_fn_t","esp_idf_sys::bindings::TaskFunction_t","esp_idf_sys::bindings::multi_heap_walker_cb_t","esp_idf_sys::bindings::esp_alloc_failed_hook_t","esp_idf_sys::bindings::heap_caps_walker_cb_t","esp_idf_sys::bindings::TaskHookFunction_t","esp_idf_sys::bindings::StreamBufferCallbackFunction_t","esp_idf_sys::bindings::TimerCallbackFunction_t","esp_idf_sys::bindings::PendedFunction_t","esp_idf_sys::bindings::TlsDeleteCallbackFunction_t","esp_idf_sys::bindings::task_wdt_msg_handler","esp_idf_sys::bindings::esp_freertos_idle_cb_t","esp_idf_sys::bindings::esp_freertos_tick_cb_t","esp_idf_sys::bindings::esp_console_cmd_func_t","esp_idf_sys::bindings::esp_console_cmd_func_with_context_t","esp_idf_sys::bindings::linenoiseCompletionCallback","esp_idf_sys::bindings::linenoiseHintsCallback","esp_idf_sys::bindings::linenoiseFreeHintsCallback","esp_idf_sys::bindings::_sig_func_ptr","esp_idf_sys::bindings::arg_resetfn","esp_idf_sys::bindings::arg_scanfn","esp_idf_sys::bindings::arg_checkfn","esp_idf_sys::bindings::arg_errorfn","esp_idf_sys::bindings::arg_dstr_freefn","esp_idf_sys::bindings::arg_cmdfn","esp_idf_sys::bindings::arg_comparefn","esp_idf_sys::bindings::esp_timer_cb_t","esp_idf_sys::bindings::esp_event_handler_t","esp_idf_sys::bindings::esp_netif_receive_t","esp_idf_sys::bindings::esp_netif_find_predicate_t","esp_idf_sys::bindings::esp_netif_callback_fn","esp_idf_sys::bindings::wifi_action_rx_cb_t","esp_idf_sys::bindings::esp_aes_128_encrypt_t","esp_idf_sys::bindings::esp_aes_128_decrypt_t","esp_idf_sys::bindings::esp_aes_wrap_t","esp_idf_sys::bindings::esp_aes_unwrap_t","esp_idf_sys::bindings::esp_hmac_sha256_vector_t","esp_idf_sys::bindings::esp_sha256_prf_t","esp_idf_sys::bindings::esp_hmac_md5_t","esp_idf_sys::bindings::esp_hmac_md5_vector_t","esp_idf_sys::bindings::esp_hmac_sha1_t","esp_idf_sys::bindings::esp_hmac_sha1_vector_t","esp_idf_sys::bindings::esp_sha1_prf_t","esp_idf_sys::bindings::esp_sha1_vector_t","esp_idf_sys::bindings::esp_pbkdf2_sha1_t","esp_idf_sys::bindings::esp_rc4_skip_t","esp_idf_sys::bindings::esp_md5_vector_t","esp_idf_sys::bindings::esp_aes_encrypt_t","esp_idf_sys::bindings::esp_aes_encrypt_init_t","esp_idf_sys::bindings::esp_aes_encrypt_deinit_t","esp_idf_sys::bindings::esp_aes_decrypt_t","esp_idf_sys::bindings::esp_aes_decrypt_init_t","esp_idf_sys::bindings::esp_aes_decrypt_deinit_t","esp_idf_sys::bindings::esp_omac1_aes_128_t","esp_idf_sys::bindings::esp_ccmp_decrypt_t","esp_idf_sys::bindings::esp_ccmp_encrypt_t","esp_idf_sys::bindings::esp_aes_gmac_t","esp_idf_sys::bindings::esp_sha256_vector_t","esp_idf_sys::bindings::esp_crc32_le_t","esp_idf_sys::bindings::wifi_promiscuous_cb_t","esp_idf_sys::bindings::esp_vendor_ie_cb_t","esp_idf_sys::bindings::wifi_csi_cb_t","esp_idf_sys::bindings::esp_now_recv_cb_t","esp_idf_sys::bindings::esp_now_send_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_ref_cb_t","esp_idf_sys::bindings::wifi_netstack_buf_free_cb_t","esp_idf_sys::bindings::wifi_rxcb_t","esp_idf_sys::bindings::wifi_mac_time_update_cb_t","esp_idf_sys::bindings::wifi_tx_done_cb_t","esp_idf_sys::bindings::neighbor_rep_request_cb","esp_idf_sys::bindings::transaction_cb_t","esp_idf_sys::bindings::gpio_isr_t","esp_idf_sys::bindings::dns_found_callback","esp_idf_sys::bindings::pbuf_free_custom_fn","esp_idf_sys::bindings::netif_init_fn","esp_idf_sys::bindings::netif_input_fn","esp_idf_sys::bindings::netif_output_fn","esp_idf_sys::bindings::netif_output_ip6_fn","esp_idf_sys::bindings::netif_linkoutput_fn","esp_idf_sys::bindings::netif_status_callback_fn","esp_idf_sys::bindings::netif_igmp_mac_filter_fn","esp_idf_sys::bindings::netif_mld_mac_filter_fn","esp_idf_sys::bindings::netif_ext_callback_fn","esp_idf_sys::bindings::init_fn_t","esp_idf_sys::bindings::input_fn_t","esp_idf_sys::bindings::sntp_sync_time_cb_t","esp_idf_sys::bindings::esp_sntp_time_cb_t","esp_idf_sys::bindings::ETSTask","esp_idf_sys::bindings::ets_idle_cb_t","esp_idf_sys::bindings::ETSTimerFunc","esp_idf_sys::bindings::ets_isr_t","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_decrypt_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_sign_func","esp_idf_sys::bindings::mbedtls_pk_rsa_alt_key_len_func","esp_idf_sys::bindings::mbedtls_x509_crt_ext_cb_t","esp_idf_sys::bindings::mbedtls_x509_crt_ca_cb_t","esp_idf_sys::bindings::mbedtls_ssl_send_t","esp_idf_sys::bindings::mbedtls_ssl_recv_t","esp_idf_sys::bindings::mbedtls_ssl_recv_timeout_t","esp_idf_sys::bindings::mbedtls_ssl_set_timer_t","esp_idf_sys::bindings::mbedtls_ssl_get_timer_t","esp_idf_sys::bindings::mbedtls_ssl_cache_get_t","esp_idf_sys::bindings::mbedtls_ssl_cache_set_t","esp_idf_sys::bindings::mbedtls_ssl_export_keys_t","esp_idf_sys::bindings::mbedtls_ssl_hs_cb_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_write_t","esp_idf_sys::bindings::mbedtls_ssl_ticket_parse_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_write_t","esp_idf_sys::bindings::mbedtls_ssl_cookie_check_t","esp_idf_sys::bindings::mbedtls_entropy_f_source_ptr","esp_idf_sys::bindings::http_event_handle_cb","esp_idf_sys::bindings::http_client_init_cb_t","esp_idf_sys::bindings::connect_func","esp_idf_sys::bindings::io_func","esp_idf_sys::bindings::io_read_func","esp_idf_sys::bindings::trans_func","esp_idf_sys::bindings::poll_func","esp_idf_sys::bindings::connect_async_func","esp_idf_sys::bindings::payload_transfer_func","esp_idf_sys::bindings::http_data_cb","esp_idf_sys::bindings::http_cb","esp_idf_sys::bindings::httpd_free_ctx_fn_t","esp_idf_sys::bindings::httpd_open_func_t","esp_idf_sys::bindings::httpd_close_func_t","esp_idf_sys::bindings::httpd_uri_match_func_t","esp_idf_sys::bindings::httpd_err_handler_func_t","esp_idf_sys::bindings::httpd_send_func_t","esp_idf_sys::bindings::httpd_recv_func_t","esp_idf_sys::bindings::httpd_pending_func_t","esp_idf_sys::bindings::httpd_work_fn_t","esp_idf_sys::bindings::nvs_flash_generate_keys_t","esp_idf_sys::bindings::nvs_flash_read_cfg_t","esp_idf_sys::bindings::protocomm_req_handler_t","esp_idf_sys::bindings::wifi_prov_cb_func_t","esp_idf_sys::bindings::adc_continuous_callback_t","esp_idf_sys::bindings::gptimer_alarm_cb_t","esp_idf_sys::bindings::i2c_master_callback_t","esp_idf_sys::bindings::i2c_slave_received_callback_t","esp_idf_sys::bindings::i2c_slave_stretch_callback_t","esp_idf_sys::bindings::i2s_isr_callback_t","esp_idf_sys::bindings::ledc_cb_t","esp_idf_sys::bindings::mcpwm_timer_event_cb_t","esp_idf_sys::bindings::mcpwm_brake_event_cb_t","esp_idf_sys::bindings::mcpwm_fault_event_cb_t","esp_idf_sys::bindings::mcpwm_compare_event_cb_t","esp_idf_sys::bindings::mcpwm_capture_event_cb_t","esp_idf_sys::bindings::rmt_tx_end_fn_t","esp_idf_sys::bindings::sample_to_rmt_t","esp_idf_sys::bindings::rmt_tx_done_callback_t","esp_idf_sys::bindings::rmt_rx_done_callback_t","esp_idf_sys::bindings::rmt_encode_simple_cb_t","esp_idf_sys::bindings::slave_transaction_cb_t","esp_idf_sys::bindings::timer_isr_t","esp_idf_sys::bindings::uart_select_notif_callback_t","esp_idf_sys::bindings::panic_info_dump_fn_t","esp_idf_sys::bindings::esp_lcd_panel_io_color_trans_done_cb_t"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[221953,236850]}