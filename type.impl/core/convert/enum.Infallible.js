(function() {
    var type_impls = Object.fromEntries([["futures_util",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Infallible\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.34.0\">1.34.0</span><a href=\"#impl-Clone-for-Infallible\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl Clone for Infallible</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">clone</a>(&amp;self) -&gt; Infallible</h4></section></summary><div class='docblock'>Returns a copy of the value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a>Read more</a></div></details></div></details>","Clone","futures_util::never::Never"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Infallible\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.34.0\">1.34.0</span><a href=\"#impl-Debug-for-Infallible\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl Debug for Infallible</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">fmt</a>(&amp;self, _: &amp;mut Formatter&lt;'_&gt;) -&gt; Result&lt;(), Error&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a>Read more</a></div></details></div></details>","Debug","futures_util::never::Never"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Infallible\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.34.0\">1.34.0</span><a href=\"#impl-Display-for-Infallible\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl Display for Infallible</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">fmt</a>(&amp;self, _: &amp;mut Formatter&lt;'_&gt;) -&gt; Result&lt;(), Error&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a>Read more</a></div></details></div></details>","Display","futures_util::never::Never"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Error-for-Infallible\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.8.0\">1.8.0</span><a href=\"#impl-Error-for-Infallible\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl Error for Infallible</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.description\" class=\"method trait-impl\"><a href=\"#method.description\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">description</a>(&amp;self) -&gt; &amp;str</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">๐</span><span>Deprecated since 1.42.0: use the Display impl or to_string()</span></div></span><div class='docblock'> <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.source\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.30.0\">1.30.0</span><a href=\"#method.source\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">source</a>(&amp;self) -&gt; Option&lt;&amp;(dyn Error + 'static)&gt;</h4></section></summary><div class='docblock'>Returns the lower-level source of this error, if any. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cause\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.cause\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">cause</a>(&amp;self) -&gt; Option&lt;&amp;dyn Error&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">๐</span><span>Deprecated since 1.33.0: replaced by Error::source, which can support downcasting</span></div></span></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.provide\" class=\"method trait-impl\"><a href=\"#method.provide\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">provide</a>&lt;'a&gt;(&amp;'a self, request: &amp;mut Request&lt;'a&gt;)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">๐ฌ</span><span>This is a nightly-only experimental API. (<code>error_generic_member_access</code>)</span></div></span><div class='docblock'>Provides type-based access to context intended for error reports. <a>Read more</a></div></details></div></details>","Error","futures_util::never::Never"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C!%3E-for-Infallible\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.34.0\">1.34.0</span><a href=\"#impl-From%3C!%3E-for-Infallible\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl From&lt;!&gt; for Infallible</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">from</a>(x: !) -&gt; Infallible</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<!>","futures_util::never::Never"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Infallible\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.44.0\">1.44.0</span><a href=\"#impl-Hash-for-Infallible\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl Hash for Infallible</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">hash</a>&lt;H&gt;(&amp;self, _: &amp;mut H)<div class=\"where\">where\n    H: Hasher,</div></h4></section></summary><div class='docblock'>Feeds this value into the given [<code>Hasher</code>]. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.3.0\">1.3.0</span><a href=\"#method.hash_slice\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: &amp;mut H)<div class=\"where\">where\n    H: Hasher,\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given [<code>Hasher</code>]. <a>Read more</a></div></details></div></details>","Hash","futures_util::never::Never"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Infallible\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.34.0\">1.34.0</span><a href=\"#impl-Ord-for-Infallible\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl Ord for Infallible</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a href=\"#method.cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">cmp</a>(&amp;self, _other: &amp;Infallible) -&gt; Ordering</h4></section></summary><div class='docblock'>This method returns an [<code>Ordering</code>] between <code>self</code> and <code>other</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.21.0\">1.21.0</span><a href=\"#method.max\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.21.0\">1.21.0</span><a href=\"#method.min\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.50.0\">1.50.0</span><a href=\"#method.clamp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a>Read more</a></div></details></div></details>","Ord","futures_util::never::Never"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Infallible\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.34.0\">1.34.0</span><a href=\"#impl-PartialEq-for-Infallible\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl PartialEq for Infallible</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">eq</a>(&amp;self, _: &amp;Infallible) -&gt; bool</h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">ne</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","futures_util::never::Never"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Infallible\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.34.0\">1.34.0</span><a href=\"#impl-PartialOrd-for-Infallible\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl PartialOrd for Infallible</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">partial_cmp</a>(&amp;self, _other: &amp;Infallible) -&gt; Option&lt;Ordering&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.lt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">lt</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.le\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">le</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.gt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">gt</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.ge\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">ge</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a>Read more</a></div></details></div></details>","PartialOrd","futures_util::never::Never"],["<section id=\"impl-Copy-for-Infallible\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.34.0\">1.34.0</span><a href=\"#impl-Copy-for-Infallible\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl Copy for Infallible</h3></section>","Copy","futures_util::never::Never"],["<section id=\"impl-Eq-for-Infallible\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.34.0\">1.34.0</span><a href=\"#impl-Eq-for-Infallible\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl Eq for Infallible</h3></section>","Eq","futures_util::never::Never"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[15202]}